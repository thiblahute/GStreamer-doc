fragment_downloaded_cb({"url": "gst-editing-services-1.0/ges-asset.html#ges_asset_request_async", "fragment": "ges_asset_request_async \nGES.Asset.request_async \nGES.Asset.prototype.request_async \nRequest a new GESAsset asyncronously callback will be called when the materail is ready to be used or if an error occured. \nExample of request of a GESAsset async \nParameters \nThe GType of the object that can be extracted from the new asset. The class must implement the GESExtractable interface. \nThe Identifier of the asset we want to create. This identifier depends of the extractable type you want. By default it is the name of the class itself or NULL but for example for a GESEffect it will be the pipeline description for a GESUriClip it will be the name of the file etc... You should refer to the documentation of the GESExtractable type you want to create a GESAsset for. \noptional GCancellable object NULL to ignore. \na GAsyncReadyCallback to call when the initialization is finished Note that the source of the callback will be the GESAsset but you need to make sure that the asset is properly loaded using the ges_asset_request_finish method. This asset can not be used as is. \nThe user data to pass when callback is called \nRequest a new GES.Asset asyncronously callback will be called when the materail is ready to be used or if an error occured. \nExample of request of a GESAsset async \nParameters \nThe GObject.Type of the object that can be extracted from the new asset. The class must implement the GES.Extractable interface. \nThe Identifier of the asset we want to create. This identifier depends of the extractable type you want. By default it is the name of the class itself or None but for example for a GESEffect it will be the pipeline description for a GESUriClip it will be the name of the file etc... You should refer to the documentation of the GES.Extractable type you want to create a GES.Asset for. \noptional Gio.Cancellable object None to ignore. \na Gio.AsyncReadyCallback to call when the initialization is finished Note that the source of the callback will be the GES.Asset but you need to make sure that the asset is properly loaded using the GES.Asset.request_finish method. This asset can not be used as is. \nThe user data to pass when callback is called \nRequest a new GES.Asset asyncronously callback will be called when the materail is ready to be used or if an error occured. \nExample of request of a GESAsset async \nParameters \nThe GObject.Type of the object that can be extracted from the new asset. The class must implement the GES.Extractable interface. \nThe Identifier of the asset we want to create. This identifier depends of the extractable type you want. By default it is the name of the class itself or null but for example for a GESEffect it will be the pipeline description for a GESUriClip it will be the name of the file etc... You should refer to the documentation of the GES.Extractable type you want to create a GES.Asset for. \noptional Gio.Cancellable object null to ignore. \na Gio.AsyncReadyCallback to call when the initialization is finished Note that the source of the callback will be the GES.Asset but you need to make sure that the asset is properly loaded using the GES.Asset.prototype.request_finish method. This asset can not be used as is. \nThe user data to pass when callback is called \n"});