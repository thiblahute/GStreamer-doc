fragment_downloaded_cb({"url": "gst-editing-services-1.0/ges-timeline.html#ges_timeline_commit", "fragment": "GES.prototype.commit \nGES.Timeline.commit \nGES.Timeline.Commit \nges_timeline_commit \nCommit all the pending changes of the clips contained in the timeline. \nWhen changes happen in a timeline they are not directly executed in the non linear engine. Call this method once you are done with a set of changes and want it to be executed. \nThe commited signal will be emitted when the possibly updated Gst.Pipeline is ready to output data again except if the state of the timeline was Gst.State.READY or Gst.State.NULL. \nNote that all the pending changes will automatically be executed when the timeline goes from Gst.State.READY to Gst.State.PAUSED which usually is triggered by corresponding state changes in a containing GES.Pipeline. \nYou should not try to change the state of the timeline seek it or add tracks to it during a commit operation that is between a call to this function and after receiving the commited signal. \nSee GES.prototype.commit_sync if you don t want to bother with waiting for the signal. \nParameters \na GES.Timeline \ntrue if pending changes were commited or false if nothing needed to be commited \nCommit all the pending changes of the clips contained in the timeline. \nWhen changes happen in a timeline they are not directly executed in the non linear engine. Call this method once you are done with a set of changes and want it to be executed. \nThe commited signal will be emitted when the possibly updated Gst.Pipeline is ready to output data again except if the state of the timeline was Gst.State.READY or Gst.State.NULL. \nNote that all the pending changes will automatically be executed when the timeline goes from Gst.State.READY to Gst.State.PAUSED which usually is triggered by corresponding state changes in a containing GES.Pipeline. \nYou should not try to change the state of the timeline seek it or add tracks to it during a commit operation that is between a call to this function and after receiving the commited signal. \nSee GES.Timeline.commit_sync if you don t want to bother with waiting for the signal. \nParameters \na GES.Timeline \nTrue if pending changes were commited or False if nothing needed to be commited \nCommit all the pending changes of the clips contained in the timeline. \nWhen changes happen in a timeline they are not directly executed in the non linear engine. Call this method once you are done with a set of changes and want it to be executed. \nThe Commited signal will be emitted when the possibly updated Gst.Pipeline is ready to output data again except if the state of the timeline was Gst.State.Ready or Gst.State.Null. \nNote that all the pending changes will automatically be executed when the timeline goes from Gst.State.Ready to Gst.State.Paused which usually is triggered by corresponding state changes in a containing GES.Pipeline. \nYou should not try to change the state of the timeline seek it or add tracks to it during a commit operation that is between a call to this function and after receiving the Commited signal. \nSee GES.Timeline.CommitSync if you don t want to bother with waiting for the signal. \ntrue if pending changes were commited or false if nothing needed to be commited \nCommit all the pending changes of the clips contained in the timeline. \nWhen changes happen in a timeline they are not directly executed in the non linear engine. Call this method once you are done with a set of changes and want it to be executed. \nThe commited signal will be emitted when the possibly updated GstPipeline is ready to output data again except if the state of the timeline was GST_STATE_READY or GST_STATE_NULL. \nNote that all the pending changes will automatically be executed when the timeline goes from GST_STATE_READY to GST_STATE_PAUSED which usually is triggered by corresponding state changes in a containing GESPipeline. \nYou should not try to change the state of the timeline seek it or add tracks to it during a commit operation that is between a call to this function and after receiving the commited signal. \nSee ges_timeline_commit_sync if you don t want to bother with waiting for the signal. \nParameters \na GESTimeline \nTRUE if pending changes were commited or FALSE if nothing needed to be commited \n"});