fragment_downloaded_cb({"url": "gst-editing-services-1.0/javascript/ges-asset.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"ges-asset.h\">\n<h1 id=\"gesasset\">GESAsset</h1><p>The Assets in the GStreamer Editing Services represent the resources\nthat can be used. You can create assets for any type that implements the <a href=\"ges-extractable.html#GESExtractable\">GES.Extractable</a>\ninterface, for example <a href=\"ges-clip.html#GESClip\">GES.Clip</a>, <a href=\"ges-formatter.html#GESFormatter\">GES.Formatter</a>, and <a href=\"ges-track-element.html#GESTrackElement\">GES.TrackElement</a> do implement it.\nThis means that assets will represent for example a <a href=\"ges-uri-clip.html#GESUriClip\">GES.UriClip</a>, <a href=\"ges-base-effect.html#GESBaseEffect\">GES.BaseEffect</a> etc,\nand then you can extract objects of those types with the appropriate parameters from the asset\nusing the <a href=\"ges-asset.html#ges_asset_extract\">GES.Asset.prototype.extract</a> method:</p>\n<pre><code class=\"language-[\"> GESAsset *effect_asset;\n GESEffect *effect;\n\n // You create an asset for an effect\n effect_asset = ges_asset_request (GES_TYPE_EFFECT, \"agingtv\", NULL);\n\n // And now you can extract an instance of GESEffect from that asset\n effect = GES_EFFECT (ges_asset_extract (effect_asset));\n\n</code></pre>\n<p>In that example, the advantages of having a <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> are that you can know what effects\nyou are working with and let your user know about the avalaible ones, you can add metadata\nto the <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> through the <a href=\"ges-meta-container.html#GESMetaContainer\">GES.MetaContainer</a> interface and you have a model for your\ncustom effects. Note that <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> management is making easier thanks to the <a href=\"ges-project.html#GESProject\">GES.Project</a> class.</p>\n<p>Each asset is represented by a pair of <em>extractable_type</em> and <em>id</em> (string). Actually the <em>extractable_type</em>\nis the type that implements the <a href=\"ges-extractable.html#GESExtractable\">GES.Extractable</a> interface, that means that for example for a <a href=\"ges-uri-clip.html#GESUriClip\">GES.UriClip</a>,\nthe type that implements the <a href=\"ges-extractable.html#GESExtractable\">GES.Extractable</a> interface is <a href=\"ges-clip.html#GESClip\">GES.Clip</a>.\nThe identifier represents different things depending on the <em>extractable_type</em> and you should check\nthe documentation of each type to know what the ID of <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> actually represents for that type. By default,\nwe only have one <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> per type, and the <em>id</em> is the name of the type, but this behaviour is overriden\nto be more useful. For example, for GESTransitionClips, the ID is the vtype of the transition\nyou will extract from it (ie crossfade, box-wipe-rc etc..) For <a href=\"ges-effect.html#GESEffect\">GES.Effect</a> the ID is the\n<em>bin</em>-description property of the extracted objects (ie the gst-launch style description of the bin that\nwill be used).</p>\n<p>Each and every <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> is cached into GES, and you can query those with the <a href=\"ges-asset.html#ges_list_assets\">GES.prototype.list_assets</a> function.\nAlso the system will automatically register <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> for <a href=\"ges-formatter.html#GESFormatter\">GES.Formatter</a> and <a href=\"ges-transition-clip.html#GESTransitionClip\">GES.TransitionClip</a>\nand standard effects (actually not implemented yet) and you can simply query those calling:</p>\n<pre><code class=\"language-[\">    GList *formatter_assets, *tmp;\n\n    //  List all  the transitions\n    formatter_assets = ges_list_assets (GES_TYPE_FORMATTER);\n\n    // Print some infos about the formatter GESAsset\n    for (tmp = formatter_assets; tmp; tmp = tmp-&gt;next) {\n      g_print (\"Name of the formatter: %s, file extension it produces: %s\",\n        ges_meta_container_get_string (GES_META_CONTAINER (tmp-&gt;data), GES_META_FORMATTER_NAME),\n        ges_meta_container_get_string (GES_META_CONTAINER (tmp-&gt;data), GES_META_FORMATTER_EXTENSION));\n    }\n\n    g_list_free (transition_assets);\n\n</code></pre>\n<p>You can request the creation of <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> using either <a href=\"ges-asset.html#ges_asset_request_async\">GES.Asset.prototype.request_async</a> or\n<a href=\"ges-asset.html#ges_asset_request_async\">GES.Asset.prototype.request_async</a>. All the <a href=\"ges-asset.html#GESAsset\">GES.Asset</a> are cached and thus any asset that has already\nbeen created can be requested again without overhead.</p>\n\n</div>\n\n\n"});