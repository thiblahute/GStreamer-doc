fragment_downloaded_cb({"url": "gst-editing-services-1.0/javascript/ges-asset.html#gesasset-page", "fragment": "GESAsset \nThe Assets in the GStreamer Editing Services represent the resources that can be used. You can create assets for any type that implements the GES.Extractable interface for example GES.Clip GES.Formatter and GES.TrackElement do implement it. This means that assets will represent for example a GES.UriClip GES.BaseEffect etc and then you can extract objects of those types with the appropriate parameters from the asset using the GES.Asset.prototype.extract method \nIn that example the advantages of having a GES.Asset are that you can know what effects you are working with and let your user know about the avalaible ones you can add metadata to the GES.Asset through the GES.MetaContainer interface and you have a model for your custom effects. Note that GES.Asset management is making easier thanks to the GES.Project class. \nEach asset is represented by a pair of extractable_type and id string Actually the extractable_type is the type that implements the GES.Extractable interface that means that for example for a GES.UriClip the type that implements the GES.Extractable interface is GES.Clip. The identifier represents different things depending on the extractable_type and you should check the documentation of each type to know what the ID of GES.Asset actually represents for that type. By default we only have one GES.Asset per type and the id is the name of the type but this behaviour is overriden to be more useful. For example for GESTransitionClips the ID is the vtype of the transition you will extract from it ie crossfade box wipe rc etc.. For GES.Effect the ID is the bin description property of the extracted objects ie the gst launch style description of the bin that will be used \nEach and every GES.Asset is cached into GES and you can query those with the GES.prototype.list_assets function. Also the system will automatically register GES.Asset for GES.Formatter and GES.TransitionClip and standard effects actually not implemented yet and you can simply query those calling \nYou can request the creation of GES.Asset using either GES.Asset.prototype.request_async or GES.Asset.prototype.request_async. All the GES.Asset are cached and thus any asset that has already been created can be requested again without overhead. \n"});