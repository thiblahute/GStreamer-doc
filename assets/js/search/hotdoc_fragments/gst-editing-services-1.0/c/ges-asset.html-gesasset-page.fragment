fragment_downloaded_cb({"url": "gst-editing-services-1.0/c/ges-asset.html#gesasset-page", "fragment": "GESAsset \nThe Assets in the GStreamer Editing Services represent the resources that can be used. You can create assets for any type that implements the GESExtractable interface for example GESClip GESFormatter and GESTrackElement do implement it. This means that assets will represent for example a GESUriClip GESBaseEffect etc and then you can extract objects of those types with the appropriate parameters from the asset using the ges_asset_extract method \nIn that example the advantages of having a GESAsset are that you can know what effects you are working with and let your user know about the avalaible ones you can add metadata to the GESAsset through the GESMetaContainer interface and you have a model for your custom effects. Note that GESAsset management is making easier thanks to the GESProject class. \nEach asset is represented by a pair of extractable_type and id string Actually the extractable_type is the type that implements the GESExtractable interface that means that for example for a GESUriClip the type that implements the GESExtractable interface is GESClip. The identifier represents different things depending on the extractable_type and you should check the documentation of each type to know what the ID of GESAsset actually represents for that type. By default we only have one GESAsset per type and the id is the name of the type but this behaviour is overriden to be more useful. For example for GESTransitionClips the ID is the vtype of the transition you will extract from it ie crossfade box wipe rc etc.. For GESEffect the ID is the bin description property of the extracted objects ie the gst launch style description of the bin that will be used \nEach and every GESAsset is cached into GES and you can query those with the ges_list_assets function. Also the system will automatically register GESAsset for GESFormatter and GESTransitionClip and standard effects actually not implemented yet and you can simply query those calling \nYou can request the creation of GESAsset using either ges_asset_request_async or ges_asset_request_async. All the GESAsset are cached and thus any asset that has already been created can be requested again without overhead. \n"});