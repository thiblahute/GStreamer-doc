fragment_downloaded_cb({"url": "gst-plugins-base-audio-1.0/javascript/gstaudiobasesink.html#page-description", "fragment": "Virtual Methods \nOpaque GstAudio.AudioBaseSink. \ngboolean eos_rendering \nGstAudioBaseSinkPrivate priv \nCreate and return the GstAudio.AudioRingBuffer for sink. This function will call the create_ringbuffer vmethod and will set sink as the parent of the returned buffer see Gst.Object.prototype.set_parent \nGet the current alignment threshold in nanoseconds used by sink. \nGet the current discont wait in nanoseconds used by sink. \nGet the current drift tolerance in microseconds used by sink. \nQueries whether sink will provide a clock or not. See also gst_audio_base_sink_set_provide_clock. \nGet the current slave method used by sink. \nInforms this base class that the audio output device has failed for some reason causing a discontinuity for example because the device recovered from the error but lost all contents of its ring buffer This function is typically called by derived classes and is useful for the custom slave method. \nControls the sink s alignment threshold. \nSets the custom slaving callback. This callback will be invoked if the slave method property is set to GST_AUDIO_BASE_SINK_SLAVE_CUSTOM and the audio sink receives and plays samples. \nSetting the callback to NULL causes the sink to behave as if the GST_AUDIO_BASE_SINK_SLAVE_NONE method were used. \nControls how long the sink will wait before creating a discontinuity. \nControls the sink s drift tolerance. \nControls whether sink will provide a clock or not. If provide is true Gst.Element.prototype.provide_clock will return a clock that reflects the datarate of sink. If provide is false Gst.Element.prototype.provide_clock will return NULL. \nControls how clock slaving will be performed in sink. \ngpointer _gst_reserved \nDifferent possible reasons for discontinuities. This enum is useful for the custom slave method. \nNo discontinuity occurred \nGstAudio.AudioBaseSinkDiscontReason.prototype.new_caps \nNew caps are set causing renegotiotion \nGstAudio.AudioBaseSinkDiscontReason.prototype.flush \nSamples have been flushed \nGstAudio.AudioBaseSinkDiscontReason.prototype.sync_latency \nSink was synchronized to the estimated latency occurs during initialization \nGstAudio.AudioBaseSinkDiscontReason.prototype.alignment \nAligning buffers failed because the timestamps are too discontinuous \nGstAudio.AudioBaseSinkDiscontReason.prototype.device_failure \nAudio output device experienced and recovered from an error but introduced latency in the process see also gst_audio_base_sink_report_device_failure \nDifferent possible clock slaving algorithms used when the internal audio clock is not selected as the pipeline master clock. \nResample to match the master clock \nGstAudio.AudioBaseSinkSlaveMethod.prototype.skew \nAdjust playout pointer when master clock drifts too much. \nGstAudio.AudioBaseSinkSlaveMethod.prototype.none \nNo adjustment is done. \nGstAudio.AudioBaseSinkSlaveMethod.prototype.custom \nUse custom clock slaving algorithm Since \nThis function is set with GstAudio.AudioBaseSink.prototype.set_custom_slaving_callback and is called during playback. It receives the current time of external and internal clocks which the callback can then use to apply any custom slaving synchronization schemes. \nThe external clock is the sink s element clock the internal one is the internal audio clock. The internal audio clock s calibration is applied to the timestamps before they are passed to the callback. The difference between etime and itime is the skew how much internal and external clock lie apart from each other. A skew of means both clocks are perfectly in sync. itime etime means the external clock is going slower while itime etime means it is going faster than the internal clock. etime and itime are always valid timestamps except for when a discontinuity happens. \nrequested_skew is an output value the callback can write to. It informs the sink of whether or not it should move the playout pointer and if so by how much. This pointer is only NULL if a discontinuity occurs otherwise it is safe to write to requested_skew. The default skew is \nThe sink may experience discontinuities. If one happens discont is TRUE itime etime are set to GST_CLOCK_TIME_NONE and requested_skew is NULL. This makes it possible to reset custom clock slaving algorithms when a discontinuity happens. \n"});