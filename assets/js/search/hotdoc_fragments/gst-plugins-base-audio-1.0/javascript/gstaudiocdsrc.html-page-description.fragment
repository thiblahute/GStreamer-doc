fragment_downloaded_cb({"url": "gst-plugins-base-audio-1.0/javascript/gstaudiocdsrc.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstaudiocdsrc.h\">\n<h1 id=\"gstaudiocdsrc\">GstAudioCdSrc</h1><p>Provides a base class for CD digital audio (CDDA) sources, which handles\nthings like seeking, querying, discid calculation, tags, and buffer\ntimestamping.</p>\n<h2 id=\"using-gstaudiocdsrcbased-elements-in-applications\">Using GstAudioCdSrc-based elements in applications</h2>\n<p>GstAudioCdSrc registers two <a href=\"../../c/GstFormat\">Gst.Format</a><!-- -->s of its own, namely\nthe \"track\" format and the \"sector\" format. Applications will usually\nonly find the \"track\" format interesting. You can retrieve that <a href=\"../../c/GstFormat\">Gst.Format</a>\nfor use in seek events or queries with gst_format_get_by_nick(\"track\").</p>\n<p>In order to query the number of tracks, for example, an application would\nset the CDDA source element to READY or PAUSED state and then query the\nthe number of tracks via <a href=\"../../libgstreamer-1.0/c/gstelement.html#gst_element_query_duration\">Gst.Element.prototype.query_duration</a> using the track\nformat acquired above. Applications can query the currently playing track\nin the same way.</p>\n<p>Alternatively, applications may retrieve the currently playing track and\nthe total number of tracks from the taglist that will posted on the bus\nwhenever the CD is opened or the currently playing track changes. The\ntaglist will contain GST_TAG_TRACK_NUMBER and GST_TAG_TRACK_COUNT tags.</p>\n<p>Applications playing back CD audio using playbin and cdda://n URIs should\nissue a seek command in track format to change between tracks, rather than\nsetting a new cdda://n+1 URI on playbin (as setting a new URI on playbin\ninvolves closing and re-opening the CD device, which is much much slower).</p>\n<h2 id=\"tags-and-metainformation\">Tags and meta-information</h2>\n<p>CDDA sources will automatically emit a number of tags, details about which\ncan be found in the libgsttag documentation. Those tags are:\n<a href=\"../../gst-plugins-base-tag-1.0/c/tag.html#GST_TAG_CDDA_CDDB_DISCID\">GST_TAG_CDDA_CDDB_DISCID (not introspectable)</a>, <a href=\"../../gst-plugins-base-tag-1.0/c/tag.html#GST_TAG_CDDA_CDDB_DISCID_FULL\">GST_TAG_CDDA_CDDB_DISCID_FULL (not introspectable)</a>,\n<a href=\"../../gst-plugins-base-tag-1.0/c/tag.html#GST_TAG_CDDA_MUSICBRAINZ_DISCID\">GST_TAG_CDDA_MUSICBRAINZ_DISCID (not introspectable)</a>, <a href=\"../../gst-plugins-base-tag-1.0/c/tag.html#GST_TAG_CDDA_MUSICBRAINZ_DISCID_FULL\">GST_TAG_CDDA_MUSICBRAINZ_DISCID_FULL (not introspectable)</a>,\namong others.</p>\n<h2 id=\"tracks-and-table-of-contents-toc\">Tracks and Table of Contents (TOC)</h2>\n<p>Applications will be informed of the available tracks via a TOC message\non the pipeline's <a href=\"../../libgstreamer-1.0/c/gstbus.html#GstBus\">Gst.Bus</a>. The <a href=\"../../libgstreamer-1.0/c/gsttoc.html#GstToc\">Gst.Toc</a> will contain a <a href=\"../../libgstreamer-1.0/c/gsttoc.html#GstTocEntry\">Gst.TocEntry</a> for\neach track, with information about each track. The duration for each\ntrack can be retrieved via the <a href=\"../../libgstreamer-1.0/c/gsttaglist.html#GST_TAG_DURATION\">Gst.TAG_DURATION</a> tag from each entry's\ntag list, or calculated via <a href=\"../../libgstreamer-1.0/c/gsttoc.html#gst_toc_entry_get_start_stop_times\">Gst.TocEntry.prototype.get_start_stop_times</a>.\nThe track entries in the TOC will be sorted by track number.</p>\n\n</div>\n\n\n"});