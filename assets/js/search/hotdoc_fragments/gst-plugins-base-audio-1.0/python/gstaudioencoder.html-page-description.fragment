fragment_downloaded_cb({"url": "gst-plugins-base-audio-1.0/python/gstaudioencoder.html#page-description", "fragment": "Virtual Methods \nThe opaque GstAudio.AudioEncoder data structure. \nGstAudioEncoderPrivate priv \nHelper function that allocates a buffer to hold an encoded audio frame for enc s current output format. \nCollects encoded data and pushes encoded data downstream. Source pad caps must be set when this is called. \nIf samples then best estimate is all samples provided to encoder subclass so far. buf may be NULL in which case next number of samples are considered discarded e.g. as a result of discontinuous transmission and a discontinuity is marked. \nNote that samples received in gst_audio_encoder_handle_frame may be invalidated by a call to this function. \nLets GstAudio.AudioEncoder sub classes to know the memory allocator used by the base class and its params. \nUnref the allocator after use it. \nQueries encoder drain handling. \nQueries encoder hard minimum handling. \nSets the variables pointed to by min and max to the currently configured latency. \nQueries if the encoder will handle granule marking. \nQueries encoder perfect timestamp behaviour. \nQueries current audio jitter tolerance threshold. \nSets the audio encoder tags and how they should be merged with any upstream stream tags. This will override any tags previously set with GstAudio.AudioEncoder.merge_tags. \nNote that this is provided for convenience and the subclass is not required to use this and can still do tag handling on its own. \nMT safe. \nReturns caps that express caps or sink template caps if caps NULL restricted to channel rate combinations supported by downstream elements e.g. muxers \nSets a caps in allocation query which are different from the set pad s caps. Use this function before calling GstAudio.AudioEncoder.negotiate. Setting to None the allocation query will use the caps from the pad. \nConfigures encoder drain handling. If drainable subclass might be handed a NULL buffer to have it return any leftover encoded data. Otherwise it is not considered so capable and will only ever be passed real data. \nMT safe. \nSets max number of frames accepted at once assumed minimally Requires frame_samples_min and frame_samples_max to be the equal. \nNote This value will be reset to every time before GstAudioEncoder set_format is called. \nSets number of samples per channel subclass needs to be handed at most or will be handed all available if \nIf an exact number of samples is required GstAudio.AudioEncoder.set_frame_samples_min must be called with the same number. \nNote This value will be reset to every time before GstAudioEncoder set_format is called. \nSets number of samples per channel subclass needs to be handed at least or will be handed all available if \nIf an exact number of samples is required GstAudio.AudioEncoder.set_frame_samples_max must be called with the same number. \nNote This value will be reset to every time before GstAudioEncoder set_format is called. \nConfigures encoder hard minimum handling. If enabled subclass will never be handed less samples than it configured which otherwise might occur near end of data handling. Instead the leftover samples will simply be discarded. \nMT safe. \nSet the codec headers to be sent downstream whenever requested. \nSets encoder latency. \nSets encoder lookahead in units of input rate samples \nNote This value will be reset to every time before GstAudioEncoder set_format is called. \nEnable or disable encoder granule handling. \nMT safe. \nConfigure output caps on the srcpad of enc. \nEnable or disable encoder perfect output timestamp preference. \nMT safe. \nConfigures encoder audio jitter tolerance threshold. \nMT safe. \ngpointer _gst_reserved \nthe name of the templates for the sink pad \nthe name of the templates for the source pad \n"});