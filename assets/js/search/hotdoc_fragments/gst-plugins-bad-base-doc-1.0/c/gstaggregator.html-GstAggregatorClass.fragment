fragment_downloaded_cb({"url": "gst-plugins-bad-base-doc-1.0/c/gstaggregator.html#GstAggregatorClass", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GstAggregatorClass\">\n\t\t<h3 id=\"struct-gstaggregatorclass\">\n\t\tstruct GstAggregatorClass\n\t</h3>\n\n\t\t<p>The aggregator base class will handle in a thread-safe way all manners of\nconcurrent flushes, seeks, pad additions and removals, leaving to the\nsubclass the responsibility of clipping buffers, and aggregating buffers in\nthe way the implementor sees fit.</p>\n<p>It will also take care of event ordering (stream-start, segment, eos).</p>\n<p>Basically, a basic implementation will override <em>aggregate</em>, and call\n_finish_buffer from inside that function.</p>\n\n\n<div class=\"member_details\">\n\t<h4 id=\"fields\">Fields</h4>\n\t<div class=\"member_container\">\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.parent_class\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"GstElementClass\" href=\"../../libgstreamer-doc-1.0/c/gstelement.html#GstElementClass\">GstElementClass</a> <em><code>parent_class</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.sinkpads_type\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"GType\" href=\"https://developer.gnome.org/gobject/unstable/gobject-Type-Information.html#GType\">GType</a> <em><code>sinkpads_type</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nThe type of the pads that should be created when\nGstElement.request_new_pad is called.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.flush\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>flush</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled after a succesful flushing seek, once all the flush\nstops have been received. Flush pad-specific data in\n<a href=\"gstaggregator.html#GstAggregatorPad\">GstAggregatorPad</a>-&gt;flush.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.clip\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>clip</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when a buffer is received on a sink pad, the task\nof clipping it and translating it to the current segment\nfalls on the subclass.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.sink_event\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>sink_event</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when an event is received on a sink pad, the subclass\nshould always chain up.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.sink_query\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>sink_query</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when a query is received on a sink pad, the subclass\nshould always chain up.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.src_event\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>src_event</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when an event is received on the src pad, the subclass\nshould always chain up.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.src_query\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>src_query</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when a query is received on the src pad, the subclass\nshould always chain up.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.src_activate\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>src_activate</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when the src pad is activated, it will start/stop its\npad task right after that call.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.aggregate\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>aggregate</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Mandatory.\nCalled when buffers are queued on all sinkpads. Classes\nshould iterate the GstElement-&gt;sinkpads and peek or steal\nbuffers from the <a href=\"gstaggregator.html#GstAggregatorPad\">GstAggregatorPad</a>. If the subclass returns\nGST_FLOW_EOS, sending of the eos event will be taken care\nof. Once / if a buffer has been constructed from the\naggregated buffers, the subclass should call _finish_buffer.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.stop\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>stop</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when the element goes from PAUSED to READY.\nThe subclass should free all resources and reset its state.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.start\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>start</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when the element goes from READY to PAUSED.\nThe subclass should get ready to process\naggregated buffers.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.get_next_time\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>get_next_time</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nCalled when the element needs to know the running time of the next\nrendered buffer for live pipelines. This causes deadline\nbased aggregation to occur. Defaults to returning\nGST_CLOCK_TIME_NONE causing the element to wait for buffers\non all sink pads before aggregating.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass.create_new_pad\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>create_new_pad</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstAggregatorClass._gst_reserved\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"gpointer\" href=\"https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gpointer\">gpointer</a> <em><code>_gst_reserved</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n</div>\n\n\n</div>\n\n\n\n"});