fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/javascript/gst.html#gst_init_get_option_group", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"gst_init_get_option_group\">\n\t\t<h3 id=\"gst_init_get_option_group-not-introspectable\">\n\t<span><code>gst_init_get_option_group (not introspectable)</code></span>\n</h3>\n\n\t\t<pre class=\"programlisting\">\nfunction gst_init_get_option_group (not introspectable)(): {\n    // javascript wrapper for 'gst_init_get_option_group'\n}</pre>\n\n<p>Returns a <a href=\"https://developer.gnome.org/glib/unstable/glib-Commandline-option-parser.html#GOptionGroup\">GLib.OptionGroup</a> with GStreamer's argument specifications. The\ngroup is set up to use standard GOption callbacks, so when using this\ngroup in combination with GOption parsing methods, all argument parsing\nand initialization is automated.</p>\n<p>This function is useful if you want to integrate GStreamer with other\nlibraries that use GOption (see <a href=\"https://developer.gnome.org/glib/unstable/glib-Commandline-option-parser.html#g-option-context-add-group\">GLib.OptionContext.prototype.add_group</a> ).</p>\n<p>If you use this function, you should make sure you initialise the GLib\nthreading system as one of the very first things in your program\n(see the example at the beginning of this section).</p>\n\n\n\t<div class=\"multi_return_value_container\">\n\t\t\t<h4 id=\"returns1\">Returns:</h4>\n\t\t<table>\n\t\t<colgroup>\n\t\t\t<col>\n\t\t\t<col>\n\t\t\t<col>\n\t\t</colgroup>\n\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t<td>\n\t\t<p>\n\t\t\t\t</p>\n\t</td>\n\t<td>\n\t\t<p>a pointer to GStreamer's option group.</p>\n\n\t</td>\n\t<td>\n\t\t<a title=\"GLib.OptionGroup\" href=\"https://developer.gnome.org/glib/unstable/glib-Commandline-option-parser.html#GOptionGroup\">GLib.OptionGroup</a>\n\t</td>\n\t</tr>\n\n\t\t\t\t\t</tbody>\n\t</table>\n</div>\n\n\n\n\n</div>\n\n\n\n"});