fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/javascript/gstchildproxy.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstchildproxy.h\">\n<h1 id=\"gstchildproxy\">GstChildProxy</h1><p>This interface abstracts handling of property sets for elements with\nchildren. Imagine elements such as mixers or polyphonic generators. They all\nhave multiple <a href=\"../../libgstreamer-doc-1.0/javascript/gstpad.html#GstPad\">Gst.Pad</a> or some kind of voice objects. Another use case are\ncontainer elements like <a href=\"../../libgstreamer-doc-1.0/javascript/gstbin.html#GstBin\">Gst.Bin</a>.\nThe element implementing the interface acts as a parent for those child\nobjects.</p>\n<p>By implementing this interface the child properties can be accessed from the\nparent element by using <a href=\"../../libgstreamer-doc-1.0/c/gstchildproxy.html#gst_child_proxy_get\">gst_child_proxy_get (not introspectable)</a> and <a href=\"../../libgstreamer-doc-1.0/c/gstchildproxy.html#gst_child_proxy_set\">gst_child_proxy_set (not introspectable)</a>.</p>\n<p>Property names are written as \"child-name::property-name\". The whole naming\nscheme is recursive. Thus \"child1::child2::property\" is valid too, if\n\"child1\" and \"child2\" implement the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstChildProxy.html#GstChildProxy-struct\">Gst.ChildProxy</a> interface.</p>\n\n</div>\n\n\n"});