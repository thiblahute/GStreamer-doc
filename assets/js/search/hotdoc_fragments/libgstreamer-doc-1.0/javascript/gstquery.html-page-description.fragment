fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/javascript/gstquery.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstquery.h\">\n<h1 id=\"gstquery\">GstQuery</h1><p>Queries can be performed on pads (<a href=\"../../libgstreamer-doc-1.0/javascript/gstpad.html#gst_pad_query\">Gst.Pad.prototype.query</a>) and elements\n(<a href=\"../../libgstreamer-doc-1.0/javascript/gstelement.html#gst_element_query\">Gst.Element.prototype.query</a>). Please note that some queries might need a running\npipeline to work.</p>\n<p>Queries can be created using the gst_query_new_<em>() functions.\nQuery values can be set using gst_query_set_</em>(), and parsed using\ngst_query_parse_*() helpers.</p>\n<p>The following example shows how to query the duration of a pipeline:</p>\n<pre><code class=\"language-c\">  GstQuery *query;\n  gboolean res;\n  query = gst_query_new_duration (GST_FORMAT_TIME);\n  res = gst_element_query (pipeline, query);\n  if (res) {\n    gint64 duration;\n    gst_query_parse_duration (query, NULL, &amp;amp;duration);\n    g_print (\"duration = %\"GST_TIME_FORMAT, GST_TIME_ARGS (duration));\n  } else {\n    g_print (\"duration query failed...\");\n  }\n  gst_query_unref (query);\n</code></pre>\n\n</div>\n\n\n"});