fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/javascript/gstinfo.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstinfo.h\">\n<h1 id=\"gstinfo\">GstInfo</h1><p>GStreamer's debugging subsystem is an easy way to get information about what\nthe application is doing.  It is not meant for programming errors. Use GLib\nmethods (g_warning and friends) for that.</p>\n<p>The debugging subsystem works only after GStreamer has been initialized</p>\n<ul>\n<li>for example by calling <a href=\"../../libgstreamer-doc-1.0/javascript/gst.html#gst_init\">Gst.prototype.init</a>.</li>\n</ul>\n<p>The debugging subsystem is used to log informational messages while the\napplication runs.  Each messages has some properties attached to it. Among\nthese properties are the debugging category, the severity (called \"level\"\nhere) and an optional <a href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct\">GObject.Object</a> it belongs to. Each of these messages is sent\nto all registered debugging handlers, which then handle the messages.\nGStreamer attaches a default handler on startup, which outputs requested\nmessages to stderr.</p>\n<p>Messages are output by using shortcut macros like <a href=\"../../libgstreamer-doc-1.0/c/gstinfo.html#GST_DEBUG\">GST_DEBUG (not introspectable)</a>,\n<a href=\"../../libgstreamer-doc-1.0/c/gstinfo.html#GST_CAT_ERROR_OBJECT\">GST_CAT_ERROR_OBJECT (not introspectable)</a> or similar. These all expand to calling <a href=\"../../libgstreamer-doc-1.0/c/gstinfo.html#gst_debug_log\">gst_debug_log (not introspectable)</a>\nwith the right parameters.\nThe only thing a developer will probably want to do is define his own\ncategories. This is easily done with 3 lines. At the top of your code,\ndeclare\nthe variables and set the default category.</p>\n<pre><code class=\"language-[&lt;!--\">   GST_DEBUG_CATEGORY_STATIC (my_category);  // define category (statically)\n   #define GST_CAT_DEFAULT my_category       // set as default\n</code></pre>\n<p>After that you only need to initialize the category.</p>\n<pre><code class=\"language-[&lt;!--\">   GST_DEBUG_CATEGORY_INIT (my_category, \"my category\",\n                            0, \"This is my very own\");\n</code></pre>\n<p>Initialization must be done before the category is used first.\nPlugins do this\nin their plugin_init function, libraries and applications should do that\nduring their initialization.</p>\n<p>The whole debugging subsystem can be disabled at build time with passing the\n--disable-gst-debug switch to configure. If this is done, every function,\nmacro and even structs described in this file evaluate to default values or\nnothing at all.\nSo don't take addresses of these functions or use other tricks.\nIf you must do that for some reason, there is still an option.\nIf the debugging\nsubsystem was compiled out, <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-GstConfig.html#GST-DISABLE-GST-DEBUG:CAPS\">GST_DISABLE_GST_DEBUG (not introspectable)</a> is defined in\n&amp;lt;gst/gst.h&amp;gt;,\nso you can check that before doing your trick.\nDisabling the debugging subsystem will give you a slight (read: unnoticeable)\nspeed increase and will reduce the size of your compiled code. The GStreamer\nlibrary itself becomes around 10% smaller.</p>\n<p>Please note that there are naming conventions for the names of debugging\ncategories. These are explained at <a href=\"../../libgstreamer-doc-1.0/c/gstinfo.html#GST_DEBUG_CATEGORY_INIT\">GST_DEBUG_CATEGORY_INIT (not introspectable)</a>.</p>\n\n</div>\n\n\n"});