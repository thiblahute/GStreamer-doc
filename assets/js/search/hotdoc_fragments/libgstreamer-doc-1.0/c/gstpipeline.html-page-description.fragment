fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/c/gstpipeline.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstpipeline.h\">\n<h1 id=\"gstpipeline\">GstPipeline</h1><p>A <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a> is a special <a href=\"gstbin.html#GstBin\">GstBin</a> used as the toplevel container for\nthe filter graph. The <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a> will manage the selection and\ndistribution of a global <a href=\"gstclock.html#GstClock\">GstClock</a> as well as provide a <a href=\"gstbus.html#GstBus\">GstBus</a> to the\napplication.</p>\n<p><a href=\"gstpipeline.html#gst_pipeline_new\">gst_pipeline_new</a> is used to create a pipeline. when you are done with\nthe pipeline, use <a href=\"gstobject.html#gst_object_unref\">gst_object_unref</a> to free its resources including all\nadded <a href=\"gstelement.html#GstElement\">GstElement</a> objects (if not otherwise referenced).</p>\n<p>Elements are added and removed from the pipeline using the <a href=\"gstbin.html#GstBin\">GstBin</a>\nmethods like <a href=\"gstbin.html#gst_bin_add\">gst_bin_add</a> and <a href=\"gstbin.html#gst_bin_remove\">gst_bin_remove</a> (see <a href=\"gstbin.html#GstBin\">GstBin</a>).</p>\n<p>Before changing the state of the <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a> (see <a href=\"gstelement.html#GstElement\">GstElement</a>) a <a href=\"gstbus.html#GstBus\">GstBus</a>\ncan be retrieved with <a href=\"gstpipeline.html#gst_pipeline_get_bus\">gst_pipeline_get_bus</a>. This bus can then be\nused to receive <a href=\"gstmessage.html#GstMessage\">GstMessage</a> from the elements in the pipeline.</p>\n<p>By default, a <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a> will automatically flush the pending <a href=\"gstbus.html#GstBus\">GstBus</a>\nmessages when going to the NULL state to ensure that no circular\nreferences exist when no messages are read from the <a href=\"gstbus.html#GstBus\">GstBus</a>. This\nbehaviour can be changed with <a href=\"gstpipeline.html#gst_pipeline_set_auto_flush_bus\">gst_pipeline_set_auto_flush_bus</a>.</p>\n<p>When the <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a> performs the PAUSED to PLAYING state change it will\nselect a clock for the elements. The clock selection algorithm will by\ndefault select a clock provided by an element that is most upstream\n(closest to the source). For live pipelines (ones that return\n<a href=\"gstelement.html#GST_STATE_CHANGE_NO_PREROLL\">GST_STATE_CHANGE_NO_PREROLL</a> from the <a href=\"gstelement.html#gst_element_set_state\">gst_element_set_state</a> call) this\nwill select the clock provided by the live source. For normal pipelines\nthis will select a clock provided by the sinks (most likely the audio\nsink). If no element provides a clock, a default <a href=\"gstsystemclock.html#GstSystemClock\">GstSystemClock</a> is used.</p>\n<p>The clock selection can be controlled with the <a href=\"gstpipeline.html#gst_pipeline_use_clock\">gst_pipeline_use_clock</a>\nmethod, which will enforce a given clock on the pipeline. With\n<a href=\"gstpipeline.html#gst_pipeline_auto_clock\">gst_pipeline_auto_clock</a> the default clock selection algorithm can be\nrestored.</p>\n<p>A <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a> maintains a running time for the elements. The running\ntime is defined as the difference between the current clock time and\nthe base time. When the pipeline goes to READY or a flushing seek is\nperformed on it, the running time is reset to 0. When the pipeline is\nset from PLAYING to PAUSED, the current clock time is sampled and used to\nconfigure the base time for the elements when the pipeline is set\nto PLAYING again. The effect is that the running time (as the difference\nbetween the clock time and the base time) will count how much time was spent\nin the PLAYING state. This default behaviour can be changed with the\n<a href=\"gstelement.html#gst_element_set_start_time\">gst_element_set_start_time</a> method.</p>\n\n</div>\n\n\n"});