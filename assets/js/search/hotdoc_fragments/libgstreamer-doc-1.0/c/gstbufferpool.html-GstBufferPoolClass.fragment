fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/c/gstbufferpool.html#GstBufferPoolClass", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GstBufferPoolClass\">\n\t\t<h3 id=\"struct-gstbufferpoolclass\">\n\t\tstruct GstBufferPoolClass\n\t</h3>\n\n\t\t<p>The GstBufferPool class.</p>\n\n\n<div class=\"member_details\">\n\t<h4 id=\"fields1\">Fields</h4>\n\t<div class=\"member_container\">\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.object_class\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"GstObjectClass\" href=\"../../libgstreamer-doc-1.0/c/gstobject.html#GstObjectClass\">GstObjectClass</a> <em><code>object_class</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Object parent class</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.get_options\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>get_options</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>get a list of options supported by this pool</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.set_config\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>set_config</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>apply the bufferpool configuration. The default configuration\nwill parse the default config parameters</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.start\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>start</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>start the bufferpool. The default implementation will preallocate\nmin-buffers buffers and put them in the queue</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.stop\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>stop</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>stop the bufferpool. the default implementation will free the\npreallocated buffers. This function is called when all the buffers are\nreturned to the pool.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.acquire_buffer\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>acquire_buffer</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>get a new buffer from the pool. The default implementation\nwill take a buffer from the queue and optionally wait for a buffer to\nbe released when there are no buffers available.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.alloc_buffer\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>alloc_buffer</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>allocate a buffer. the default implementation allocates\nbuffers from the configured memory allocator and with the configured\nparameters. All metadata that is present on the allocated buffer will\nbe marked as <a href=\"../../libgstreamer-doc-1.0/c/gstmeta.html#GST_META_FLAG_POOLED\">GST_META_FLAG_POOLED</a> and <a href=\"../../libgstreamer-doc-1.0/c/gstmeta.html#GST_META_FLAG_LOCKED\">GST_META_FLAG_LOCKED</a> and will\nnot be removed from the buffer in <em>reset_buffer</em>. The buffer should\nhave the GST_BUFFER_FLAG_TAG_MEMORY cleared.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.reset_buffer\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>reset_buffer</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>reset the buffer to its state when it was freshly allocated.\nThe default implementation will clear the flags, timestamps and\nwill remove the metadata without the <a href=\"../../libgstreamer-doc-1.0/c/gstmeta.html#GST_META_FLAG_POOLED\">GST_META_FLAG_POOLED</a> flag (even\nthe metadata with <a href=\"../../libgstreamer-doc-1.0/c/gstmeta.html#GST_META_FLAG_LOCKED\">GST_META_FLAG_LOCKED</a>). If the\n<a href=\"../../libgstreamer-doc-1.0/c/gstbuffer.html#GST_BUFFER_FLAG_TAG_MEMORY\">GST_BUFFER_FLAG_TAG_MEMORY</a> was set, this function can also try to\nrestore the memory and clear the <a href=\"../../libgstreamer-doc-1.0/c/gstbuffer.html#GST_BUFFER_FLAG_TAG_MEMORY\">GST_BUFFER_FLAG_TAG_MEMORY</a> again.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.release_buffer\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>release_buffer</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>release a buffer back in the pool. The default\nimplementation will put the buffer back in the queue and notify any\nblocking acquire_buffer calls when the <a href=\"../../libgstreamer-doc-1.0/c/gstbuffer.html#GST_BUFFER_FLAG_TAG_MEMORY\">GST_BUFFER_FLAG_TAG_MEMORY</a>\nis not set on the buffer. If <a href=\"../../libgstreamer-doc-1.0/c/gstbuffer.html#GST_BUFFER_FLAG_TAG_MEMORY\">GST_BUFFER_FLAG_TAG_MEMORY</a> is set, the\nbuffer will be freed with <em>free_buffer</em>.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.free_buffer\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>free_buffer</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>free a buffer. The default implementation unrefs the buffer.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.flush_start\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>flush_start</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>enter the flushing state. (Since 1.4)</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass.flush_stop\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>flush_stop</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>leave the flushign state. (Since 1.4)</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstBufferPoolClass._gst_reserved\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"gpointer\" href=\"https://developer.gnome.org/glib/unstable/glib-Basic-Types.html#gpointer\">gpointer</a> <em><code>_gst_reserved</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n</div>\n\n\n</div>\n\n\n"});