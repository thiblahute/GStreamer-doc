fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/c/gsttypefindfactory.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gsttypefindfactory.h\">\n<h1 id=\"gsttypefindfactory\">GstTypeFindFactory</h1><p>These functions allow querying informations about registered typefind\nfunctions. How to create and register these functions is described in\nthe section <link linkend=\"gstreamer-Writing-typefind-functions\">\n\"Writing typefind functions\".</p>\n<p>The following example shows how to write a very simple typefinder that\nidentifies the given data. You can get quite a bit more complicated than\nthat though.</p>\n<pre><code class=\"language-[&lt;!--\">   typedef struct {\n     guint8 *data;\n     guint size;\n     guint probability;\n     GstCaps *data;\n   } MyTypeFind;\n   static void\n   my_peek (gpointer data, gint64 offset, guint size)\n   {\n     MyTypeFind *find = (MyTypeFind *) data;\n     if (offset &amp;gt;= 0 &amp;amp;&amp;amp; offset + size &amp;lt;= find-&gt;size) {\n       return find-&gt;data + offset;\n     }\n     return NULL;\n   }\n   static void\n   my_suggest (gpointer data, guint probability, GstCaps *caps)\n   {\n     MyTypeFind *find = (MyTypeFind *) data;\n     if (probability &amp;gt; find-&gt;probability) {\n       find-&gt;probability = probability;\n       gst_caps_replace (&amp;amp;find-&gt;caps, caps);\n     }\n   }\n   static GstCaps *\n   find_type (guint8 *data, guint size)\n   {\n     GList *walk, *type_list;\n     MyTypeFind find = {data, size, 0, NULL};\n     GstTypeFind gst_find = {my_peek, my_suggest, &amp;amp;find, };\n     walk = type_list = gst_type_find_factory_get_list ();\n     while (walk) {\n       GstTypeFindFactory *factory = GST_TYPE_FIND_FACTORY (walk-&gt;data);\n       walk = g_list_next (walk)\n       gst_type_find_factory_call_function (factory, &amp;amp;gst_find);\n     }\n     g_list_free (type_list);\n     return find.caps;\n   };\n</code></pre>\n\n</div>\n\n\n"});