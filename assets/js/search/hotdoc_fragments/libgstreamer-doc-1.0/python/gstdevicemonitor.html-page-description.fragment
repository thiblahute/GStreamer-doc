fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/python/gstdevicemonitor.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstdevicemonitor.h\">\n<h1 id=\"gstdevicemonitorprivate\">GstDeviceMonitorPrivate</h1><p>Applications should create a <a href=\"../../libgstreamer-doc-1.0/python/gstdevicemonitor.html#GstDeviceMonitor\">Gst.DeviceMonitor</a> when they want\nto probe, list and monitor devices of a specific type. The\n<a href=\"../../libgstreamer-doc-1.0/python/gstdevicemonitor.html#GstDeviceMonitor\">Gst.DeviceMonitor</a> will create the appropriate\n<a href=\"../../libgstreamer-doc-1.0/python/gstdeviceprovider.html#GstDeviceProvider\">Gst.DeviceProvider</a> objects and manage them. It will then post\nmessages on its <a href=\"../../libgstreamer-doc-1.0/python/gstbus.html#GstBus\">Gst.Bus</a> for devices that have been added and\nremoved.</p>\n<p>The device monitor will monitor all devices matching the filters that\nthe application has set.</p>\n<p>The basic use pattern of a device monitor is as follows:</p>\n<pre><code>  static gboolean\n  my_bus_func (GstBus * bus, GstMessage * message, gpointer user_data)\n  {\n     GstDevice *device;\n     gchar *name;\n\n     switch (GST_MESSAGE_TYPE (message)) {\n       case GST_MESSAGE_DEVICE_ADDED:\n         gst_message_parse_device_added (message, &amp;device);\n         name = gst_device_get_display_name (device);\n         g_print(\"Device added: %s\\n\", name);\n         g_free (name);\n         gst_object_unref (device);\n         break;\n       case GST_MESSAGE_DEVICE_REMOVED:\n         gst_message_parse_device_removed (message, &amp;device);\n         name = gst_device_get_display_name (device);\n         g_print(\"Device removed: %s\\n\", name);\n         g_free (name);\n         gst_object_unref (device);\n         break;\n       default:\n         break;\n     }\n\n     return G_SOURCE_CONTINUE;\n  }\n\n  GstDeviceMonitor *\n  setup_raw_video_source_device_monitor (void) {\n     GstDeviceMonitor *monitor;\n     GstBus *bus;\n     GstCaps *caps;\n\n     monitor = gst_device_monitor_new ();\n\n     bus = gst_device_monitor_get_bus (monitor);\n     gst_bus_add_watch (bus, my_bus_func, NULL);\n     gst_object_unref (bus);\n\n     caps = gst_caps_new_empty_simple (\"video/x-raw\");\n     gst_device_monitor_add_filter (monitor, \"Video/Source\", caps);\n     gst_caps_unref (caps);\n\n     gst_device_monitor_start (monitor);\n\n     return monitor;\n  }\n</code></pre>\n\n</div>\n\n\n"});