fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/python/gstutils.html#gst_util_seqnum_next", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"gst_util_seqnum_next\">\n\t\t<h3 id=\"gstutil_seqnum_next\">\n\t<span><code>Gst.util_seqnum_next</code></span>\n</h3>\n\n\t\t<pre class=\"programlisting\">\ndef Gst.util_seqnum_next ():\n    #python wrapper for 'gst_util_seqnum_next'</pre>\n\n<p>Return a constantly incrementing sequence number.</p>\n<p>This function is used internally to GStreamer to be able to determine which\nevents and messages are \"the same\". For example, elements may set the seqnum\non a segment-done message to be the same as that of the last seek event, to\nindicate that event and the message correspond to the same segment.</p>\n\n\n\t<div class=\"multi_return_value_container\">\n\t\t\t<h4 id=\"returns9\">Returns:</h4>\n\t\t<table>\n\t\t<colgroup>\n\t\t\t<col>\n\t\t\t<col>\n\t\t\t<col>\n\t\t</colgroup>\n\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t<td>\n\t\t<p>\n\t\t\t\t</p>\n\t</td>\n\t<td>\n\t\t<p>A constantly incrementing 32-bit unsigned integer, which might\noverflow back to 0 at some point. Use <a href=\"../../libgstreamer-doc-1.0/python/gstutils.html#gst_util_seqnum_compare\">Gst.util_seqnum_compare</a> to make sure\nyou handle wraparound correctly.</p>\n\n\t</td>\n\t<td>\n\t\t<a title=\"int\" href=\"https://docs.python.org/2/library/functions.html#int\">int</a>\n\t</td>\n\t</tr>\n\n\t\t\t\t\t</tbody>\n\t</table>\n</div>\n\n\n\n\n</div>\n\n\n\n"});