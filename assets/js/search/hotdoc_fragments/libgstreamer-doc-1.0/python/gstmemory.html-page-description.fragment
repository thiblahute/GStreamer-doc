fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/python/gstmemory.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstmemory.h\">\n<h1 id=\"gstmemory\">GstMemory</h1><p>GstMemory is a lightweight refcounted object that wraps a region of memory.\nThey are typically used to manage the data of a <a href=\"../../libgstreamer-doc-1.0/python/gstbuffer.html#GstBuffer\">Gst.Buffer</a>.</p>\n<p>A GstMemory object has an allocated region of memory of maxsize. The maximum\nsize does not change during the lifetime of the memory object. The memory\nalso has an offset and size property that specifies the valid range of memory\nin the allocated region.</p>\n<p>Memory is usually created by allocators with a <a href=\"../../libgstreamer-doc-1.0/python/gstallocator.html#gst_allocator_alloc\">Gst.Allocator.alloc</a>\nmethod call. When <a href=\"https://docs.python.org/2/library/constants.html#None\">None</a> is used as the allocator, the default allocator will\nbe used.</p>\n<p>New allocators can be registered with <a href=\"../../libgstreamer-doc-1.0/python/gstallocator.html#gst_allocator_register\">Gst.Allocator.register</a>.\nAllocators are identified by name and can be retrieved with\n<a href=\"../../libgstreamer-doc-1.0/python/gstallocator.html#gst_allocator_find\">Gst.Allocator.find</a>. <a href=\"../../libgstreamer-doc-1.0/python/gstallocator.html#gst_allocator_set_default\">Gst.Allocator.set_default</a> can be used to change the\ndefault allocator.</p>\n<p>New memory can be created with <a href=\"../../libgstreamer-doc-1.0/python/gstallocator.html#gst_memory_new_wrapped\">Gst.Memory.new_wrapped</a> that wraps the memory\nallocated elsewhere.</p>\n<p>Refcounting of the memory block is performed with <a href=\"../../libgstreamer-doc-1.0/c/gstmemory.html#gst_memory_ref\">gst_memory_ref (not introspectable)</a> and\n<a href=\"../../libgstreamer-doc-1.0/c/gstmemory.html#gst_memory_unref\">gst_memory_unref (not introspectable)</a>.</p>\n<p>The size of the memory can be retrieved and changed with\n<a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_get_sizes\">Gst.Memory.get_sizes</a> and <a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_resize\">Gst.Memory.resize</a> respectively.</p>\n<p>Getting access to the data of the memory is performed with <a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_map\">Gst.Memory.map</a>.\nThe call will return a pointer to offset bytes into the region of memory.\nAfter the memory access is completed, <a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_unmap\">Gst.Memory.unmap</a> should be called.</p>\n<p>Memory can be copied with <a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_copy\">Gst.Memory.copy</a>, which will return a writable\ncopy. <a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_share\">Gst.Memory.share</a> will create a new memory block that shares the\nmemory with an existing memory block at a custom offset and with a custom\nsize.</p>\n<p>Memory can be efficiently merged when <a href=\"../../libgstreamer-doc-1.0/python/gstmemory.html#gst_memory_is_span\">Gst.Memory.is_span</a> returns <a href=\"https://docs.python.org/2/library/constants.html#True\">True</a>.</p>\n\n</div>\n\n\n"});