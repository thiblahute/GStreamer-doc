fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/python/gstbuffer.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstbuffer.h\">\n<h1 id=\"gstbuffer\">GstBuffer</h1><p>Buffers are the basic unit of data transfer in GStreamer. They contain the\ntiming and offset along with other arbitrary metadata that is associated\nwith the <a href=\"../../libgstreamer-doc-1.0/gstmemory.html#GstMemory\">Gst.Memory</a> blocks that the buffer contains.</p>\n<p>Buffers are usually created with <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_new\">Gst.Buffer.new</a>. After a buffer has been\ncreated one will typically allocate memory for it and add it to the buffer.\nThe following example creates a buffer that can hold a given video frame\nwith a given width, height and bits per plane.</p>\n<pre><code class=\"language-[&lt;!--\">   GstBuffer *buffer;\n   GstMemory *memory;\n   gint size, width, height, bpp;\n   ...\n   size = width * height * bpp;\n   buffer = gst_buffer_new ();\n   memory = gst_allocator_alloc (NULL, size, NULL);\n   gst_buffer_insert_memory (buffer, -1, memory);\n   ...\n</code></pre>\n<p>Alternatively, use <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_new_allocate\">Gst.Buffer.new_allocate</a> to create a buffer with\npreallocated data of a given size.</p>\n<p>Buffers can contain a list of <a href=\"../../libgstreamer-doc-1.0/gstmemory.html#GstMemory\">Gst.Memory</a> objects. You can retrieve how many\nmemory objects with <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_n_memory\">Gst.Buffer.n_memory</a> and you can get a pointer\nto memory with <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_peek_memory\">Gst.Buffer.peek_memory</a></p>\n<p>A buffer will usually have timestamps, and a duration, but neither of these\nare guaranteed (they may be set to <a href=\"../../libgstreamer-doc-1.0/gstclock.html#GST_CLOCK_TIME_NONE\">Gst.CLOCK_TIME_NONE</a>). Whenever a\nmeaningful value can be given for these, they should be set. The timestamps\nand duration are measured in nanoseconds (they are <a href=\"../../libgstreamer-doc-1.0/gstclock.html#GstClockTime\">Gst.ClockTime</a> values).</p>\n<p>The buffer DTS refers to the timestamp when the buffer should be decoded and\nis usually monotonically increasing. The buffer PTS refers to the timestamp when\nthe buffer content should be presented to the user and is not always\nmonotonically increasing.</p>\n<p>A buffer can also have one or both of a start and an end offset. These are\nmedia-type specific. For video buffers, the start offset will generally be\nthe frame number. For audio buffers, it will be the number of samples\nproduced so far. For compressed data, it could be the byte offset in a\nsource or destination file. Likewise, the end offset will be the offset of\nthe end of the buffer. These can only be meaningfully interpreted if you\nknow the media type of the buffer (the preceding CAPS event). Either or both\ncan be set to <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GST_BUFFER_OFFSET_NONE\">Gst.BUFFER_OFFSET_NONE</a>.</p>\n<p><a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstBuffer.html#gst-buffer-ref\">gst_buffer_ref (not introspectable)</a> is used to increase the refcount of a buffer. This must be\ndone when you want to keep a handle to the buffer after pushing it to the\nnext element. The buffer refcount determines the writability of the buffer, a\nbuffer is only writable when the refcount is exactly 1, i.e. when the caller\nhas the only reference to the buffer.</p>\n<p>To efficiently create a smaller buffer out of an existing one, you can\nuse <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_copy_region\">Gst.Buffer.copy_region</a>. This method tries to share the memory objects\nbetween the two buffers.</p>\n<p>If a plug-in wants to modify the buffer data or metadata in-place, it should\nfirst obtain a buffer that is safe to modify by using\n<a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_make_writable\">gst_buffer_make_writable (not introspectable)</a>.  This function is optimized so that a copy will\nonly be made when it is necessary.</p>\n<p>Several flags of the buffer can be set and unset with the\n<a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GST_BUFFER_FLAG_SET\">GST_BUFFER_FLAG_SET (not introspectable)</a> and <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GST_BUFFER_FLAG_UNSET\">GST_BUFFER_FLAG_UNSET (not introspectable)</a> macros. Use\n<a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GST_BUFFER_FLAG_IS_SET\">GST_BUFFER_FLAG_IS_SET (not introspectable)</a> to test if a certain <a href=\"../../plugins-doc-1.0/element-identity.html#GstBufferFlags\">Gst.BufferFlags</a> flag is set.</p>\n<p>Buffers can be efficiently merged into a larger buffer with\n<a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_append\">Gst.Buffer.append</a>. Copying of memory will only be done when absolutely\nneeded.</p>\n<p>Arbitrary extra metadata can be set on a buffer with <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_add_meta\">Gst.Buffer.add_meta</a>.\nMetadata can be retrieved with <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#gst_buffer_get_meta\">Gst.Buffer.get_meta</a>. See also <a href=\"../../libgstreamer-doc-1.0/gstmeta.html#GstMeta\">Gst.Meta</a></p>\n<p>An element should either unref the buffer or push it out on a src pad\nusing <a href=\"../../libgstreamer-doc-1.0/gstpad.html#gst_pad_push\">Gst.Pad.push</a> (see <a href=\"../../libgstreamer-doc-1.0/gstpad.html#GstPad\">Gst.Pad</a>).</p>\n<p>Buffers are usually freed by unreffing them with <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstBuffer.html#gst-buffer-unref\">gst_buffer_unref (not introspectable)</a>. When\nthe refcount drops to 0, any memory and metadata pointed to by the buffer is\nunreffed as well. Buffers allocated from a <a href=\"../../libgstreamer-doc-1.0/gstbufferpool.html#GstBufferPool\">Gst.BufferPool</a> will be returned to\nthe pool when the refcount drops to 0.</p>\n<p>The <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GstParentBufferMeta\">Gst.ParentBufferMeta</a> is a meta which can be attached to a <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GstBuffer\">Gst.Buffer</a>\nto hold a reference to another buffer that is only released when the child\n<a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GstBuffer\">Gst.Buffer</a> is released.</p>\n<p>Typically, <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GstParentBufferMeta\">Gst.ParentBufferMeta</a> is used when the child buffer is directly\nusing the <a href=\"../../libgstreamer-doc-1.0/gstmemory.html#GstMemory\">Gst.Memory</a> of the parent buffer, and wants to prevent the parent\nbuffer from being returned to a buffer pool until the <a href=\"../../libgstreamer-doc-1.0/gstmemory.html#GstMemory\">Gst.Memory</a> is available\nfor re-use. (Since 1.6)</p>\n\n</div>\n\n\n"});