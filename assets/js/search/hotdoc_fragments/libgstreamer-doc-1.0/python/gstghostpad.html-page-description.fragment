fragment_downloaded_cb({"url": "libgstreamer-doc-1.0/python/gstghostpad.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstghostpad.h\">\n<h1 id=\"gstghostpad\">GstGhostPad</h1><p>GhostPads are useful when organizing pipelines with <a href=\"../../libgstreamer-doc-1.0/gstbin.html#GstBin\">Gst.Bin</a> like elements.\nThe idea here is to create hierarchical element graphs. The bin element\ncontains a sub-graph. Now one would like to treat the bin-element like any\nother <a href=\"../../libgstreamer-doc-1.0/gstelement.html#GstElement\">Gst.Element</a>. This is where GhostPads come into play. A GhostPad acts as\na proxy for another pad. Thus the bin can have sink and source ghost-pads\nthat are associated with sink and source pads of the child elements.</p>\n<p>If the target pad is known at creation time, <a href=\"../../libgstreamer-doc-1.0/gstghostpad.html#gst_ghost_pad_new\">Gst.GhostPad.new</a> is the\nfunction to use to get a ghost-pad. Otherwise one can use <a href=\"../../libgstreamer-doc-1.0/gstghostpad.html#gst_ghost_pad_new_no_target\">Gst.GhostPad.new_no_target</a>\nto create the ghost-pad and use <a href=\"../../libgstreamer-doc-1.0/gstghostpad.html#gst_ghost_pad_set_target\">Gst.GhostPad.set_target</a> to establish the\nassociation later on.</p>\n<p>Note that GhostPads add overhead to the data processing of a pipeline.</p>\n\n</div>\n\n\n"});