fragment_downloaded_cb({"url": "libgstreamer-1.0/gstutils.html#gst_util_uint64_scale_int_ceil", "fragment": "prototype.util_uint64_scale_int_ceil \nGst.util_uint64_scale_int_ceil \nGst.Util.UtilUint64ScaleIntCeil \ngst_util_uint64_scale_int_ceil \nScale val by the rational number num denom avoiding overflows and underflows and without loss of precision. num must be non negative and denom must be positive. \nParameters \nguint64 such as a Number to scale. \nnumerator of the scale factor. \ndenominator of the scale factor. \nval num denom. In the case of an overflow this function returns G_MAXUINT64. If the result is not exactly representable as an integer it is rounded up. See also prototype.util_uint64_scale_int prototype.util_uint64_scale_int_round prototype.util_uint64_scale prototype.util_uint64_scale_round prototype.util_uint64_scale_ceil. \nScale val by the rational number num denom avoiding overflows and underflows and without loss of precision. num must be non negative and denom must be positive. \nParameters \nguint64 such as a int to scale. \nnumerator of the scale factor. \ndenominator of the scale factor. \nval num denom. In the case of an overflow this function returns G_MAXUINT64. If the result is not exactly representable as an integer it is rounded up. See also Gst.util_uint64_scale_int Gst.util_uint64_scale_int_round Gst.util_uint64_scale Gst.util_uint64_scale_round Gst.util_uint64_scale_ceil. \nScale val by the rational number num denom avoiding overflows and underflows and without loss of precision. num must be non negative and denom must be positive. \nParameters \nguint64 such as a Gst.ClockTime to scale. \nnumerator of the scale factor. \ndenominator of the scale factor. \nval num denom. In the case of an overflow this function returns G_MAXUINT64. If the result is not exactly representable as an integer it is rounded up. See also Gst.Util.UtilUint64ScaleInt Gst.Util.UtilUint64ScaleIntRound Gst.Util.UtilUint64Scale Gst.Util.UtilUint64ScaleRound Gst.Util.UtilUint64ScaleCeil. \nScale val by the rational number num denom avoiding overflows and underflows and without loss of precision. num must be non negative and denom must be positive. \nParameters \nguint64 such as a GstClockTime to scale. \nnumerator of the scale factor. \ndenominator of the scale factor. \nval num denom. In the case of an overflow this function returns G_MAXUINT64. If the result is not exactly representable as an integer it is rounded up. See also gst_util_uint64_scale_int gst_util_uint64_scale_int_round gst_util_uint64_scale gst_util_uint64_scale_round gst_util_uint64_scale_ceil. \n"});