fragment_downloaded_cb({"url": "libgstreamer-1.0/gstpad.html#gst_pad_query", "fragment": "gst_pad_query \nGst.Pad.query \nGst.Pad.prototype.query \nDispatches a query to a pad. The query should have been allocated by the caller via one of the type specific allocation functions. The element that the pad belongs to is responsible for filling the query with an appropriate response which should then be parsed with a type specific query parsing function. \nAgain the caller is responsible for both the allocation and deallocation of the query structure. \nPlease also note that some queries might need a running pipeline to work. \nParameters \na GstPad to invoke the default query on. \nthe GstQuery to perform. \nTRUE if the query could be performed. \nDispatches a query to a pad. The query should have been allocated by the caller via one of the type specific allocation functions. The element that the pad belongs to is responsible for filling the query with an appropriate response which should then be parsed with a type specific query parsing function. \nAgain the caller is responsible for both the allocation and deallocation of the query structure. \nPlease also note that some queries might need a running pipeline to work. \nParameters \na Gst.Pad to invoke the default query on. \nthe Gst.Query to perform. \nTrue if the query could be performed. \nDispatches a query to a pad. The query should have been allocated by the caller via one of the type specific allocation functions. The element that the pad belongs to is responsible for filling the query with an appropriate response which should then be parsed with a type specific query parsing function. \nAgain the caller is responsible for both the allocation and deallocation of the query structure. \nPlease also note that some queries might need a running pipeline to work. \nParameters \na Gst.Pad to invoke the default query on. \nthe Gst.Query to perform. \ntrue if the query could be performed. \n"});