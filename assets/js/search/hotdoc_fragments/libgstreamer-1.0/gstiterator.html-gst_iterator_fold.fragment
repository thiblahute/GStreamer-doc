fragment_downloaded_cb({"url": "libgstreamer-1.0/gstiterator.html#gst_iterator_fold", "fragment": "Gst.prototype.fold \nGst.Iterator.fold \nGst.Iterator.Fold \ngst_iterator_fold \nFolds func over the elements of iter. That is to say func will be called as func object ret user_data for each object in it. The normal use of this procedure is to accumulate the results of operating on the objects in ret. \nThis procedure can be used and is used internally to implement the Gst.prototype.foreach and Gst.prototype.find_custom operations. \nThe fold will proceed as long as func returns true. When the iterator has no more arguments Gst.IteratorResult.DONE will be returned. If func returns false the fold will stop and Gst.IteratorResult.OK will be returned. Errors or resyncs will cause fold to return Gst.IteratorResult.ERROR or Gst.IteratorResult.RESYNC as appropriate. \nThe iterator will not be freed. \nParameters \nThe Gst.Iterator to fold over \nthe fold function \nthe seed value passed to the fold function \nuser data passed to the fold function \nA Gst.IteratorResult as described above. \nMT safe. \nFolds func over the elements of iter. That is to say func will be called as func object ret user_data for each object in it. The normal use of this procedure is to accumulate the results of operating on the objects in ret. \nThis procedure can be used and is used internally to implement the Gst.Iterator.foreach and Gst.Iterator.find_custom operations. \nThe fold will proceed as long as func returns True. When the iterator has no more arguments Gst.IteratorResult.DONE will be returned. If func returns False the fold will stop and Gst.IteratorResult.OK will be returned. Errors or resyncs will cause fold to return Gst.IteratorResult.ERROR or Gst.IteratorResult.RESYNC as appropriate. \nThe iterator will not be freed. \nParameters \nThe Gst.Iterator to fold over \nthe fold function \nthe seed value passed to the fold function \nuser data passed to the fold function \nA Gst.IteratorResult as described above. \nMT safe. \nFolds func over the elements of iter. That is to say func will be called as func object ret user_data for each object in it. The normal use of this procedure is to accumulate the results of operating on the objects in ret. \nThis procedure can be used and is used internally to implement the Gst.Iterator.Foreach and Gst.Iterator.FindCustom operations. \nThe fold will proceed as long as func returns true. When the iterator has no more arguments Gst.IteratorResult.Done will be returned. If func returns false the fold will stop and Gst.IteratorResult.Ok will be returned. Errors or resyncs will cause fold to return Gst.IteratorResult.Error or Gst.IteratorResult.Resync as appropriate. \nThe iterator will not be freed. \nParameters \nthe fold function \nthe seed value passed to the fold function \nuser data passed to the fold function \nA Gst.IteratorResult as described above. \nMT safe. \nFolds func over the elements of iter. That is to say func will be called as func object ret user_data for each object in it. The normal use of this procedure is to accumulate the results of operating on the objects in ret. \nThis procedure can be used and is used internally to implement the gst_iterator_foreach and gst_iterator_find_custom operations. \nThe fold will proceed as long as func returns TRUE. When the iterator has no more arguments GST_ITERATOR_DONE will be returned. If func returns FALSE the fold will stop and GST_ITERATOR_OK will be returned. Errors or resyncs will cause fold to return GST_ITERATOR_ERROR or GST_ITERATOR_RESYNC as appropriate. \nThe iterator will not be freed. \nParameters \nThe GstIterator to fold over \nthe fold function \nthe seed value passed to the fold function \nuser data passed to the fold function \nA GstIteratorResult as described above. \nMT safe. \n"});