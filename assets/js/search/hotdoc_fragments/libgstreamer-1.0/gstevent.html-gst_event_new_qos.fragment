fragment_downloaded_cb({"url": "libgstreamer-1.0/gstevent.html#gst_event_new_qos", "fragment": "gst_event_new_qos \nGst.Event.new_qos \nGst.Event \nGst.prototype.new_qos \nAllocate a new qos event with the given values. The QOS event is generated in an element that wants an upstream element to either reduce or increase its rate because of high low CPU load or other resource usage such as network performance or throttling. Typically sinks generate these events for each buffer they receive. \ntype indicates the reason for the QoS event. GST_QOS_TYPE_OVERFLOW is used when a buffer arrived in time or when the sink cannot keep up with the upstream datarate. GST_QOS_TYPE_UNDERFLOW is when the sink is not receiving buffers fast enough and thus has to drop late buffers. GST_QOS_TYPE_THROTTLE is used when the datarate is artificially limited by the application for example to reduce power consumption. \nproportion indicates the real time performance of the streaming in the element that generated the QoS event usually the sink The value is generally computed based on more long term statistics about the streams timestamps compared to the clock. A value indicates that the upstream element is producing data faster than real time. A value indicates that the upstream element is not producing data fast enough. is the ideal proportion value. The proportion value can safely be used to lower or increase the quality of the element. \ndiff is the difference against the clock in running time of the last buffer that caused the element to generate the QOS event. A negative value means that the buffer with timestamp arrived in time. A positive value indicates how late the buffer with timestamp was. When throttling is enabled diff will be set to the requested throttling interval. \ntimestamp is the timestamp of the last buffer that cause the element to generate the QOS event. It is expressed in running time and thus an ever increasing value. \nThe upstream element can use the diff and timestamp values to decide whether to process more buffers. For positive diff all buffers with timestamp timestamp diff will certainly arrive late in the sink as well. A negative diff value so that timestamp diff would yield a result smaller than is not allowed. \nThe application can use general event probes to intercept the QoS event and implement custom application specific QoS handling. \nParameters \nthe QoS type \nthe proportion of the qos message \nThe time difference of the last Clock sync \nThe timestamp of the buffer \na new QOS event. \nAllocate a new qos event with the given values. The QOS event is generated in an element that wants an upstream element to either reduce or increase its rate because of high low CPU load or other resource usage such as network performance or throttling. Typically sinks generate these events for each buffer they receive. \ntype indicates the reason for the QoS event. Gst.QOSType.OVERFLOW is used when a buffer arrived in time or when the sink cannot keep up with the upstream datarate. Gst.QOSType.UNDERFLOW is when the sink is not receiving buffers fast enough and thus has to drop late buffers. Gst.QOSType.THROTTLE is used when the datarate is artificially limited by the application for example to reduce power consumption. \nproportion indicates the real time performance of the streaming in the element that generated the QoS event usually the sink The value is generally computed based on more long term statistics about the streams timestamps compared to the clock. A value indicates that the upstream element is producing data faster than real time. A value indicates that the upstream element is not producing data fast enough. is the ideal proportion value. The proportion value can safely be used to lower or increase the quality of the element. \ndiff is the difference against the clock in running time of the last buffer that caused the element to generate the QOS event. A negative value means that the buffer with timestamp arrived in time. A positive value indicates how late the buffer with timestamp was. When throttling is enabled diff will be set to the requested throttling interval. \ntimestamp is the timestamp of the last buffer that cause the element to generate the QOS event. It is expressed in running time and thus an ever increasing value. \nThe upstream element can use the diff and timestamp values to decide whether to process more buffers. For positive diff all buffers with timestamp timestamp diff will certainly arrive late in the sink as well. A negative diff value so that timestamp diff would yield a result smaller than is not allowed. \nThe application can use general event probes to intercept the QoS event and implement custom application specific QoS handling. \nParameters \nthe QoS type \nthe proportion of the qos message \nThe time difference of the last Clock sync \nThe timestamp of the buffer \na new QOS event. \nAllocate a new qos event with the given values. The QOS event is generated in an element that wants an upstream element to either reduce or increase its rate because of high low CPU load or other resource usage such as network performance or throttling. Typically sinks generate these events for each buffer they receive. \ntype indicates the reason for the QoS event. Gst.QOSType.Overflow is used when a buffer arrived in time or when the sink cannot keep up with the upstream datarate. Gst.QOSType.Underflow is when the sink is not receiving buffers fast enough and thus has to drop late buffers. Gst.QOSType.Throttle is used when the datarate is artificially limited by the application for example to reduce power consumption. \nproportion indicates the real time performance of the streaming in the element that generated the QoS event usually the sink The value is generally computed based on more long term statistics about the streams timestamps compared to the clock. A value indicates that the upstream element is producing data faster than real time. A value indicates that the upstream element is not producing data fast enough. is the ideal proportion value. The proportion value can safely be used to lower or increase the quality of the element. \ndiff is the difference against the clock in running time of the last buffer that caused the element to generate the QOS event. A negative value means that the buffer with timestamp arrived in time. A positive value indicates how late the buffer with timestamp was. When throttling is enabled diff will be set to the requested throttling interval. \ntimestamp is the timestamp of the last buffer that cause the element to generate the QOS event. It is expressed in running time and thus an ever increasing value. \nThe upstream element can use the diff and timestamp values to decide whether to process more buffers. For positive diff all buffers with timestamp timestamp diff will certainly arrive late in the sink as well. A negative diff value so that timestamp diff would yield a result smaller than is not allowed. \nThe application can use general event probes to intercept the QoS event and implement custom application specific QoS handling. \nParameters \nthe QoS type \nthe proportion of the qos message \nThe time difference of the last Clock sync \nThe timestamp of the buffer \na new QOS event. \nAllocate a new qos event with the given values. The QOS event is generated in an element that wants an upstream element to either reduce or increase its rate because of high low CPU load or other resource usage such as network performance or throttling. Typically sinks generate these events for each buffer they receive. \ntype indicates the reason for the QoS event. Gst.QOSType.OVERFLOW is used when a buffer arrived in time or when the sink cannot keep up with the upstream datarate. Gst.QOSType.UNDERFLOW is when the sink is not receiving buffers fast enough and thus has to drop late buffers. Gst.QOSType.THROTTLE is used when the datarate is artificially limited by the application for example to reduce power consumption. \nproportion indicates the real time performance of the streaming in the element that generated the QoS event usually the sink The value is generally computed based on more long term statistics about the streams timestamps compared to the clock. A value indicates that the upstream element is producing data faster than real time. A value indicates that the upstream element is not producing data fast enough. is the ideal proportion value. The proportion value can safely be used to lower or increase the quality of the element. \ndiff is the difference against the clock in running time of the last buffer that caused the element to generate the QOS event. A negative value means that the buffer with timestamp arrived in time. A positive value indicates how late the buffer with timestamp was. When throttling is enabled diff will be set to the requested throttling interval. \ntimestamp is the timestamp of the last buffer that cause the element to generate the QOS event. It is expressed in running time and thus an ever increasing value. \nThe upstream element can use the diff and timestamp values to decide whether to process more buffers. For positive diff all buffers with timestamp timestamp diff will certainly arrive late in the sink as well. A negative diff value so that timestamp diff would yield a result smaller than is not allowed. \nThe application can use general event probes to intercept the QoS event and implement custom application specific QoS handling. \nParameters \nthe QoS type \nthe proportion of the qos message \nThe time difference of the last Clock sync \nThe timestamp of the buffer \na new QOS event. \n"});