fragment_downloaded_cb({"url": "libgstreamer-1.0/gstpad.html#gst_pad_send_event", "fragment": "gst_pad_send_event \nGst.Pad.send_event \nGst.Pad.prototype.send_event \nSends the event to the pad. This function can be used by applications to send events in the pipeline. \nIf pad is a source pad event should be an upstream event. If pad is a sink pad event should be a downstream event. For example you would not send a GST_EVENT_EOS on a src pad EOS events only propagate downstream. Furthermore some downstream events have to be serialized with data flow like EOS while some can travel out of band like GST_EVENT_FLUSH_START. If the event needs to be serialized with data flow this function will take the pad s stream lock while calling its event function. \nTo find out whether an event type is upstream downstream or downstream and serialized see GstEventTypeFlags gst_event_type_get_flags GST_EVENT_IS_UPSTREAM GST_EVENT_IS_DOWNSTREAM and GST_EVENT_IS_SERIALIZED. Note that in practice that an application or plugin doesn t need to bother itself with this information the core handles all necessary locks and checks. \nThis function takes ownership of the provided event so you should gst_event_ref it if you want to reuse the event after this call. \nParameters \na GstPad to send the event to. \nthe GstEvent to send to the pad. \nTRUE if the event was handled. \nSends the event to the pad. This function can be used by applications to send events in the pipeline. \nIf pad is a source pad event should be an upstream event. If pad is a sink pad event should be a downstream event. For example you would not send a Gst.EventType.EOS on a src pad EOS events only propagate downstream. Furthermore some downstream events have to be serialized with data flow like EOS while some can travel out of band like Gst.EventType.FLUSH_START. If the event needs to be serialized with data flow this function will take the pad s stream lock while calling its event function. \nTo find out whether an event type is upstream downstream or downstream and serialized see Gst.EventTypeFlags Gst.event_type_get_flags GST_EVENT_IS_UPSTREAM not introspectable GST_EVENT_IS_DOWNSTREAM not introspectable and GST_EVENT_IS_SERIALIZED not introspectable Note that in practice that an application or plugin doesn t need to bother itself with this information the core handles all necessary locks and checks. \nThis function takes ownership of the provided event so you should gst_event_ref not introspectable it if you want to reuse the event after this call. \nParameters \na Gst.Pad to send the event to. \nthe Gst.Event to send to the pad. \nTrue if the event was handled. \nSends the event to the pad. This function can be used by applications to send events in the pipeline. \nIf pad is a source pad event should be an upstream event. If pad is a sink pad event should be a downstream event. For example you would not send a Gst.EventType.EOS on a src pad EOS events only propagate downstream. Furthermore some downstream events have to be serialized with data flow like EOS while some can travel out of band like Gst.EventType.FLUSH_START. If the event needs to be serialized with data flow this function will take the pad s stream lock while calling its event function. \nTo find out whether an event type is upstream downstream or downstream and serialized see Gst.EventTypeFlags Gst.prototype.event_type_get_flags GST_EVENT_IS_UPSTREAM not introspectable GST_EVENT_IS_DOWNSTREAM not introspectable and GST_EVENT_IS_SERIALIZED not introspectable Note that in practice that an application or plugin doesn t need to bother itself with this information the core handles all necessary locks and checks. \nThis function takes ownership of the provided event so you should gst_event_ref not introspectable it if you want to reuse the event after this call. \nParameters \na Gst.Pad to send the event to. \nthe Gst.Event to send to the pad. \ntrue if the event was handled. \n"});