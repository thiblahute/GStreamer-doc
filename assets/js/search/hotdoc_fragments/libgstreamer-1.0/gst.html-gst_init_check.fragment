fragment_downloaded_cb({"url": "libgstreamer-1.0/gst.html#gst_init_check", "fragment": "prototype.init_check \ngst_init_check \nGst.Global.InitCheck \nGst.init_check \nInitializes the GStreamer library setting up internal path lists registering built in elements and loading standard plugins. \nThis function will return false if GStreamer could not be initialized for some reason. If you want your program to fail fatally use prototype.init instead. \nParameters \npointer to application s argc \npointer to application s argv \nReturns a tuple made of \ntrue if GStreamer could be initialized. \ntrue if GStreamer could be initialized. \ntrue if GStreamer could be initialized. \nInitializes the GStreamer library setting up internal path lists registering built in elements and loading standard plugins. \nThis function will return FALSE if GStreamer could not be initialized for some reason. If you want your program to fail fatally use gst_init instead. \nParameters \npointer to application s argc \npointer to application s argv \nTRUE if GStreamer could be initialized. \nInitializes the GStreamer library setting up internal path lists registering built in elements and loading standard plugins. \nThis function will return false if GStreamer could not be initialized for some reason. If you want your program to fail fatally use Gst.Global.Init instead. \nParameters \npointer to application s argc \npointer to application s argv \ntrue if GStreamer could be initialized. \nInitializes the GStreamer library setting up internal path lists registering built in elements and loading standard plugins. \nThis function will return False if GStreamer could not be initialized for some reason. If you want your program to fail fatally use Gst.init instead. \nParameters \npointer to application s argc \npointer to application s argv \nReturns a tuple made of \nTrue if GStreamer could be initialized. \nTrue if GStreamer could be initialized. \nTrue if GStreamer could be initialized. \n"});