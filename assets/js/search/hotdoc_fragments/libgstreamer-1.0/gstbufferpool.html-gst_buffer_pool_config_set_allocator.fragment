fragment_downloaded_cb({"url": "libgstreamer-1.0/gstbufferpool.html#gst_buffer_pool_config_set_allocator", "fragment": "gst_buffer_pool_config_set_allocator \nGst.BufferPool.config_set_allocator \nGst.BufferPool.ConfigSetAllocator \nGst.prototype.config_set_allocator \nSet the allocator and params on config. \nOne of allocator and params can be NULL but not both. When allocator is NULL the default allocator of the pool will use the values in param to perform its allocation. When param is NULL the pool will use the provided allocator with its default GstAllocationParams. \nA call to gst_buffer_pool_set_config can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use gst_buffer_pool_get_config to get the currently used values. \nParameters \na GstBufferPool configuration \na GstAllocator \nGstAllocationParams \nSet the allocator and params on config. \nOne of allocator and params can be None but not both. When allocator is None the default allocator of the pool will use the values in param to perform its allocation. When param is None the pool will use the provided allocator with its default Gst.AllocationParams. \nA call to Gst.BufferPool.set_config can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use Gst.BufferPool.get_config to get the currently used values. \nParameters \na Gst.BufferPool configuration \na Gst.Allocator \nGst.AllocationParams \nSet the allocator and params on config. \nOne of allocator and params can be null but not both. When allocator is null the default allocator of the pool will use the values in param to perform its allocation. When param is null the pool will use the provided allocator with its default Gst.AllocationParams. \nA call to Gst.BufferPool.SetConfig can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use Gst.BufferPool.GetConfig to get the currently used values. \nParameters \na Gst.BufferPool configuration \na Gst.Allocator \nGst.AllocationParams \nSet the allocator and params on config. \nOne of allocator and params can be null but not both. When allocator is null the default allocator of the pool will use the values in param to perform its allocation. When param is null the pool will use the provided allocator with its default Gst.AllocationParams. \nA call to Gst.prototype.set_config can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use Gst.prototype.get_config to get the currently used values. \nParameters \na Gst.BufferPool configuration \na Gst.Allocator \nGst.AllocationParams \n"});