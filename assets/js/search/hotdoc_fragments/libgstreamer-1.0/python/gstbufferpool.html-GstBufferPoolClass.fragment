fragment_downloaded_cb({"url": "libgstreamer-1.0/python/gstbufferpool.html#GstBufferPoolClass", "fragment": "GstBufferPoolClass.get_options \nget a list of options supported by this pool \nGstBufferPoolClass.set_config \napply the bufferpool configuration. The default configuration will parse the default config parameters \nGstBufferPoolClass.alloc_buffer \nallocate a buffer. the default implementation allocates buffers from the configured memory allocator and with the configured parameters. All metadata that is present on the allocated buffer will be marked as Gst.MetaFlags.pooled and Gst.MetaFlags.locked and will not be removed from the buffer in reset_buffer. The buffer should have the GST_BUFFER_FLAG_TAG_MEMORY cleared. \nGstBufferPoolClass.reset_buffer \nreset the buffer to its state when it was freshly allocated. The default implementation will clear the flags timestamps and will remove the metadata without the Gst.MetaFlags.pooled flag even the metadata with Gst.MetaFlags.locked If the Gst.BufferFlags.tag_memory was set this function can also try to restore the memory and clear the Gst.BufferFlags.tag_memory again. \nGstBufferPoolClass.release_buffer \nrelease a buffer back in the pool. The default implementation will put the buffer back in the queue and notify any blocking acquire_buffer calls when the Gst.BufferFlags.tag_memory is not set on the buffer. If Gst.BufferFlags.tag_memory is set the buffer will be freed with free_buffer. \nGstBufferPoolClass.free_buffer \nfree a buffer. The default implementation unrefs the buffer. \nGstBufferPoolClass.flush_start \nenter the flushing state. Since \nGstBufferPoolClass.flush_stop \nleave the flushign state. Since \n"});