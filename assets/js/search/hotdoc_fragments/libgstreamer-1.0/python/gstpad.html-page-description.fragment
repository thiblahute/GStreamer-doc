fragment_downloaded_cb({"url": "libgstreamer-1.0/python/gstpad.html#page-description", "fragment": "The Gst.Pad structure. Use the functions to update the variables. \nCreates a new pad with the given name from the given static template. If name is None a guaranteed unique name across all pads will be assigned. This function makes a copy of the name so you can safely free the name. \nIterate the list of pads to which the given pad is linked to inside of the parent element. This is the default handler and thus returns an iterator of all of the pads inside the parent element with opposite direction. \nThe caller must free this iterator after use with Gst.Iterator.free. \nLinks src to sink creating any Gst.GhostPad s in between as necessary. \nThis is a convenience function to save having to create and add intermediate Gst.GhostPad s as required for linking across Gst.Bin boundaries. \nIf src or sink pads don t have parent elements or do not share a common ancestor the link will fail. \nCalling Gst.Pad.link_maybe_ghosting_full with flags Gst.PadLinkCheck.default is the recommended way of linking pads with safety checks applied. \nSets the given activate function for pad. The activate function will dispatch to Gst.Pad.activate_mode to perform the actual activation. Only makes sense to set on sink pads. \nCall this function if your sink pad can start a pull based task. \nSets the given activate_mode function for the pad. An activate_mode function prepares the element for data passing. \nSets the given chain list function for the pad. The chainlist function is called to process a Gst.BufferList input buffer list. See Gst.PadChainListFunction for more details. \nSets the given event handler for the pad. \nSets the given getrange function for the pad. The getrange function is called to produce a new Gst.Buffer to start the processing pipeline. see Gst.PadGetRangeFunction for a description of the getrange function. \nSets the given internal link iterator function for the pad. \nSets the given unlink function for the pad. It will be called when the pad is unlinked. \nCheck if the pads are compatible by using their template caps. This is much faster than GST_PAD_LINK_CHECK_CAPS but would be unsafe e.g. if one pad has GST_CAPS_ANY not introspectable \nGst.PadLinkCheck.caps \nDisables pushing a reconfigure event when pads are linked. \nGst.PadLinkCheck.default \nprobe buffer lists \nGst.PadProbeType.event_downstream \nprobe downstream events \nGst.PadProbeType.event_upstream \nprobe upstream events \nGst.PadProbeType.event_flush \nprobe flush events. This probe has to be explicitly enabled and is not included in the GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM or GST_PAD_PROBE_TYPE_EVENT_UPSTREAM probe types. \nGst.PadProbeType.query_downstream \nprobe downstream queries \nGst.PadProbeType.query_upstream \nprobe upstream queries \nGst.PadProbeType.push \nprobe downstream data buffers buffer lists and events \nGst.PadProbeType.data_upstream \nprobe upstream data events \nGst.PadProbeType.data_both \nprobe and block downstream data buffers buffer lists and events \nGst.PadProbeType.block_upstream \nprobe and block upstream data events \nGst.PadProbeType.event_both \nCallback used by Gst.Pad.sticky_events_foreach. \nWhen this function returns True the next event will be returned. When False is returned Gst.Pad.sticky_events_foreach will return. \nWhen event is set to None the item will be removed from the list of sticky events. event can be replaced by assigning a new reference to it. This function is responsible for unreffing the old event when removing or modifying. \n"});