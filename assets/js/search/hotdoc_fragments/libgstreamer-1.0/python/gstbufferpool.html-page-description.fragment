fragment_downloaded_cb({"url": "libgstreamer-1.0/python/gstbufferpool.html#page-description", "fragment": "The structure of a Gst.BufferPool. Use the associated macros to access the public variables. \nEnabled the option in config. This will instruct the bufferpool to enable the specified option on the buffers that it allocates. \nThe supported options by pool can be retrieved with Gst.BufferPool.get_options. \nGet the allocator and params from config. \nParse an available config and get the option at index of the options API array. \nGet the configuration values from config. \nCheck if config contains option. \nSet the allocator and params on config. \nOne of allocator and params can be None but not both. When allocator is None the default allocator of the pool will use the values in param to perform its allocation. When param is None the pool will use the provided allocator with its default Gst.AllocationParams. \nA call to Gst.BufferPool.set_config can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use Gst.BufferPool.get_config to get the currently used values. \nConfigure config with the given parameters. \nValidate that changes made to config are still valid in the context of the expected parameters. This function is a helper that can be used to validate changes made by a pool to a config when Gst.BufferPool.set_config returns False. This expects that caps haven t changed and that min_buffers aren t lower then what we initially expected. This does not check if options or allocator parameters are still valid won t check if size have changed since changing the size is valid to adapt padding. \ngpointer _gst_reserved \ngint64 start \nthe start position \ngint64 stop \nthe stop position \nGstBufferPoolAcquireFlags flags \nadditional flags \ngpointer _gst_reserved \nAdditional flags to control the allocation of a buffer \nno flags \nGst.BufferPoolAcquireFlags.key_unit \nbuffer is keyframe \nGst.BufferPoolAcquireFlags.dontwait \nwhen the bufferpool is empty acquire_buffer will by default block until a buffer is released into the pool again. Setting this flag makes acquire_buffer return Gst.FlowReturn.eos instead of blocking. \nGst.BufferPoolAcquireFlags.discont \nbuffer is discont \nGst.BufferPoolAcquireFlags.last \nlast flag subclasses can use private flags starting from this value. \n"});