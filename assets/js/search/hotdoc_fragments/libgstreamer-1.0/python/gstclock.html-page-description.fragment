fragment_downloaded_cb({"url": "libgstreamer-1.0/python/gstclock.html#page-description", "fragment": "Gst.Clock base structure. The values of this structure are protected for subclasses use the methods to use the Gst.Clock. \nAdd a clock observation to the internal slaving algorithm the same as Gst.Clock.add_observation and return the result of the master clock estimation without updating the internal calibration. \nThe caller can then take the results and call Gst.Clock.set_calibration with the values or some modified version of them. \nConverts the given internal_target clock time to the external time using the passed calibration parameters. This function performs the same calculation as Gst.Clock.adjust_unlocked when called using the current calibration parameters but doesn t ensure a monotonically increasing result as Gst.Clock.adjust_unlocked does. \nNote The clock parameter is unused and can be NULL \nConverts the given external_target clock time to the internal time using the passed calibration parameters. This function performs the same calculation as Gst.Clock.unadjust_unlocked when called using the current calibration parameters. \nNote The clock parameter is unused and can be NULL \nclock can do a single sync timeout request \nGst.ClockFlags.can_do_single_async \nclock can do a single async timeout request \nGst.ClockFlags.can_do_periodic_sync \nclock can do sync periodic timeout requests \nGst.ClockFlags.can_do_periodic_async \nclock can do async periodic timeout callbacks \nGst.ClockFlags.can_set_resolution \nclock s resolution can be changed \nGst.ClockFlags.can_set_master \nclock needs to be synced before it can be used Since \nGst.ClockFlags.last \n"});