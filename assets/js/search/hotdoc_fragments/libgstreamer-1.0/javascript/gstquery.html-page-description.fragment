fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstquery.html#page-description", "fragment": "Constructs a new query object for querying if caps are accepted. \nFree function gst_query_unref not introspectable \nConstructs a new query object for querying the allocation properties. \nFree function gst_query_unref not introspectable \nConstructs a new query object for querying the buffering status of a stream. \nFree function gst_query_unref not introspectable \nConstructs a new query object for querying the scheduling properties. \nFree function gst_query_unref not introspectable \nAdd api with params as one of the supported metadata API to query. \nAdd allocator and its params as a supported memory allocator. \nSet the pool parameters in query. \nSet the buffering ranges array field in query. The current last start position of the array should be inferior to start. \nAdd mode as one of the supported scheduling modes to query. \nCheck if query has metadata api set. When this function returns true index will contain the index where the requested API and the parameters can be found. \nRetrieve the number of values currently stored in the meta API array of the query s structure. \nRetrieve the number of values currently stored in the allocator params array of the query s structure. \nIf no memory allocator is specified the downstream element can handle the default memory allocator. The first memory allocator in the query should be generic and allow mapping to system memory all following allocators should be ordered by preference with the preferred one first. \nRetrieve the number of values currently stored in the pool array of the query s structure. \nRetrieve the number of values currently stored in the buffered ranges array of the query s structure. \nRetrieve the number of values currently stored in the scheduling mode array of the query s structure. \nGet the structure of a query. \nCheck if query has scheduling mode set. \nWhen checking if upstream supports pull mode it is usually not enough to just check for GST_PAD_MODE_PULL with this function you also want to check whether the scheduling flags returned by Gst.Query.prototype.parse_scheduling have the seeking flag set meaning random access is supported not only sequential pulls \nCheck if query has scheduling mode set and flags is set in query scheduling flags. \nGet the caps from query. The caps remains valid as long as query remains valid. \nParse the result from query and store in result. \nParse an allocation query writing the requested caps in caps and whether a pool is needed in need_pool if the respective parameters are non NULL. \nPool details can be retrieved using Gst.Query.prototype.get_n_allocation_pools and Gst.Query.prototype.parse_nth_allocation_pool. \nGet the percentage of buffered data. This is a value between and The busy indicator is true when the buffering is in progress. \nParse an available query writing the format into format and other results into the passed parameters if the respective parameters are non NULL \nExtracts the buffering stats values from query. \nGet the caps result from query. The caps remains valid as long as query remains valid. \nGet the context from the context query. The context remains valid as long as query remains valid. \nParse a context type from an existing GST_QUERY_CONTEXT query. \nParse a convert query answer. Any of src_format src_value dest_format and dest_value may be null in which case that value is omitted. \nParse a duration query answer. Write the format of the duration into format and the value into duration if the respective variables are non NULL. \nParse a latency query answer. \nParse the number of formats in the formats query. \nParse an available query and get the metadata API at index of the metadata API array. \nParse an available query and get the allocator and its params at index of the allocator array. \nGet the pool parameters in query. \nUnref pool with Gst.Object.prototype.unref when it s not needed any more. \nParse an available query and get the start and stop values stored at the index of the buffered ranges array. \nParse the format query and retrieve the nth format from it into format. If the list contains less elements than nth format will be set to GST_FORMAT_UNDEFINED. \nParse an available query and get the scheduling mode at index of the scheduling modes array. \nParse a position query writing the format into format and the position into cur if the respective parameters are non NULL. \nSet the scheduling properties. \nParse a seeking query writing the format into format and other results into the passed parameters if the respective parameters are non NULL \nParse a segment query answer. Any of rate format start_value and stop_value may be null which will cause this value to be omitted. \nSee Gst.Query.prototype.set_segment for an explanation of the function arguments. \nParse an URI query writing the URI into uri as a newly allocated string if the respective parameters are non NULL. Free the string with GLib.prototype.free after usage. \nParse an URI query and set permanent to true if there is a redirection and it should be considered permanent. If a redirection is permanent applications should update their internal storage of the URI otherwise they should make all future requests to the original URI. \nRemove the metadata API at index of the metadata API array. \nRemove the allocation param at index of the allocation param array. \nRemove the allocation pool at index of the allocation pool array. \nSet result as the result for the query. \nSet the percentage of buffered data. This is a value between and The busy indicator is true when the buffering is in progress. \nSet the available query result fields in query. \nConfigures the buffering stats values in query. \nSet the caps result in query. \nParse an available query and get the allocator and its params at index of the allocator array. \nSet the pool parameters in query. \nSet the scheduling properties. \nAnswer a URI query by setting the requested URI redirection. \nAnswer a URI query by setting the requested URI redirection to permanent or not. \nGet the structure of a query. This method should be called with a writable query so that the returned structure is guaranteed to be writable. \nGets the Gst.QueryTypeFlags associated with type. \nGet a printable name for the given query type. Do not modify or free. \nGet the unique quark for the given query type. \nif sequential access is recommended \nGst.SchedulingFlags.prototype.bandwidth_limited \nif bandwidth is limited and buffering possible since \n"});