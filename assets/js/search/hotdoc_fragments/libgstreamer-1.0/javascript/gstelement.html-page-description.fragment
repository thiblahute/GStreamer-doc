fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstelement.html#page-description", "fragment": "GStreamer element abstract base class. \nCreates an element for handling the given URI. \nGets a string representing the given state change result. \nGets a string representing the given state. \nAbort the state change of the element. This function is used by elements that do asynchronous state changes and find out something is wrong. \nThis function should be called with the STATE_LOCK held. \nMT safe. \nPerform transition on element. \nThis function must be called with STATE_LOCK held and is mainly used internally. \nCommit the state change of the element and proceed to the next pending state if any. This function is used by elements that do asynchronous state changes. The core will normally call this method automatically when an element returned Gst.StateChangeReturn.prototype.success from the state change function. \nIf after calling this method the element still has not reached the pending state the next state change is performed. \nThis method is used internally and should normally not be called by plugins or applications. \nCreates a pad for each pad template that is always available. This function is only useful during object initialization of subclasses of Gst.Element. \nReturns the base time of the element. The base time is the absolute time of the clock when this element was last put to PLAYING. Subtracting the base time from the clock time gives the running time of the element. \nLooks for an unlinked pad to which the given pad can link. It is not guaranteed that linking the pads will work though it should work in most cases. \nThis function will first attempt to find a compatible unlinked ALWAYS pad and if none can be found it will request a compatible REQUEST pad by looking at the templates of element. \nRetrieves a pad template from element that is compatible with compattempl. Pads from compatible templates can be linked together. \nGets the context with context_type set on the element or NULL. \nMT safe. \nGets the context with context_type set on the element or NULL. \nGets the contexts set on the element. \nMT safe. \nRetrieves the factory that was used to create this element. \nRetrieves a pad from the element by name e.g. src_ d This version only retrieves request pads. The pad should be released with Gst.Element.prototype.release_request_pad. \nThis method is slower than manually getting the pad template and calling Gst.Element.prototype.request_pad if the pads should have a specific name e.g. name is src_1 instead of src_ u \nReturns the start time of the element. The start time is the running time of the clock when this element was last put to PAUSED. \nUsually the start_time is managed by a toplevel element such as Gst.Pipeline. \nMT safe. \nRetrieves a pad from element by name. This version only retrieves already existing i.e. static pads. \nChecks if the state of an element is locked. If the state of an element is locked state changes of the parent don t affect the element. This way you can leave currently unused elements inside bins. Just lock their state before changing the state from Gst.State.prototype.null. \nMT safe. \nRetrieves an iterator of element s pads. The iterator should be freed after usage. Also more specialized iterators exists such as Gst.Element.prototype.iterate_src_pads or Gst.Element.prototype.iterate_sink_pads. \nThe order of pads returned by the iterator will be the order in which the pads were added to the element. \nRetrieves an iterator of element s sink pads. \nThe order of pads returned by the iterator will be the order in which the pads were added to the element. \nRetrieves an iterator of element s source pads. \nThe order of pads returned by the iterator will be the order in which the pads were added to the element. \nLinks src to dest using the given caps as filtercaps. The link must be from source to destination the other direction will not be tried. The function looks for existing pads that aren t linked yet. It will request new pads if necessary. If multiple links are possible only one is established. \nMake sure you have added your elements to a bin or pipeline with Gst.Bin.prototype.add before trying to link them. \nLinks the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent it becomes a child of the parent of the other element. If they have different parents the link fails. If caps is not null makes sure that the caps of the link is a subset of caps. \nLinks the two named pads of the source and destination elements. Side effect is that if one of the pads has no parent it becomes a child of the parent of the other element. If they have different parents the link fails. \nCalling Gst.Element.prototype.link_pads_full with flags Gst.PadLinkCheck.prototype.default is the same as calling Gst.Element.prototype.link_pads and the recommended way of linking pads with safety checks applied. \nThis is a convenience function for Gst.Pad.prototype.link_full. \nPost an error warning or info message on the bus from inside an element. \ntype must be of Gst.MessageType.prototype.error Gst.MessageType.prototype.warning or Gst.MessageType.prototype.info. \nMT safe. \nPost an error warning or info message on the bus from inside an element. \ntype must be of Gst.MessageType.prototype.error Gst.MessageType.prototype.warning or Gst.MessageType.prototype.info. \nUse this function to signal that the element does not expect any more pads to show up in the current pipeline. This function should be called whenever pads have been added by the element itself. Elements with Gst.PadPresence.prototype.sometimes pad templates use this in combination with autopluggers to figure out that the element is done initializing its pads. \nThis function emits the no more pads signal. \nMT safe. \nPost a message on the element s Gst.Bus. This function takes ownership of the message if you want to access the message after this call you should add an additional reference before calling. \nGet the clock provided by the given element. \nAn element is only required to provide a clock in the PAUSED state. Some elements can provide a clock in other states. \nQueries an element to convert src_val in src_format to dest_format. \nQueries an element usually top level pipeline or playbin element for the total stream duration in nanoseconds. This query will only work once the pipeline is prerolled i.e. reached PAUSED or PLAYING state The application will receive an ASYNC_DONE message on the pipeline bus when that is the case. \nIf the duration changes for some reason you will get a DURATION_CHANGED message on the pipeline bus in which case you should re query the duration using this function. \nQueries an element usually top level pipeline or playbin element for the stream position in nanoseconds. This will be a value between and the stream duration if the stream duration is known This query will usually only work once the pipeline is prerolled i.e. reached PAUSED or PLAYING state The application will receive an ASYNC_DONE message on the pipeline bus when that is the case. \nIf one repeatedly calls this function one can also create a query and reuse it in Gst.Element.prototype.query. \nMakes the element free the previously requested pad as obtained with Gst.Element.prototype.request_pad. \nThis does not unref the pad. If the pad was created by using Gst.Element.prototype.request_pad Gst.Element.prototype.release_request_pad needs to be followed by Gst.Object.prototype.unref to free the pad. \nMT safe. \nRetrieves a request pad from the element according to the provided template. Pad templates can be looked up using Gst.ElementFactory.prototype.get_static_pad_templates. \nThe pad should be released with Gst.Element.prototype.release_request_pad. \nSimple API to perform a seek on the given element meaning it just seeks to the given position relative to the start of the stream. For more complex operations like segment seeks e.g. for looping or changing the playback rate or seeking relative to the last configured playback segment you should use Gst.Element.prototype.seek. \nIn a completely prerolled PAUSED or PLAYING pipeline seeking is always guaranteed to return true on a seekable media type or false when the media type is certainly not seekable such as a live stream \nSome elements allow for seeking in the READY state in this case they will store the seek event and execute it when they are put to PAUSED. If the element supports seek in READY it will always return true when it receives the event in the READY state. \nSet the base time of an element. See Gst.Element.prototype.get_base_time. \nMT safe. \nSets the context of the element. Increases the refcount of the context. \nMT safe. \nLocks the state of an element so state changes of the parent don t affect this element anymore. \nMT safe. \nSet the start time of an element. The start time of the element is the running time of the element when it last went to the PAUSED state. In READY or after a flushing seek it is set to \nToplevel elements like Gst.Pipeline will manage the start_time and base_time on its children. Setting the start_time to Gst.CLOCK_TIME_NONE on such a toplevel element will disable the distribution of the base_time to the children and can be useful if the application manages the base_time itself for example if you want to synchronize capture from multiple pipelines and you can also ensure that the pipelines have the same clock. \nMT safe. \nTries to change the state of the element to the same as its parent. If this function returns false the state of element is undefined. \nUnlinks the two named pads of the source and destination elements. \nThis is a convenience function for Gst.Pad.prototype.unlink. \nGList padtemplates \na GList of GstPadTemplate \nguint32 pad_templ_cookie \nchanged whenever the padtemplates change \ngpointer _gst_reserved \nSet key with value as metadata in klass. \nAdds a padtemplate to an element class. This is mainly used in the _class_init functions of classes. If a pad template with the same name as an already existing one is added the old one is replaced by the new one. \nSet key with value as metadata in klass. \nSame as Gst.ElementClass.prototype.add_metadata but value must be a static string or an inlined string as it will not be copied. GStreamer plugins will be made resident once loaded so this function can be used even from dynamically loaded plugins. \nAdds a pad template to an element class based on the static pad template templ. This is mainly used in the _class_init functions of element implementations. If a pad template with the same name already exists the old one is replaced by the new one. \nGet metadata with key in klass. \nRetrieves a padtemplate from element_class with the given name. \nIf you use this function in the GObject.InstanceInitFunc of an object class that has subclasses make sure to pass the g_class parameter of the GObject.InstanceInitFunc here. \nRetrieves a list of the pad templates associated with element_class. The list must not be modified by the calling code. \nIf you use this function in the GObject.InstanceInitFunc of an object class that has subclasses make sure to pass the g_class parameter of the GObject.InstanceInitFunc here. \nSets the detailed information for a Gst.ElementClass. \nThis function is for use in _class_init functions only. \nSets the detailed information for a Gst.ElementClass. \nThis function is for use in _class_init functions only. \nSame as Gst.ElementClass.prototype.set_metadata but longname classification description and author must be static strings or inlined strings as they will not be copied. GStreamer plugins will be made resident once loaded so this function can be used even from dynamically loaded plugins. \nthe element can provide a clock \nGst.ElementFlags.prototype.require_clock \nthe element requires a clock \nGst.ElementFlags.prototype.indexable \n"});