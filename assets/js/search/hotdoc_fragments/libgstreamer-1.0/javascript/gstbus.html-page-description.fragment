fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstbus.html#page-description", "fragment": "The opaque Gst.Bus data structure. \nAdds a bus signal watch to the default main context with the default priority G_PRIORITY_DEFAULT It is also possible to use a non default main context set up using GLib.MainContext.prototype.push_thread_default before one had to create a bus watch source and attach it to the desired main context manually \nAfter calling this statement the bus will emit the message signal for each message posted on the bus. \nThis function may be called multiple times. To clean up the caller is responsible for calling Gst.Bus.prototype.remove_signal_watch as many times as this function is called. \nMT safe. \nAdds a bus signal watch to the default main context with the given priority e.g. GLib.PRIORITY_DEFAULT It is also possible to use a non default main context set up using GLib.MainContext.prototype.push_thread_default before one had to create a bus watch source and attach it to the desired main context manually \nAfter calling this statement the bus will emit the message signal for each message posted on the bus when the main loop is running. \nThis function may be called multiple times. To clean up the caller is responsible for calling Gst.Bus.prototype.remove_signal_watch as many times as this function is called. \nThere can only be a single bus watch per bus you must remove any signal watch before you can set another type of watch. \nMT safe. \nA helper Gst.BusFunc that can be used to convert all asynchronous messages into signals. \nInstructs GStreamer to stop emitting the sync message signal for this bus. See Gst.Bus.prototype.enable_sync_message_emission for more information. \nIn the event that multiple pieces of code have called Gst.Bus.prototype.enable_sync_message_emission the sync message emissions will only be stopped after all calls to Gst.Bus.prototype.enable_sync_message_emission were cancelled by calling this function. In this way the semantics are exactly the same as Gst.Object.prototype.ref that which calls enable should also call disable. \nMT safe. \nInstructs GStreamer to emit the sync message signal after running the bus s sync handler. This function is here so that code can ensure that they can synchronously receive messages without having to affect what the bin s sync handler is. \nThis function may be called multiple times. To clean up the caller is responsible for calling Gst.Bus.prototype.disable_sync_message_emission as many times as this function is called. \nWhile this function looks similar to Gst.Bus.prototype.add_signal_watch it is not exactly the same this function enables synchronous emission of signals when messages arrive Gst.Bus.prototype.add_signal_watch adds an idle callback to pop messages off the bus asynchronously. The sync message signal comes from the thread of whatever object posted the message the message signal is marshalled to the main thread via the main loop. \nMT safe. \nRemoves a signal watch previously added with Gst.Bus.prototype.add_signal_watch. \nMT safe. \nSets the synchronous handler on the bus. The function will be called every time a new message is posted on the bus. Note that the function will be called in the same thread context as the posting object. This function is usually only called by the creator of the bus. Applications should handle messages asynchronously using the gst_bus watch and poll functions. \nYou cannot replace an existing sync_handler. You can pass null to this function which will clear the existing handler. \nA helper GstBusSyncHandler that can be used to convert all synchronous messages into signals. \nGet a message from the bus whose type matches the message type mask types waiting up to the specified timeout and discarding any messages that do not match the mask provided \nIf timeout is this function behaves like Gst.Bus.prototype.pop_filtered. If timeout is Gst.CLOCK_TIME_NONE this function will block forever until a matching message was posted on the bus. \n"});