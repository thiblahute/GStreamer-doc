fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstmessage.html#page-description", "fragment": "Create a new application typed message. GStreamer will never create these messages they are a gift from us to you. Enjoy. \nThe message is posted when elements completed an ASYNC state change. running_time contains the time of the desired running_time when this elements goes to PLAYING. A value of Gst.CLOCK_TIME_NONE for running_time means that the element has no clock interaction and thus doesn t care about the running_time of the pipeline. \nThis message is posted by elements when they start an ASYNC state change. \nCreate a new buffering message. This message can be posted by an element that needs to buffer data before it can continue processing. percent should be a value between and A value of means that the buffering completed. \nWhen percent is the application should PAUSE a PLAYING pipeline. When percent is the application can set the pipeline back to PLAYING. The application must be prepared to receive BUFFERING messages in the PREROLLING state and may only set the pipeline to PLAYING after receiving a message with percent set to which can happen after the pipeline completed prerolling. \nMT safe. \nCreate a clock lost message. This message is posted whenever the clock is not valid anymore. \nIf this message is posted by the pipeline the pipeline will select a new clock again when it goes to PLAYING. It might therefore be needed to set the pipeline to PAUSED and PLAYING again. \nCreate a clock provide message. This message is posted whenever an element is ready to provide a clock or lost its ability to provide a clock maybe because it paused or became EOS \nThis message is mainly used internally to manage the clock selection. \nCreates a new device added message. The device added message is produced by Gst.DeviceProvider or a Gst.DeviceMonitor. They announce the appearance of monitored devices. \nCreates a new device removed message. The device removed message is produced by Gst.DeviceProvider or a Gst.DeviceMonitor. They announce the disappearance of monitored devices. \nCreate a new duration changed message. This message is posted by elements that know the duration of a stream when the duration changes. This message is received by bins and is used to calculate the total duration of a pipeline. \nCreate a new element specific message. This is meant as a generic way of allowing one way communication from an element to an application for example the firewire cable was unplugged The format of the message should be documented in the element s documentation. The structure field can be null. \nCreate a new error message. The message will copy error and debug. This message is posted by element when a fatal event occurred. The pipeline will probably partially stop. The application receiving this message should stop the pipeline. \nThis message is posted when an element has a new local Gst.Context. \nCreate a new info message. The message will make copies of error and debug. \nThis message can be posted by elements when their latency requirements have changed. \nThis message is posted when an element needs a specific Gst.Context. \nCreate a new clock message. This message is posted whenever the pipeline selects a new clock for the pipeline. \nProgress messages are posted by elements when they use an asynchronous task to perform actions triggered by a state change. \ncode contains a well defined string describing the action. text should contain a user visible string detailing the current action. \nCreates a new redirect message and adds a new entry to it. Redirect messages are posted when an element detects that the actual data has to be retrieved from a different location. This is useful if such a redirection cannot be handled inside a source element for example when HTTP redirects return a non HTTP URL. \nThe redirect message can hold multiple entries. The first one is added when the redirect message is created with the given location tag_list entry_struct arguments. Use Gst.Message.prototype.add_redirect_entry to add more entries. \nEach entry has a location a tag list and a structure. All of these are optional. The tag list and structure are useful for additional metadata such as bitrate statistics for the given location. \nBy default message recipients should treat entries in the order they are stored. The recipient should therefore try entry first and if this entry is not acceptable or working try entry etc. Senders must make sure that they add entries in this order. However recipients are free to ignore the order and pick an entry that is best for them. One example would be a recipient that scans the entries for the one with the highest bitrate tag. \nThe specified location string is copied. However ownership over the tag list and structure are transferred to the message. \nThis message can be posted by elements when they want to have their state changed. A typical use case would be an audio server that wants to pause the pipeline because a higher priority stream is being played. \nThis message is posted when the pipeline running time should be reset to running_time like after a flushing seek. \nCreate a new segment done message. This message is posted by elements that finish playback of a segment as a result of a segment seek. This message is received by the application after all elements that posted a segment_start have posted the segment_done. \nCreate a new segment message. This message is posted by elements that start playback of a segment as a result of a segment seek. This message is not received by the application but is used for maintenance reasons in container elements. \nCreate a state change message. This message is posted whenever an element changed its state. \nCreate a state dirty message. This message is posted whenever an element changed its state asynchronously and is used internally to update the states of container objects. \nThis message is posted by elements when they complete a part when intermediate set to true or a complete step operation. \nduration will contain the amount of time in GST_FORMAT_TIME of the stepped amount of media in format format. \nThis message is posted by elements when they accept or activate a new step event for amount in format. \nactive is set to false when the element accepted the new step event and has queued it for execution in the streaming threads. \nactive is set to true when the element has activated the step operation and is now ready to start executing the step in the streaming thread. After this message is emitted the application can queue a new step operation in the element. \nCreates a new stream collection message. The message is used to announce new Gst.StreamCollection \nCreate a new stream_start message. This message is generated and posted in the sink elements of a GstBin. The bin will only forward the STREAM_START message to the application if all sinks have posted an STREAM_START message. \nCreate a new stream status message. This message is posted when a streaming thread is created destroyed or when the state changed. \nCreates a new steams selected message. The message is used to announce that an array of streams has been selected. This is generally in response to a Gst.EventType.prototype.select_streams event or when an element such as decodebin3 makes an initial selection of streams. \nThe message also contains the Gst.StreamCollection to which the various streams belong to. \nUsers of Gst.Message.prototype.new_streams_selected can add the selected streams with Gst.Message.prototype.streams_selected_add. \nCreate a new structure change message. This message is posted when the structure of a pipeline is in the process of being changed for example when pads are linked or unlinked. \nsrc should be the sinkpad that unlinked or linked. \nCreate a new warning message. The message will make copies of error and debug. \nCreate a new warning message. The message will make copies of error and debug. \nCreates and appends a new entry. \nThe specified location string is copied. However ownership over the tag list and structure are transferred to the message. \nExtracts the object managing the streaming thread from message. \nAccess the structure of the message. \nExtract the running_time from the async_done message. \nMT safe. \nExtracts the buffering percent from the GstMessage. see also Gst.Message.prototype.new_buffering. \nMT safe. \nExtracts the buffering stats values from message. \nExtracts the lost clock from the GstMessage. The clock object returned remains valid until the message is freed. \nMT safe. \nExtracts the clock and ready flag from the GstMessage. The clock object returned remains valid until the message is freed. \nMT safe. \nParse a context type from an existing GST_MESSAGE_NEED_CONTEXT message. \nParses a device added message. The device added message is produced by Gst.DeviceProvider or a Gst.DeviceMonitor. It announces the appearance of monitored devices. \nParses a device removed message. The device removed message is produced by Gst.DeviceProvider or a Gst.DeviceMonitor. It announces the disappearance of monitored devices. \nExtracts the GError and debug string from the GstMessage. The values returned in the output arguments are copies the caller must free them when done. \nTypical usage of this function might be \nMT safe. \nReturns the optional details structure may be NULL if none. The returned structure must not be freed. \nExtract the group from the STREAM_START message. \nExtract the context from the HAVE_CONTEXT message. \nMT safe. \nReturns the optional details structure may be NULL if none The returned structure must not be freed. \nExtracts the new clock from the GstMessage. The clock object returned remains valid until the message is freed. \nMT safe. \nParses the progress type code and text. \nParses a property notify message. These will be posted on the bus only when set up with Gst.Element.prototype.add_property_notify_watch or Gst.Element.prototype.add_property_deep_notify_watch. \nExtract the QoS stats representing the history of the current continuous pipeline playback period. \nWhen format is GST_FORMAT_UNDEFINED both dropped and processed are invalid. Values of for either processed or dropped mean unknown values. \nMT safe. \nExtract the QoS values that have been calculated analysed from the QoS data \nMT safe. \nParses the location and or structure from the entry with the given index. The index must be between and Gst.Message.prototype.get_num_redirect_entries Returned pointers are valid for as long as this message exists. \nExtract the requested state from the request_state message. \nMT safe. \nExtract the running time from the RESET_TIME message. \nMT safe. \nExtracts the position and format from the segment done message. \nMT safe. \nExtracts the position and format from the segment start message. \nMT safe. \nExtracts the old and new states from the GstMessage. \nTypical usage of this function might be \nMT safe. \nExtract the values the step_done message. \nMT safe. \nExtract the values from step_start message. \nMT safe. \nParses a stream collection message. \nExtracts the stream status type and owner the GstMessage. The returned owner remains valid for as long as the reference to message is valid and should thus not be unreffed. \nMT safe. \nParses a streams selected message. \nExtracts the change type and completion status from the GstMessage. \nMT safe. \nExtracts the GError and debug string from the GstMessage. The values returned in the output arguments are copies the caller must free them when done. \nMT safe. \nReturns the optional details structure may be NULL if none The returned structure must not be freed. \nConfigures the buffering stats values in message. \nSets the group id on the stream start message. \nAll streams that have the same group id are supposed to be played together i.e. all streams inside a container file should have the same group id but different stream ids. The group id should change each time the stream is started resulting in different group ids each time a file is played for example. \nMT safe. \nSet the QoS stats representing the history of the current continuous pipeline playback period. \nWhen format is GST_FORMAT_UNDEFINED both dropped and processed are invalid. Values of for either processed or dropped mean unknown values. \nMT safe. \nSet the QoS values that have been calculated analysed from the QoS data \nMT safe. \nConfigures the object handling the streaming thread. This is usually a GstTask object but other objects might be added in the future. \nAdds the stream to the message. \nReturns the number of streams contained in the message. \nRetrieves the Gst.Stream with index index from the message. \nGet a printable name for the given message type. Do not modify or free. \nGet the unique quark for the given message type. \na thread is destroyed \nGst.StreamStatusType.prototype.start \nPad linking is starting or done. \nGst.StructureChangeType.prototype.unlink \nPad unlinking is starting or done. \n"});