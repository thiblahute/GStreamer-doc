fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstbufferpool.html#gstbufferpool", "fragment": "GstBufferPool \nA Gst.BufferPool is an object that can be used to pre allocate and recycle buffers of the same size and with the same properties. \nA Gst.BufferPool is created with Gst.BufferPool.prototype.new. \nOnce a pool is created it needs to be configured. A call to Gst.BufferPool.prototype.get_config returns the current configuration structure from the pool. With Gst.BufferPool.prototype.config_set_params and Gst.BufferPool.prototype.config_set_allocator the bufferpool parameters and allocator can be configured. Other properties can be configured in the pool depending on the pool implementation. \nA bufferpool can have extra options that can be enabled with Gst.BufferPool.prototype.config_add_option. The available options can be retrieved with Gst.BufferPool.prototype.get_options. Some options allow for additional configuration properties to be set. \nAfter the configuration structure has been configured Gst.BufferPool.prototype.set_config updates the configuration in the pool. This can fail when the configuration structure is not accepted. \nAfter the a pool has been configured it can be activated with Gst.BufferPool.prototype.set_active. This will preallocate the configured resources in the pool. \nWhen the pool is active Gst.BufferPool.prototype.acquire_buffer can be used to retrieve a buffer from the pool. \nBuffers allocated from a bufferpool will automatically be returned to the pool with Gst.BufferPool.prototype.release_buffer when their refcount drops to \nThe bufferpool can be deactivated again with Gst.BufferPool.prototype.set_active. All further Gst.BufferPool.prototype.acquire_buffer calls will return an error. When all buffers are returned to the pool they will be freed. \nUse Gst.Object.prototype.unref to release the reference to a bufferpool. If the refcount of the pool reaches the pool will be freed. \n"});