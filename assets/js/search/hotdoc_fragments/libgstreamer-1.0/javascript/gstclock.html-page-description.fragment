fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstclock.html#page-description", "fragment": "Gst.Clock base structure. The values of this structure are protected for subclasses use the methods to use the Gst.Clock. \nCompares the two Gst.ClockID instances. This function can be used as a GCompareFunc when sorting ids. \nCancel an outstanding request with id. This can either be an outstanding async notification or a pending sync notification. After this call id cannot be used anymore to receive sync or async notifications you need to create a new Gst.ClockID. \nMT safe. \nRegister a callback on the given Gst.ClockID id with the given function and user_data. When passing a Gst.ClockID with an invalid time to this function the callback will be called immediately with a time set to GST_CLOCK_TIME_NONE. The callback will be called when the time of id has been reached. \nThe callback func can be invoked from any thread either provided by the core or from a streaming thread. The application should be prepared for this. \nThe time master of the master clock and the time slave of the slave clock are added to the list of observations. If enough observations are available a linear regression algorithm is run on the observations and clock is recalibrated. \nIf this functions returns true r_squared will contain the correlation coefficient of the interpolation. A value of means a perfect regression was performed. This value can be used to control the sampling frequency of the master and slave clocks. \nAdd a clock observation to the internal slaving algorithm the same as Gst.Clock.prototype.add_observation and return the result of the master clock estimation without updating the internal calibration. \nThe caller can then take the results and call Gst.Clock.prototype.set_calibration with the values or some modified version of them. \nConverts the given internal clock time to the external time adjusting for the rate and reference time set with Gst.Clock.prototype.set_calibration and making sure that the returned time is increasing. This function should be called with the clock s OBJECT_LOCK held and is mainly used by clock subclasses. \nThis function is the reverse of Gst.Clock.prototype.unadjust_unlocked. \nConverts the given internal_target clock time to the external time using the passed calibration parameters. This function performs the same calculation as Gst.Clock.prototype.adjust_unlocked when called using the current calibration parameters but doesn t ensure a monotonically increasing result as Gst.Clock.prototype.adjust_unlocked does. \nNote The clock parameter is unused and can be NULL \nGets the internal rate and reference time of clock. See Gst.Clock.prototype.set_calibration for more information. \ninternal external rate_num and rate_denom can be left null if the caller is not interested in the values. \nMT safe. \nGets the current internal time of the given clock. The time is returned unadjusted for the offset and the rate. \nGet the accuracy of the clock. The accuracy of the clock is the granularity of the values returned by Gst.Clock.prototype.get_time. \nGet an ID from clock to trigger a periodic notification. The periodic notifications will start at time start_time and will then be fired with the given interval. id should be unreffed after usage. \nFree function gst_clock_id_unref \nGet a Gst.ClockID from clock to trigger a single shot notification at the requested time. The single shot id should be unreffed after usage. \nFree function gst_clock_id_unref \nReinitializes the provided periodic id to the provided start time and interval. Does not modify the reference count. \nAdjusts the rate and time of clock. A rate of is the normal speed of the clock. Values bigger than make the clock go faster. \ninternal and external are calibration parameters that arrange that Gst.Clock.prototype.get_time should have been external at internal time internal. This internal time should not be in the future that is it should be less than the value of Gst.Clock.prototype.get_internal_time when this function is called. \nSubsequent calls to Gst.Clock.prototype.get_time will return clock times computed as follows \nThis formula is implemented in Gst.Clock.prototype.adjust_unlocked. Of course it tries to do the integer arithmetic as precisely as possible. \nNote that Gst.Clock.prototype.get_time always returns increasing values so when you move the clock backwards Gst.Clock.prototype.get_time will report the previous value until the clock catches up. \nMT safe. \nSet the accuracy of the clock. Some clocks have the possibility to operate with different accuracy at the expense of more resource usage. There is normally no need to change the default resolution of a clock. The resolution of a clock can only be changed if the clock has the Gst.ClockFlags.prototype.can_set_resolution flag set. \nReinitializes the provided single shot id to the provided time. Does not modify the reference count. \nConverts the given external clock time to the internal time of clock using the rate and reference time set with Gst.Clock.prototype.set_calibration. This function should be called with the clock s OBJECT_LOCK held and is mainly used by clock subclasses. \nThis function is the reverse of Gst.Clock.prototype.adjust_unlocked. \nConverts the given external_target clock time to the internal time using the passed calibration parameters. This function performs the same calculation as Gst.Clock.prototype.unadjust_unlocked when called using the current calibration parameters. \nNote The clock parameter is unused and can be NULL \nWaits until clock is synced for reporting the current time. If timeout is Gst.CLOCK_TIME_NONE it will wait forever otherwise it will time out after timeout nanoseconds. \nFor asynchronous waiting the GstClock synced signal can be used. \nThis returns immediately with TRUE if GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC is not set on the clock or if the clock is already synced. \nclock can do a single sync timeout request \nGst.ClockFlags.prototype.can_do_single_async \nclock can do a single async timeout request \nGst.ClockFlags.prototype.can_do_periodic_sync \nclock can do sync periodic timeout requests \nGst.ClockFlags.prototype.can_do_periodic_async \nclock can do async periodic timeout callbacks \nGst.ClockFlags.prototype.can_set_resolution \nclock s resolution can be changed \nGst.ClockFlags.prototype.can_set_master \nclock needs to be synced before it can be used Since \nGst.ClockFlags.prototype.last \n"});