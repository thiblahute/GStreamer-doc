fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstbufferpool.html#page-description", "fragment": "The structure of a Gst.BufferPool. Use the associated macros to access the public variables. \nEnabled the option in config. This will instruct the bufferpool to enable the specified option on the buffers that it allocates. \nThe supported options by pool can be retrieved with Gst.BufferPool.prototype.get_options. \nGet the allocator and params from config. \nParse an available config and get the option at index of the options API array. \nGet the configuration values from config. \nCheck if config contains option. \nRetrieve the number of values currently stored in the options array of the config structure. \nSet the allocator and params on config. \nOne of allocator and params can be null but not both. When allocator is null the default allocator of the pool will use the values in param to perform its allocation. When param is null the pool will use the provided allocator with its default Gst.AllocationParams. \nA call to Gst.BufferPool.prototype.set_config can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use Gst.BufferPool.prototype.get_config to get the currently used values. \nConfigure config with the given parameters. \nValidate that changes made to config are still valid in the context of the expected parameters. This function is a helper that can be used to validate changes made by a pool to a config when Gst.BufferPool.prototype.set_config returns false. This expects that caps haven t changed and that min_buffers aren t lower then what we initially expected. This does not check if options or allocator parameters are still valid won t check if size have changed since changing the size is valid to adapt padding. \nAcquire a buffer from pool. buffer should point to a memory location that can hold a pointer to the new buffer. \nparams can be null or contain optional parameters to influence the allocation. \nGet a copy of the current configuration of the pool. This configuration can either be modified and used for the Gst.BufferPool.prototype.set_config call or it must be freed after usage. \nGet a null terminated array of string with supported bufferpool options for pool. An option would typically be enabled with Gst.BufferPool.prototype.config_add_option. \nCheck if the bufferpool supports option. \nCheck if pool is active. A pool can be activated with the Gst.BufferPool.prototype.set_active call. \nRelease buffer to pool. buffer should have previously been allocated from pool with Gst.BufferPool.prototype.acquire_buffer. \nThis function is usually called automatically when the last ref on buffer disappears. \nControl the active state of pool. When the pool is inactive new calls to Gst.BufferPool.prototype.acquire_buffer will return with Gst.FlowReturn.prototype.flushing. \nActivating the bufferpool will preallocate all resources in the pool based on the configuration of the pool. \nDeactivating will free the resources again when there are no outstanding buffers. When there are outstanding buffers they will be freed as soon as they are all returned to the pool. \nSet the configuration of the pool. If the pool is already configured and the configuration haven t change this function will return true. If the pool is active this method will return false and active configuration will remain. Buffers allocated form this pool must be returned or else this function will do nothing and return false. \nconfig is a Gst.Structure that contains the configuration parameters for the pool. A default and mandatory set of parameters can be configured with Gst.BufferPool.prototype.config_set_params Gst.BufferPool.prototype.config_set_allocator and Gst.BufferPool.prototype.config_add_option. \nIf the parameters in config can not be set exactly this function returns false and will try to update as much state as possible. The new state can then be retrieved and refined with Gst.BufferPool.prototype.get_config. \nThis function takes ownership of config. \nEnable or disable the flushing state of a pool without freeing or allocating buffers. \ngpointer _gst_reserved \ngint64 start \nthe start position \ngint64 stop \nthe stop position \nGstBufferPoolAcquireFlags flags \nadditional flags \ngpointer _gst_reserved \nAdditional flags to control the allocation of a buffer \nno flags \nGst.BufferPoolAcquireFlags.prototype.key_unit \nbuffer is keyframe \nGst.BufferPoolAcquireFlags.prototype.dontwait \nwhen the bufferpool is empty acquire_buffer will by default block until a buffer is released into the pool again. Setting this flag makes acquire_buffer return Gst.FlowReturn.prototype.eos instead of blocking. \nGst.BufferPoolAcquireFlags.prototype.discont \nbuffer is discont \nGst.BufferPoolAcquireFlags.prototype.last \nlast flag subclasses can use private flags starting from this value. \n"});