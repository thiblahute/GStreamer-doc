fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstpad.html#page-description", "fragment": "The Gst.Pad structure. Use the functions to update the variables. \nCreates a new pad with the given name from the given static template. If name is null a guaranteed unique name across all pads will be assigned. This function makes a copy of the name so you can safely free the name. \nCreates a new pad with the given name from the given template. If name is null a guaranteed unique name across all pads will be assigned. This function makes a copy of the name so you can safely free the name. \nCheck and clear the Gst.PadFlags.prototype.need_reconfigure flag on pad and return true if the flag was set. \nCreates a stream id for the source Gst.Pad pad by combining the upstream information with the optional stream_id of the stream of pad. pad must have a parent Gst.Element and which must have zero or one sinkpad. stream_id can only be null if the parent element of pad has only a single source pad. \nThis function generates an unique stream id by getting the upstream stream start event stream ID and appending stream_id to it. If the element has no sinkpad it will generate an upstream stream id by doing an URI query on the element and in the worst case just uses a random number. Source elements that don t implement the URI handler interface should ideally generate a unique deterministic stream id manually instead. \nSince stream IDs are sorted alphabetically any numbers in the stream ID should be printed with a fixed number of characters preceded by s such as by using the format u instead of u. \nGets the capabilities of the allowed media types that can flow through pad and its peer. \nThe allowed capabilities is calculated as the intersection of the results of calling Gst.Pad.prototype.query_caps on pad and its peer. The caller owns a reference on the resulting caps. \nGets the capabilities currently configured on pad with the last Gst.EventType.prototype.caps event. \nGets the private data of a pad. No locking is performed in this function. \nGets the Gst.FlowReturn return from the last data passed by this pad. \nGets the template for pad. \nGets the capabilities for pad s template. \nGets the parent of pad cast to a Gst.Element. If a pad has no parent or its parent is not an element return null. \nReturns a new reference of the sticky event of type event_type from the event. \nCheck if pad has caps set on it with a Gst.EventType.prototype.caps event. \nGets an iterator for the pads to which the given pad is linked to inside of the parent element. \nEach Gst.Pad element yielded by the iterator will have its refcount increased so unref after use. \nFree function gst_iterator_free \nIterate the list of pads to which the given pad is linked to inside of the parent element. This is the default handler and thus returns an iterator of all of the pads inside the parent element with opposite direction. \nThe caller must free this iterator after use with Gst.Iterator.prototype.free. \nLinks src to sink creating any Gst.GhostPad s in between as necessary. \nThis is a convenience function to save having to create and add intermediate Gst.GhostPad s as required for linking across Gst.Bin boundaries. \nIf src or sink pads don t have parent elements or do not share a common ancestor the link will fail. \nLinks src to sink creating any Gst.GhostPad s in between as necessary. \nThis is a convenience function to save having to create and add intermediate Gst.GhostPad s as required for linking across Gst.Bin boundaries. \nIf src or sink pads don t have parent elements or do not share a common ancestor the link will fail. \nCalling Gst.Pad.prototype.link_maybe_ghosting_full with flags Gst.PadLinkCheck.prototype.default is the recommended way of linking pads with safety checks applied. \nMark a pad for needing reconfiguration. The next call to Gst.Pad.prototype.check_reconfigure will return true after this call. \nCheck the Gst.PadFlags.prototype.need_reconfigure flag on pad and return true if the flag was set. \nCheck if the peer of pad accepts caps. If pad has no peer this function returns true. \nGets the capabilities of the peer connected to this pad. Similar to Gst.Pad.prototype.query_caps. \nWhen called on srcpads filter contains the caps that upstream could produce in the order preferred by upstream. When called on sinkpads filter contains the caps accepted by downstream in the preferred order. filter might be null but if it is not null the returned caps will be a subset of filter. \nQueries the peer pad of a given sink pad to convert src_val in src_format to dest_format. \nQueries the peer pad of a given sink pad for the total stream duration. \nQueries the peer of a given sink pad for the stream position. \nChecks if all internally linked pads of pad accepts the caps in query and returns the intersection of the results. \nThis function is useful as a default accept caps query function for an element that can handle any stream format but requires caps that are acceptable for all opposite pads. \nCalls Gst.Pad.prototype.query_caps for all internally linked pads of pad and returns the intersection of the results. \nThis function is useful as a default caps query function for an element that can handle any stream format but requires all its pads to have the same caps. Two such elements are tee and adder. \nCheck if the given pad accepts the caps. \nSets the given activate function for pad. The activate function will dispatch to Gst.Pad.prototype.activate_mode to perform the actual activation. Only makes sense to set on sink pads. \nCall this function if your sink pad can start a pull based task. \nSets the given activate_mode function for the pad. An activate_mode function prepares the element for data passing. \nSets the given chain function for the pad. The chain function is called to process a Gst.Buffer input buffer. see Gst.PadChainFunction for more details. \nSets the given chain list function for the pad. The chainlist function is called to process a Gst.BufferList input buffer list. See Gst.PadChainListFunction for more details. \nSet the given private data gpointer on the pad. This function can only be used by the element that owns the pad. No locking is performed in this function. \nSets the given event handler for the pad. \nSets the given event handler for the pad. \nSets the given getrange function for the pad. The getrange function is called to produce a new Gst.Buffer to start the processing pipeline. see Gst.PadGetRangeFunction for a description of the getrange function. \nSets the given internal link iterator function for the pad. \nSets the given link function for the pad. It will be called when the pad is linked with another pad. \nThe return value Gst.PadLinkReturn.prototype.ok should be used when the connection can be made. \nThe return value Gst.PadLinkReturn.prototype.refused should be used when the connection cannot be made for some reason. \nIf link is installed on a source pad it should call the Gst.PadLinkFunction of the peer sink pad if present. \nSet the given query function for the pad. \nSets the given unlink function for the pad. It will be called when the pad is unlinked. \nIterates all sticky events on pad and calls foreach_func for every event. If foreach_func returns false the iteration is immediately stopped. \nStore the sticky event on pad \nCheck if the pads are compatible by using their template caps. This is much faster than GST_PAD_LINK_CHECK_CAPS but would be unsafe e.g. if one pad has GST_CAPS_ANY not introspectable \nGst.PadLinkCheck.prototype.caps \nDisables pushing a reconfigure event when pads are linked. \nGst.PadLinkCheck.prototype.default \nprobe buffer lists \nGst.PadProbeType.prototype.event_downstream \nprobe downstream events \nGst.PadProbeType.prototype.event_upstream \nprobe upstream events \nGst.PadProbeType.prototype.event_flush \nprobe flush events. This probe has to be explicitly enabled and is not included in the GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM or GST_PAD_PROBE_TYPE_EVENT_UPSTREAM probe types. \nGst.PadProbeType.prototype.query_downstream \nprobe downstream queries \nGst.PadProbeType.prototype.query_upstream \nprobe upstream queries \nGst.PadProbeType.prototype.push \nprobe downstream data buffers buffer lists and events \nGst.PadProbeType.prototype.data_upstream \nprobe upstream data events \nGst.PadProbeType.prototype.data_both \nprobe and block downstream data buffers buffer lists and events \nGst.PadProbeType.prototype.block_upstream \nprobe and block upstream data events \nGst.PadProbeType.prototype.event_both \nCallback used by Gst.Pad.prototype.sticky_events_foreach. \nWhen this function returns true the next event will be returned. When false is returned Gst.Pad.prototype.sticky_events_foreach will return. \nWhen event is set to null the item will be removed from the list of sticky events. event can be replaced by assigning a new reference to it. This function is responsible for unreffing the old event when removing or modifying. \n"});