fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstevent.html#page-description", "fragment": "Create a new buffersize event. The event is sent downstream and notifies elements that they should provide a buffer of the specified dimensions. \nWhen the async flag is set a thread boundary is preferred. \nAllocate a new flush start event. The flush start event can be sent upstream and downstream and travels out of bounds with the dataflow. \nIt marks pads as being flushing and will make them return Gst.FlowReturn.prototype.flushing when used for data flow with Gst.Pad.prototype.push Gst.Pad.prototype.chain Gst.Pad.prototype.get_range and Gst.Pad.prototype.pull_range. Any event except a Gst.EventType.prototype.flush_stop received on a flushing pad will return false immediately. \nElements should unlock any blocking functions and exit their streaming functions as fast as possible when this event is received. \nThis event is typically generated after a seek to flush out all queued data in the pipeline so that the new media is played as soon as possible. \nAllocate a new flush stop event. The flush stop event can be sent upstream and downstream and travels serialized with the dataflow. It is typically sent after sending a FLUSH_START event to make the pads accept data again. \nElements can process this event synchronized with the dataflow since the preceding FLUSH_START event stopped the dataflow. \nThis event is typically generated to complete a seek and to resume dataflow. \nCreate a new navigation event from the given description. \nCreates a new event containing information specific to a particular protection system uniquely identified by system_id by which that protection system can acquire key s to decrypt a protected stream. \nIn order for a decryption element to decrypt media protected using a specific system it first needs all the protection system specific information necessary to acquire the decryption key s for that stream. The functions defined here enable this information to be passed in events from elements that extract it e.g. ISOBMFF demuxers MPEG DASH demuxers to protection decrypter elements that use it. \nEvents containing protection system specific information are created using Gst.Event.prototype.new_protection and they can be parsed by downstream elements using Gst.Event.prototype.parse_protection. \nIn Common Encryption protection system specific information may be located within ISOBMFF files both in movie moov boxes and movie fragment moof boxes it may also be contained in ContentProtection elements within MPEG DASH MPDs. The events created by Gst.Event.prototype.new_protection contain data identifying from which of these locations the encapsulated protection system specific information originated. This origin information is required as some protection systems use different encodings depending upon where the information originates. \nThe events returned by Gst.Event.prototype.new_protection are implemented in such a way as to ensure that the most recently pushed protection info event of a particular origin and system_id will be stuck to the output pad of the sending element. \nCreate a new reconfigure event. The purpose of the reconfigure event is to travel upstream and make elements renegotiate their caps or reconfigure their buffer pools. This is useful when changing properties on elements or changing the topology of the pipeline. \nCreate a new segment done event. This event is sent by elements that finish playback of a segment as a result of a segment seek. \nAllocate a new select streams event. \nThe select streams event requests the specified streams to be activated. \nThe list of streams corresponds to the Stream ID of each stream to be activated. Those ID can be obtained via the Gst.Stream objects present in Gst.EventType.prototype.stream_start Gst.EventType.prototype.stream_collection or GST_MESSSAGE_STREAM_COLLECTION. \nCreate a new sink message event. The purpose of the sink message event is to instruct a sink to post the message contained in the event synchronized with the stream. \nname is used to store multiple sticky events on one pad. \nCreate a new STREAM_COLLECTION event. The stream collection event can only travel downstream synchronized with the buffer flow. \nSource elements demuxers and other elements that manage collections of streams and post Gst.StreamCollection messages on the bus also send this event downstream on each pad involved in the collection so that activation of a new collection can be tracked through the downstream data flow. \nCreate a new Stream Group Done event. The stream group done event can only travel downstream synchronized with the buffer flow. Elements that receive the event on a pad should handle it mostly like EOS and emit any data or pending buffers that would depend on more data arriving and unblock since there won t be any more data. \nThis event is followed by EOS at some point in the future and is generally used when switching pads to unblock downstream so that new pads can be exposed before sending EOS on the existing pads. \nCreate a new STREAM_START event. The stream start event can only travel downstream synchronized with the buffer flow. It is expected to be the first event that is sent for a new stream. \nSource elements demuxers and other elements that create new streams are supposed to send this event as the first event of a new stream. It should not be sent after a flushing seek or in similar situations and is used to mark the beginning of a new logical stream. Elements combining multiple streams must ensure that this event is only forwarded downstream once and not for every single input stream. \nThe stream_id should be a unique string that consists of the upstream stream id as separator and a unique stream id for this specific stream. A new stream id should only be created for a stream if the upstream stream is split into potentially multiple new streams e.g. in a demuxer but not for every single element in the pipeline. Gst.Pad.prototype.create_stream_id or gst_pad_create_stream_id_printf not introspectable can be used to create a stream id. There are no particular semantics for the stream id though it should be deterministic to support stream matching and it might be used to order streams besides any information conveyed by stream flags \nGenerate a TOC select event with the given uid. The purpose of the TOC select event is to start playback based on the TOC s entry with the given uid. \nRetrieve the accumulated running time offset of the event. \nEvents passing through Gst.Pad that have a running time offset set via Gst.Pad.prototype.set_offset will get their offset adjusted according to the pad s offset. \nIf the event contains any information that related to the running time this information will need to be updated before usage with this offset. \nAccess the structure of the event. \nGet the format minsize maxsize and async flag in the buffersize event. \nParse the FLUSH_STOP event and retrieve the reset_time member. \nGet the latency in the latency event. \nParses an event containing protection system specific information and stores the results in system_id data and origin. The data stored in system_id origin and data are valid until event is released. \nParses a segment event and stores the result in the given segment location. segment remains valid only until the event is freed. Don t modify the segment and make a copy if you want to modify it or store it for later use. \nExtracts the position and format from the segment done message. \nParse the SELECT_STREAMS event and retrieve the contained streams. \nParse the sink message event. Unref msg after usage. \nRetrieve new Gst.StreamCollection from STREAM_COLLECTION event event. \nParse a stream group done event and store the result in the given group_id location. \nParse a stream id event and store the result in the given stream_id location. The string stored in stream_id must not be modified and will remain valid only until event gets freed. Make a copy if you want to modify it or store it for later use. \nParse a TOC select event and store the results in the given uid location. \nSet the running time offset of a event. See Gst.Event.prototype.get_running_time_offset for more information. \nMT safe. \nGet a writable version of the structure. \nGets the Gst.EventTypeFlags associated with type. \nGet a printable name for the given event type. Do not modify or free. \nGet the unique quark for the given event type. \nCustom out of band downstream event. \nGst.EventType.prototype.custom_downstream_sticky \nCustom sticky downstream event. \nGst.EventType.prototype.custom_both \n"});