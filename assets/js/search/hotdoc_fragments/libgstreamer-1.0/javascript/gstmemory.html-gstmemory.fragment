fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstmemory.html#gstmemory", "fragment": "GstMemory \nGstMemory is a lightweight refcounted object that wraps a region of memory. They are typically used to manage the data of a Gst.Buffer. \nA GstMemory object has an allocated region of memory of maxsize. The maximum size does not change during the lifetime of the memory object. The memory also has an offset and size property that specifies the valid range of memory in the allocated region. \nMemory is usually created by allocators with a Gst.Allocator.prototype.alloc method call. When NULL is used as the allocator the default allocator will be used. \nNew allocators can be registered with Gst.Allocator.prototype.register. Allocators are identified by name and can be retrieved with Gst.Allocator.prototype.find. Gst.Allocator.prototype.set_default can be used to change the default allocator. \nNew memory can be created with Gst.Memory.prototype.new_wrapped that wraps the memory allocated elsewhere. \nRefcounting of the memory block is performed with gst_memory_ref and gst_memory_unref. \nThe size of the memory can be retrieved and changed with Gst.Memory.prototype.get_sizes and Gst.Memory.prototype.resize respectively. \nGetting access to the data of the memory is performed with Gst.Memory.prototype.map. The call will return a pointer to offset bytes into the region of memory. After the memory access is completed Gst.Memory.prototype.unmap should be called. \nMemory can be copied with Gst.Memory.prototype.copy which will return a writable copy. Gst.Memory.prototype.share will create a new memory block that shares the memory with an existing memory block at a custom offset and with a custom size. \nMemory can be efficiently merged when Gst.Memory.prototype.is_span returns TRUE. \n"});