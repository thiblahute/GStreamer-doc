fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstpipeline.html#page-description", "fragment": "The Gst.Pipeline structure. \nLet pipeline select a clock automatically. This is the default behaviour. \nUse this function if you previous forced a fixed clock with Gst.Pipeline.prototype.use_clock and want to restore the default pipeline clock selection algorithm. \nMT safe. \nCheck if pipeline will automatically flush messages when going to the NULL state. \nGets the latency that should be configured on the pipeline. See Gst.Pipeline.prototype.set_latency. \nGets the current clock used by pipeline. \nUnlike Gst.Element.prototype.get_clock this function will always return a clock even if the pipeline is not in the PLAYING state. \nUsually when a pipeline goes from READY to NULL state it automatically flushes all pending messages on the bus which is done for refcounting purposes to break circular references. \nThis means that applications that update state using async bus messages e.g. do certain things when a pipeline goes from PAUSED to READY might not get to see messages when the pipeline is shut down because they might be flushed before they can be dispatched in the main thread. This behaviour can be disabled using this function. \nIt is important that all messages on the bus are handled when the automatic flushing is disabled else memory leaks will be introduced. \nMT safe. \nSets the latency that should be configured on the pipeline. Setting GST_CLOCK_TIME_NONE will restore the default behaviour of using the minimum latency from the LATENCY query. Setting this is usually not required and the pipeline will figure out an appropriate latency automatically. \nSetting a too low latency especially lower than the minimum latency from the LATENCY query will most likely cause the pipeline to fail. \n"});