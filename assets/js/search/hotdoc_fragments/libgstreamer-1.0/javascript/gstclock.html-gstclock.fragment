fragment_downloaded_cb({"url": "libgstreamer-1.0/javascript/gstclock.html#gstclock", "fragment": "GstClock \nGstClock \nGStreamer uses a global clock to synchronize the plugins in a pipeline. Different clock implementations are possible by implementing this abstract base class or more conveniently by subclassing Gst.SystemClock. \nThe Gst.Clock returns a monotonically increasing time with the method Gst.Clock.prototype.get_time. Its accuracy and base time depend on the specific clock implementation but time is always expressed in nanoseconds. Since the baseline of the clock is undefined the clock time returned is not meaningful in itself what matters are the deltas between two clock times. The time returned by a clock is called the absolute time. \nThe pipeline uses the clock to calculate the running time. Usually all renderers synchronize to the global clock using the buffer timestamps the newsegment events and the element s base time see Gst.Pipeline. \nA clock implementation can support periodic and single shot clock notifications both synchronous and asynchronous. \nOne first needs to create a Gst.ClockID for the periodic or single shot notification using Gst.Clock.prototype.new_single_shot_id or Gst.Clock.prototype.new_periodic_id. \nTo perform a blocking wait for the specific time of the Gst.ClockID use the Gst.Clock.prototype.id_wait. To receive a callback when the specific time is reached in the clock use Gst.Clock.prototype.id_wait_async. Both these calls can be interrupted with the Gst.Clock.prototype.id_unschedule call. If the blocking wait is unscheduled a return value of Gst.ClockReturn.prototype.unscheduled is returned. \nPeriodic callbacks scheduled async will be repeatedly called automatically until it is unscheduled. To schedule a sync periodic callback Gst.Clock.prototype.id_wait should be called repeatedly. \nThe async callbacks can happen from any thread either provided by the core or from a streaming thread. The application should be prepared for this. \nA Gst.ClockID that has been unscheduled cannot be used again for any wait operation a new Gst.ClockID should be created and the old unscheduled one should be destroyed with Gst.Clock.prototype.id_unref. \nIt is possible to perform a blocking wait on the same Gst.ClockID from multiple threads. However registering the same Gst.ClockID for multiple async notifications is not possible the callback will only be called for the thread registering the entry last. \nNone of the wait operations unref the Gst.ClockID the owner is responsible for unreffing the ids itself. This holds for both periodic and single shot notifications. The reason being that the owner of the Gst.ClockID has to keep a handle to the Gst.ClockID to unblock the wait on FLUSHING events or state changes and if the entry would be unreffed automatically the handle might become invalid without any notification. \nThese clock operations do not operate on the running time so the callbacks will also occur when not in PLAYING state as if the clock just keeps on running. Some clocks however do not progress when the element that provided the clock is not PLAYING. \nWhen a clock has the Gst.ClockFlags.prototype.can_set_master flag set it can be slaved to another Gst.Clock with the Gst.Clock.prototype.set_master. The clock will then automatically be synchronized to this master clock by repeatedly sampling the master clock and the slave clock and recalibrating the slave clock with Gst.Clock.prototype.set_calibration. This feature is mostly useful for plugins that have an internal clock but must operate with another clock selected by the Gst.Pipeline. They can track the offset and rate difference of their internal clock relative to the master clock by using the Gst.Clock.prototype.get_calibration function. \nThe master slave synchronisation can be tuned with the timeout window size and window threshold properties. The timeout property defines the interval to sample the master clock and run the calibration functions. window size defines the number of samples to use when calibrating and window threshold defines the minimum number of samples before the calibration is performed. \n"});