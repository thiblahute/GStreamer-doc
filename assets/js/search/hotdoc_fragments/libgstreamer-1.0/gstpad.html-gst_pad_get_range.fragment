fragment_downloaded_cb({"url": "libgstreamer-1.0/gstpad.html#gst_pad_get_range", "fragment": "gst_pad_get_range \nGst.Pad.get_range \nGst.Pad.GetRange \nGst.prototype.get_range \nWhen pad is flushing this function returns GST_FLOW_FLUSHING immediately and buffer is NULL. \nCalls the getrange function of pad see GstPadGetRangeFunction for a description of a getrange function. If pad has no getrange function installed see gst_pad_set_getrange_function this function returns GST_FLOW_NOT_SUPPORTED. \nIf buffer points to a variable holding NULL a valid new GstBuffer will be placed in buffer when this function returns GST_FLOW_OK. The new buffer must be freed with gst_buffer_unref after usage. \nWhen buffer points to a variable that points to a valid GstBuffer the buffer will be filled with the result data when this function returns GST_FLOW_OK. If the provided buffer is larger than size only size bytes will be filled in the result buffer and its size will be updated accordingly. \nNote that less than size bytes can be returned in buffer when for example an EOS condition is near or when buffer is not large enough to hold size bytes. The caller should check the result buffer size to get the result size. \nWhen this function returns any other result value than GST_FLOW_OK buffer will be unchanged. \nThis is a lowlevel function. Usually gst_pad_pull_range is used. \nParameters \na src GstPad returns GST_FLOW_ERROR if not. \nThe start offset of the buffer \nThe length of the buffer \na pointer to hold the GstBuffer returns GST_FLOW_ERROR if NULL. \na GstFlowReturn from the pad. \nMT safe. \nWhen pad is flushing this function returns Gst.FlowReturn.FLUSHING immediately and buffer is None. \nCalls the getrange function of pad see Gst.PadGetRangeFunction for a description of a getrange function. If pad has no getrange function installed see gst_pad_set_getrange_function not introspectable this function returns Gst.FlowReturn.NOT_SUPPORTED. \nIf buffer points to a variable holding None a valid new Gst.Buffer will be placed in buffer when this function returns Gst.FlowReturn.OK. The new buffer must be freed with gst_buffer_unref not introspectable after usage. \nWhen buffer points to a variable that points to a valid Gst.Buffer the buffer will be filled with the result data when this function returns Gst.FlowReturn.OK. If the provided buffer is larger than size only size bytes will be filled in the result buffer and its size will be updated accordingly. \nNote that less than size bytes can be returned in buffer when for example an EOS condition is near or when buffer is not large enough to hold size bytes. The caller should check the result buffer size to get the result size. \nWhen this function returns any other result value than Gst.FlowReturn.OK buffer will be unchanged. \nThis is a lowlevel function. Usually Gst.Pad.pull_range is used. \nParameters \na src Gst.Pad returns Gst.FlowReturn.ERROR if not. \nThe start offset of the buffer \nThe length of the buffer \nReturns a tuple made of \na Gst.FlowReturn from the pad. \nMT safe. \na Gst.FlowReturn from the pad. \nMT safe. \nWhen pad is flushing this function returns Gst.FlowReturn.Flushing immediately and buffer is null. \nCalls the getrange function of pad see Gst.PadGetRangeFunction for a description of a getrange function. If pad has no getrange function installed see gst_pad_set_getrange_function not introspectable this function returns Gst.FlowReturn.NotSupported. \nIf buffer points to a variable holding null a valid new Gst.Buffer will be placed in buffer when this function returns Gst.FlowReturn.Ok. The new buffer must be freed with gst_buffer_unref not introspectable after usage. \nWhen buffer points to a variable that points to a valid Gst.Buffer the buffer will be filled with the result data when this function returns Gst.FlowReturn.Ok. If the provided buffer is larger than size only size bytes will be filled in the result buffer and its size will be updated accordingly. \nNote that less than size bytes can be returned in buffer when for example an EOS condition is near or when buffer is not large enough to hold size bytes. The caller should check the result buffer size to get the result size. \nWhen this function returns any other result value than Gst.FlowReturn.Ok buffer will be unchanged. \nThis is a lowlevel function. Usually Gst.Pad.PullRange is used. \nParameters \nThe start offset of the buffer \nThe length of the buffer \na pointer to hold the Gst.Buffer returns Gst.FlowReturn.Error if null. \na Gst.FlowReturn from the pad. \nMT safe. \nWhen pad is flushing this function returns Gst.FlowReturn.FLUSHING immediately and buffer is null. \nCalls the getrange function of pad see Gst.PadGetRangeFunction for a description of a getrange function. If pad has no getrange function installed see gst_pad_set_getrange_function not introspectable this function returns Gst.FlowReturn.NOT_SUPPORTED. \nIf buffer points to a variable holding null a valid new Gst.Buffer will be placed in buffer when this function returns Gst.FlowReturn.OK. The new buffer must be freed with gst_buffer_unref not introspectable after usage. \nWhen buffer points to a variable that points to a valid Gst.Buffer the buffer will be filled with the result data when this function returns Gst.FlowReturn.OK. If the provided buffer is larger than size only size bytes will be filled in the result buffer and its size will be updated accordingly. \nNote that less than size bytes can be returned in buffer when for example an EOS condition is near or when buffer is not large enough to hold size bytes. The caller should check the result buffer size to get the result size. \nWhen this function returns any other result value than Gst.FlowReturn.OK buffer will be unchanged. \nThis is a lowlevel function. Usually Gst.prototype.pull_range is used. \nParameters \na src Gst.Pad returns Gst.FlowReturn.ERROR if not. \nThe start offset of the buffer \nThe length of the buffer \nReturns a tuple made of \na Gst.FlowReturn from the pad. \nMT safe. \na Gst.FlowReturn from the pad. \nMT safe. \n"});