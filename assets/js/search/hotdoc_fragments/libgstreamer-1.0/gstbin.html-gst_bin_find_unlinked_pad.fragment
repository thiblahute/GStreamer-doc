fragment_downloaded_cb({"url": "libgstreamer-1.0/gstbin.html#gst_bin_find_unlinked_pad", "fragment": "Gst.prototype.find_unlinked_pad \nGst.Bin.find_unlinked_pad \nGst.Bin.FindUnlinkedPad \ngst_bin_find_unlinked_pad \nRecursively looks for elements with an unlinked pad of the given direction within the specified bin and returns an unlinked pad if one is found or null otherwise. If a pad is found the caller owns a reference to it and should use Gst.prototype.unref on the pad when it is not needed any longer. \nParameters \nbin in which to look for elements with unlinked pads \nwhether to look for an unlinked source or sink pad \nunlinked pad of the given direction null. \nRecursively looks for elements with an unlinked pad of the given direction within the specified bin and returns an unlinked pad if one is found or None otherwise. If a pad is found the caller owns a reference to it and should use Gst.Object.unref on the pad when it is not needed any longer. \nParameters \nbin in which to look for elements with unlinked pads \nwhether to look for an unlinked source or sink pad \nunlinked pad of the given direction None. \nRecursively looks for elements with an unlinked pad of the given direction within the specified bin and returns an unlinked pad if one is found or null otherwise. If a pad is found the caller owns a reference to it and should use Gst.Object.Unref on the pad when it is not needed any longer. \nParameters \nwhether to look for an unlinked source or sink pad \nunlinked pad of the given direction null. \nRecursively looks for elements with an unlinked pad of the given direction within the specified bin and returns an unlinked pad if one is found or NULL otherwise. If a pad is found the caller owns a reference to it and should use gst_object_unref on the pad when it is not needed any longer. \nParameters \nbin in which to look for elements with unlinked pads \nwhether to look for an unlinked source or sink pad \nunlinked pad of the given direction NULL. \n"});