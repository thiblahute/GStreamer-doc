fragment_downloaded_cb({"url": "libgstreamer-1.0/gstvalue.html#gst_value_can_union", "fragment": "gst_value_can_union \nGst.value_can_union \nGst.prototype.value_can_union \nDetermines if value1 and value2 can be non trivially unioned. Any two values can be trivially unioned by adding both of them to a GstValueList. However certain types have the possibility to be unioned in a simpler way. For example an integer range and an integer can be unioned if the integer is a subset of the integer range. If there is the possibility that two values can be unioned this function returns TRUE. \nParameters \na value to union \nanother value to union \nTRUE if there is a function allowing the two values to be unioned. \nDetermines if value1 and value2 can be non trivially unioned. Any two values can be trivially unioned by adding both of them to a GstValueList. However certain types have the possibility to be unioned in a simpler way. For example an integer range and an integer can be unioned if the integer is a subset of the integer range. If there is the possibility that two values can be unioned this function returns True. \nParameters \na value to union \nanother value to union \nTrue if there is a function allowing the two values to be unioned. \nDetermines if value1 and value2 can be non trivially unioned. Any two values can be trivially unioned by adding both of them to a GstValueList. However certain types have the possibility to be unioned in a simpler way. For example an integer range and an integer can be unioned if the integer is a subset of the integer range. If there is the possibility that two values can be unioned this function returns true. \nParameters \na value to union \nanother value to union \ntrue if there is a function allowing the two values to be unioned. \n"});