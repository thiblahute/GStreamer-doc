fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gstbus.html#page-description", "fragment": "The opaque GstBus data structure. \nAdds a bus signal watch to the default main context with the given priority e.g. G_PRIORITY_DEFAULT It is also possible to use a non default main context set up using g_main_context_push_thread_default before one had to create a bus watch source and attach it to the desired main context manually \nAfter calling this statement the bus will emit the message signal for each message posted on the bus when the main loop is running. \nThis function may be called multiple times. To clean up the caller is responsible for calling gst_bus_remove_signal_watch as many times as this function is called. \nThere can only be a single bus watch per bus you must remove any signal watch before you can set another type of watch. \nMT safe. \nInstructs GStreamer to stop emitting the sync message signal for this bus. See gst_bus_enable_sync_message_emission for more information. \nIn the event that multiple pieces of code have called gst_bus_enable_sync_message_emission the sync message emissions will only be stopped after all calls to gst_bus_enable_sync_message_emission were cancelled by calling this function. In this way the semantics are exactly the same as gst_object_ref that which calls enable should also call disable. \nMT safe. \nInstructs GStreamer to emit the sync message signal after running the bus s sync handler. This function is here so that code can ensure that they can synchronously receive messages without having to affect what the bin s sync handler is. \nThis function may be called multiple times. To clean up the caller is responsible for calling gst_bus_disable_sync_message_emission as many times as this function is called. \nWhile this function looks similar to gst_bus_add_signal_watch it is not exactly the same this function enables synchronous emission of signals when messages arrive gst_bus_add_signal_watch adds an idle callback to pop messages off the bus asynchronously. The sync message signal comes from the thread of whatever object posted the message the message signal is marshalled to the main thread via the main loop. \nMT safe. \n"});