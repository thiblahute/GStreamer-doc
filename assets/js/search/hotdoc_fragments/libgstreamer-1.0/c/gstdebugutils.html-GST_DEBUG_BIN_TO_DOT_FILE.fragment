fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gstdebugutils.html#GST_DEBUG_BIN_TO_DOT_FILE", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GST_DEBUG_BIN_TO_DOT_FILE\">\n\t\t<h3 id=\"gst_debug_bin_to_dot_file2\">\n\t<span><code>GST_DEBUG_BIN_TO_DOT_FILE</code></span>\n</h3>\n\n\t\t<pre class=\"raw_code\">\n#define GST_DEBUG_BIN_TO_DOT_FILE(bin, details, file_name)\n</pre>\n\n<p>To aid debugging applications one can use this method to write out the whole\nnetwork of gstreamer elements that form the pipeline into an dot file.\nThis file can be processed with graphviz to get an image, like this:</p>\n<pre><code class=\"language-[\">  dot -Tpng -oimage.png graph_lowlevel.dot\n</code></pre>\n<p>There is also a utility called xdot which allows you to view the dot file\ndirectly without converting it first.</p>\n<p>The macro is only active if gstreamer is configured with\n\"--gst-enable-gst-debug\" and the environment variable\nGST_DEBUG_DUMP_DOT_DIR is set to a basepath (e.g. /tmp).</p>\n\n\t<div class=\"parameter_container\">\n\t\t<h4 id=\"parameters3\">Parameters</h4>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>bin:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>the top-level pipeline that should be analyzed</p>\n</td>\n<td>\n\n\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>details:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>details to show in the graph, e.g. <a href=\"gstdebugutils.html#GST_DEBUG_GRAPH_SHOW_ALL\">GST_DEBUG_GRAPH_SHOW_ALL</a> or\none or more other <a href=\"gstdebugutils.html#GstDebugGraphDetails\">GstDebugGraphDetails</a> flags.</p>\n</td>\n<td>\n\n\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>file_name:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>output base filename (e.g. \"myplayer\")</p>\n</td>\n<td>\n\n\n</td>\n</tr>\n\n\t\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\n\n\n\n</div>\n\n\n\n"});