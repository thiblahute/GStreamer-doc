fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gstpad.html#page-description", "fragment": "The GstPad structure. Use the functions to update the variables. \nCreates a new pad with the given name from the given static template. If name is NULL a guaranteed unique name across all pads will be assigned. This function makes a copy of the name so you can safely free the name. \nCreates a stream id for the source GstPad pad by combining the upstream information with the optional stream_id of the stream of pad. pad must have a parent GstElement and which must have zero or one sinkpad. stream_id can only be NULL if the parent element of pad has only a single source pad. \nThis function generates an unique stream id by getting the upstream stream start event stream ID and appending stream_id to it. If the element has no sinkpad it will generate an upstream stream id by doing an URI query on the element and in the worst case just uses a random number. Source elements that don t implement the URI handler interface should ideally generate a unique deterministic stream id manually instead. \nCreates a stream id for the source GstPad pad by combining the upstream information with the optional stream_id of the stream of pad. pad must have a parent GstElement and which must have zero or one sinkpad. stream_id can only be NULL if the parent element of pad has only a single source pad. \nThis function generates an unique stream id by getting the upstream stream start event stream ID and appending stream_id to it. If the element has no sinkpad it will generate an upstream stream id by doing an URI query on the element and in the worst case just uses a random number. Source elements that don t implement the URI handler interface should ideally generate a unique deterministic stream id manually instead. \nGets the capabilities for pad s template. \nGets an iterator for the pads to which the given pad is linked to inside of the parent element. \nEach GstPad element yielded by the iterator will have its refcount increased so unref after use. \nFree function gst_iterator_free \nIterate the list of pads to which the given pad is linked to inside of the parent element. This is the default handler and thus returns an iterator of all of the pads inside the parent element with opposite direction. \nThe caller must free this iterator after use with gst_iterator_free. \nLinks src to sink creating any GstGhostPad s in between as necessary. \nThis is a convenience function to save having to create and add intermediate GstGhostPad s as required for linking across GstBin boundaries. \nIf src or sink pads don t have parent elements or do not share a common ancestor the link will fail. \nCalling gst_pad_link_maybe_ghosting_full with flags GST_PAD_LINK_CHECK_DEFAULT is the recommended way of linking pads with safety checks applied. \nCheck if the peer of pad accepts caps. If pad has no peer this function returns TRUE. \nChecks if all internally linked pads of pad accepts the caps in query and returns the intersection of the results. \nThis function is useful as a default accept caps query function for an element that can handle any stream format but requires caps that are acceptable for all opposite pads. \nSets the given activate function for pad. The activate function will dispatch to gst_pad_activate_mode to perform the actual activation. Only makes sense to set on sink pads. \nCall this function if your sink pad can start a pull based task. \nSets the given activate_mode function for the pad. An activate_mode function prepares the element for data passing. \nSets the given chain function for the pad. The chain function is called to process a GstBuffer input buffer. see GstPadChainFunction for more details. \nSets the given chain list function for the pad. The chainlist function is called to process a GstBufferList input buffer list. See GstPadChainListFunction for more details. \nSets the given event handler for the pad. \nSets the given event handler for the pad. \nSets the given getrange function for the pad. The getrange function is called to produce a new GstBuffer to start the processing pipeline. see GstPadGetRangeFunction for a description of the getrange function. \nSets the given internal link iterator function for the pad. \nSets the given link function for the pad. It will be called when the pad is linked with another pad. \nThe return value GST_PAD_LINK_OK should be used when the connection can be made. \nThe return value GST_PAD_LINK_REFUSED should be used when the connection cannot be made for some reason. \nIf link is installed on a source pad it should call the GstPadLinkFunction of the peer sink pad if present. \nSet the given query function for the pad. \nSets the given unlink function for the pad. It will be called when the pad is unlinked. \nIterates all sticky events on pad and calls foreach_func for every event. If foreach_func returns FALSE the iteration is immediately stopped. \nUnset proxy allocation flag. \nUnset proxy scheduling flag. \nUnset accept intersect flag. \nCalls gst_pad_set_activate_function_full with NULL for the user_data and notify. \nCalls gst_pad_set_activatemode_function_full with NULL for the user_data and notify. \nCalls gst_pad_set_chain_list_function_full with NULL for the user_data and notify. \nCalls gst_pad_set_getrange_function_full with NULL for the user_data and notify. \nCalls gst_pad_set_event_full_function_full with NULL for the user_data and notify. \nCalls gst_pad_set_iterate_internal_links_function_full with NULL for the user_data and notify. \nCheck if the pads are compatible by using their template caps. This is much faster than GST_PAD_LINK_CHECK_CAPS but would be unsafe e.g. if one pad has GST_CAPS_ANY. \nGST_PAD_LINK_CHECK_CAPS \nDisables pushing a reconfigure event when pads are linked. \nGST_PAD_LINK_CHECK_DEFAULT \nprobe buffer lists \nGST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM \nprobe downstream events \nGST_PAD_PROBE_TYPE_EVENT_UPSTREAM \nprobe upstream events \nGST_PAD_PROBE_TYPE_EVENT_FLUSH \nprobe flush events. This probe has to be explicitly enabled and is not included in the GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM or GST_PAD_PROBE_TYPE_EVENT_UPSTREAM probe types. \nGST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM \nprobe downstream queries \nGST_PAD_PROBE_TYPE_QUERY_UPSTREAM \nprobe upstream queries \nGST_PAD_PROBE_TYPE_PUSH \nprobe downstream data buffers buffer lists and events \nGST_PAD_PROBE_TYPE_DATA_UPSTREAM \nprobe upstream data events \nGST_PAD_PROBE_TYPE_DATA_BOTH \nprobe and block downstream data buffers buffer lists and events \nGST_PAD_PROBE_TYPE_BLOCK_UPSTREAM \nprobe and block upstream data events \nGST_PAD_PROBE_TYPE_EVENT_BOTH \nCallback used by gst_pad_sticky_events_foreach. \nWhen this function returns TRUE the next event will be returned. When FALSE is returned gst_pad_sticky_events_foreach will return. \nWhen event is set to NULL the item will be removed from the list of sticky events. event can be replaced by assigning a new reference to it. This function is responsible for unreffing the old event when removing or modifying. \n"});