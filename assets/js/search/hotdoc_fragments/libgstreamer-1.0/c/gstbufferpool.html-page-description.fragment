fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gstbufferpool.html#page-description", "fragment": "The structure of a GstBufferPool. Use the associated macros to access the public variables. \nEnabled the option in config. This will instruct the bufferpool to enable the specified option on the buffers that it allocates. \nThe supported options by pool can be retrieved with gst_buffer_pool_get_options. \nGet the allocator and params from config. \nParse an available config and get the option at index of the options API array. \nGet the configuration values from config. \nCheck if config contains option. \nRetrieve the number of values currently stored in the options array of the config structure. \nSet the allocator and params on config. \nOne of allocator and params can be NULL but not both. When allocator is NULL the default allocator of the pool will use the values in param to perform its allocation. When param is NULL the pool will use the provided allocator with its default GstAllocationParams. \nA call to gst_buffer_pool_set_config can update the allocator and params with the values that it is able to do. Some pools are for example not able to operate with different allocators or cannot allocate with the values specified in params. Use gst_buffer_pool_get_config to get the currently used values. \nConfigure config with the given parameters. \nValidate that changes made to config are still valid in the context of the expected parameters. This function is a helper that can be used to validate changes made by a pool to a config when gst_buffer_pool_set_config returns FALSE. This expects that caps haven t changed and that min_buffers aren t lower then what we initially expected. This does not check if options or allocator parameters are still valid won t check if size have changed since changing the size is valid to adapt padding. \nAcquire a buffer from pool. buffer should point to a memory location that can hold a pointer to the new buffer. \nparams can be NULL or contain optional parameters to influence the allocation. \nRelease buffer to pool. buffer should have previously been allocated from pool with gst_buffer_pool_acquire_buffer. \nThis function is usually called automatically when the last ref on buffer disappears. \ngpointer _gst_reserved \nParameters passed to the gst_buffer_pool_acquire_buffer function to control the allocation of the buffer. \nThe default implementation ignores the start and stop members but other implementations can use this extra information to decide what buffer to return. \ngint64 start \nthe start position \ngint64 stop \nthe stop position \nGstBufferPoolAcquireFlags flags \nadditional flags \ngpointer _gst_reserved \nAdditional flags to control the allocation of a buffer \nno flags \nGST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT \nbuffer is keyframe \nGST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT \nwhen the bufferpool is empty acquire_buffer will by default block until a buffer is released into the pool again. Setting this flag makes acquire_buffer return GST_FLOW_EOS instead of blocking. \nGST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT \nbuffer is discont \nGST_BUFFER_POOL_ACQUIRE_FLAG_LAST \nlast flag subclasses can use private flags starting from this value. \n"});