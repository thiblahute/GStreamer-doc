fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gsttask.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gsttask.h\">\n<h1 id=\"gsttask\">GstTask</h1><p><a href=\"gsttask.html#GstTask\">GstTask</a> is used by <a href=\"gstelement.html#GstElement\">GstElement</a> and <a href=\"gstpad.html#GstPad\">GstPad</a> to provide the data passing\nthreads in a <a href=\"gstpipeline.html#GstPipeline\">GstPipeline</a>.</p>\n<p>A <a href=\"gstpad.html#GstPad\">GstPad</a> will typically start a <a href=\"gsttask.html#GstTask\">GstTask</a> to push or pull data to/from the\npeer pads. Most source elements start a <a href=\"gsttask.html#GstTask\">GstTask</a> to push data. In some cases\na demuxer element can start a <a href=\"gsttask.html#GstTask\">GstTask</a> to pull data from a peer element. This\nis typically done when the demuxer can perform random access on the upstream\npeer element for improved performance.</p>\n<p>Although convenience functions exist on <a href=\"gstpad.html#GstPad\">GstPad</a> to start/pause/stop tasks, it\nmight sometimes be needed to create a <a href=\"gsttask.html#GstTask\">GstTask</a> manually if it is not related to\na <a href=\"gstpad.html#GstPad\">GstPad</a>.</p>\n<p>Before the <a href=\"gsttask.html#GstTask\">GstTask</a> can be run, it needs a <a href=\"https://developer.gnome.org/glib/unstable/glib-Threads.html#GRecMutex\">GRecMutex</a> that can be set with\n<a href=\"gsttask.html#gst_task_set_lock\">gst_task_set_lock</a>.</p>\n<p>The task can be started, paused and stopped with <a href=\"gsttask.html#gst_task_start\">gst_task_start</a>, <a href=\"gsttask.html#gst_task_pause\">gst_task_pause</a>\nand <a href=\"gsttask.html#gst_task_stop\">gst_task_stop</a> respectively or with the <a href=\"gsttask.html#gst_task_set_state\">gst_task_set_state</a> function.</p>\n<p>A <a href=\"gsttask.html#GstTask\">GstTask</a> will repeatedly call the <a href=\"gsttask.html#GstTaskFunction\">GstTaskFunction</a> with the user data\nthat was provided when creating the task with <a href=\"gsttask.html#gst_task_new\">gst_task_new</a>. While calling\nthe function it will acquire the provided lock. The provided lock is released\nwhen the task pauses or stops.</p>\n<p>Stopping a task with <a href=\"gsttask.html#gst_task_stop\">gst_task_stop</a> will not immediately make sure the task is\nnot running anymore. Use <a href=\"gsttask.html#gst_task_join\">gst_task_join</a> to make sure the task is completely\nstopped and the thread is stopped.</p>\n<p>After creating a <a href=\"gsttask.html#GstTask\">GstTask</a>, use <a href=\"gstobject.html#gst_object_unref\">gst_object_unref</a> to free its resources. This can\nonly be done when the task is not running anymore.</p>\n<p>Task functions can send a <a href=\"gstmessage.html#GstMessage\">GstMessage</a> to send out-of-band data to the\napplication. The application can receive messages from the <a href=\"gstbus.html#GstBus\">GstBus</a> in its\nmainloop.</p>\n<p>For debugging purposes, the task will configure its object name as the thread\nname on Linux. Please note that the object name should be configured before the\ntask is started; changing the object name after the task has been started, has\nno effect on the thread name.</p>\n\n</div>\n\n\n\n"});