fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gstcaps.html#GstCapsIntersectMode", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GstCapsIntersectMode\">\n\t\t\n<h3 id=\"enum-gstcapsintersectmode\">\n\t\tenum GstCapsIntersectMode\n\t</h3>\n\n\t\t<p>Modes of caps intersection</p>\n<p><em>GST_CAPS_INTERSECT_ZIG_ZAG</em> tries to preserve overall order of both caps\nby iterating on the caps' structures as the following matrix shows:</p>\n<pre><code class=\"language-[\">          caps1\n       +-------------\n       | 1  2  4  7\n caps2 | 3  5  8 10\n       | 6  9 11 12\n</code></pre>\n<p>Used when there is no explicit precedence of one caps over the other. e.g.\ntee's sink pad getcaps function, it will probe its src pad peers' for their\ncaps and intersect them with this mode.</p>\n<p><em>GST_CAPS_INTERSECT_FIRST</em> is useful when an element wants to preserve\nanother element's caps priority order when intersecting with its own caps.\nExample: If caps1 is [A, B, C] and caps2 is [E, B, D, A], the result\nwould be [A, B], maintaining the first caps priority on the intersection.</p>\n\n\n<div class=\"member_details\">\n\t<h5 id=\"members1\">Members</h5>\n\t<div class=\"member_container\">\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t<td>\n\t\t<p>\n\t\t<a id=\"GST_CAPS_INTERSECT_ZIG_ZAG\"></a>\n\t\tGST_CAPS_INTERSECT_ZIG_ZAG\n\t\t</p>\n\t</td>\n\t<td><p>Zig-zags over both caps.</p>\n</td>\n\t<td>\n\t\t<span class=\"value\">Value: 0</span>\n\t</td>\n</tr>\n\n\t\t\t\t\t\t<tr>\n\t<td>\n\t\t<p>\n\t\t<a id=\"GST_CAPS_INTERSECT_FIRST\"></a>\n\t\tGST_CAPS_INTERSECT_FIRST\n\t\t</p>\n\t</td>\n\t<td><p>Keeps the first caps order.</p>\n</td>\n\t<td>\n\t\t<span class=\"value\">Value: 1</span>\n\t</td>\n</tr>\n\n\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n</div>\n\n\n</div>\n\n\n"});