fragment_downloaded_cb({"url": "libgstreamer-1.0/c/gstquery.html#page-description", "fragment": "Add api with params as one of the supported metadata API to query. \nAdd allocator and its params as a supported memory allocator. \nSet the pool parameters in query. \nSet the buffering ranges array field in query. The current last start position of the array should be inferior to start. \nAdd mode as one of the supported scheduling modes to query. \nCheck if query has metadata api set. When this function returns TRUE index will contain the index where the requested API and the parameters can be found. \nRetrieve the number of values currently stored in the meta API array of the query s structure. \nRetrieve the number of values currently stored in the allocator params array of the query s structure. \nIf no memory allocator is specified the downstream element can handle the default memory allocator. The first memory allocator in the query should be generic and allow mapping to system memory all following allocators should be ordered by preference with the preferred one first. \nRetrieve the number of values currently stored in the pool array of the query s structure. \nRetrieve the number of values currently stored in the buffered ranges array of the query s structure. \nRetrieve the number of values currently stored in the scheduling mode array of the query s structure. \nCheck if query has scheduling mode set. \nWhen checking if upstream supports pull mode it is usually not enough to just check for GST_PAD_MODE_PULL with this function you also want to check whether the scheduling flags returned by gst_query_parse_scheduling have the seeking flag set meaning random access is supported not only sequential pulls \nCheck if query has scheduling mode set and flags is set in query scheduling flags. \nParse the result from query and store in result. \nGet the percentage of buffered data. This is a value between and The busy indicator is TRUE when the buffering is in progress. \nParse an available query writing the format into format and other results into the passed parameters if the respective parameters are non NULL \nExtracts the buffering stats values from query. \nParse an available query and get the metadata API at index of the metadata API array. \nParse an available query and get the allocator and its params at index of the allocator array. \nGet the pool parameters in query. \nUnref pool with gst_object_unref when it s not needed any more. \nParse an available query and get the start and stop values stored at the index of the buffered ranges array. \nParse an available query and get the scheduling mode at index of the scheduling modes array. \nParse an URI query writing the URI into uri as a newly allocated string if the respective parameters are non NULL. Free the string with g_free after usage. \nParse an URI query and set permanent to TRUE if there is a redirection and it should be considered permanent. If a redirection is permanent applications should update their internal storage of the URI otherwise they should make all future requests to the original URI. \nRemove the metadata API at index of the metadata API array. \nRemove the allocation param at index of the allocation param array. \nRemove the allocation pool at index of the allocation pool array. \nSet result as the result for the query. \nSet the percentage of buffered data. This is a value between and The busy indicator is TRUE when the buffering is in progress. \nSet the available query result fields in query. \nConfigures the buffering stats values in query. \nParse an available query and get the allocator and its params at index of the allocator array. \nSet the pool parameters in query. \nAnswer a URI query by setting the requested URI redirection. \nAnswer a URI query by setting the requested URI redirection to permanent or not. \nif sequential access is recommended \nGST_SCHEDULING_FLAG_BANDWIDTH_LIMITED \nif bandwidth is limited and buffering possible since \n"});