fragment_downloaded_cb({"url": "gst-plugins-bad-plugins-1.0/element-sdpdemux.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-sdpdemux\">\n<h1 id=\"sdpdemux\">sdpdemux</h1><p>sdpdemux currently understands SDP as the input format of the session description.\nFor each stream listed in the SDP a new stream_%u pad will be created\nwith caps derived from the SDP media description. This is a caps of mime type\n\"application/x-rtp\" that can be connected to any available RTP depayloader\nelement.</p>\n<p>sdpdemux will internally instantiate an RTP session manager element\nthat will handle the RTCP messages to and from the server, jitter removal,\npacket reordering along with providing a clock for the pipeline.</p>\n<p>sdpdemux acts like a live element and will therefore only generate data in the\nPLAYING state.</p>\n<h2 id=\"example-launch-line\">Example launch line</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 souphttpsrc location=http://some.server/session.sdp ! sdpdemux ! fakesink\n ]| Establish a connection to an HTTP server that contains an SDP session description\n that gets parsed by sdpdemux and send the raw RTP packets to a fakesink.\n</code></pre>\n\n</div>\n\n\n        "});