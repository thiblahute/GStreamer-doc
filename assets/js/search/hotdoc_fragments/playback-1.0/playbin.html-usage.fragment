fragment_downloaded_cb({"url": "playback-1.0/playbin.html#usage", "fragment": "Usage \nA playbin element can be created just like any other element using gst_element_factory_make. The file URI to play should be set via the uri property. This must be an absolute URI relative file paths are not allowed. Example URIs are file home joe movie.avi or http www.joedoe.com foo.ogg \nPlaybin is a GstPipeline. It will notify the application of everything that s happening errors end of stream tags found state changes etc. by posting messages on its GstBus. The application needs to watch the bus. \nPlayback can be initiated by setting the element to PLAYING state using gst_element_set_state. Note that the state change will take place in the background in a separate thread when the function returns playback is probably not happening yet and any errors might not have occured yet. Applications using playbin should ideally be written to deal with things completely asynchroneous. \nWhen playback has finished an EOS message has been received on the bus or an error has occured an ERROR message has been received on the bus or the user wants to play a different track playbin should be set back to READY or NULL state then the uri property should be set to the new location and then playbin be set to PLAYING state again. \nSeeking can be done using gst_element_seek_simple or gst_element_seek on the playbin element. Again the seek will not be executed instantaneously but will be done in a background thread. When the seek call returns the seek will most likely still be in process. An application may wait for the seek to finish or fail using gst_element_get_state with as the timeout but this will block the user interface and is not recommended at all. \nApplications may query the current position and duration of the stream via gst_element_query_position and gst_element_query_duration and setting the format passed to GST_FORMAT_TIME. If the query was successful the duration or position will have been returned in units of nanoseconds. \n"});