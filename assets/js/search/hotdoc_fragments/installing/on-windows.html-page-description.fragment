fragment_downloaded_cb({"url": "installing/on-windows.html#page-description", "fragment": "To develop applications using GStreamer for Windows we recommend using Windows or later. Windows Vista may also work but it is not supported. \nGStreamer binaries includes C headers h and library files lib valid for any version of Microsoft Visual Studio. For convenience property pages props are also included which extremely simplify creating new projects. These property pages though only work with Microsoft Visual Studio including the free Visual C Express edition \nThe recommended system is Windows with Microsoft Visual Studio Take a look at its system requirements \nInstalling GStreamer for bits platforms requires approximately MB of free disk space for the runtime and MB for the development files. \nInstalling GStreamer for bits platforms requires approximately MB of free disk space for the runtime and MB for the development files. \nThere are sets of files in GStreamer binaries \nGet the Runtime and Development files installers appropriate for your architecture from here \nhttps gstreamer.freedesktop.org data pkg windows \nExecute the installers and choose an installation folder. The suggested default is usually OK. \nIf you plan to use Visual Studio close it before installing GStreamer. The installer will define new environment variables which will not be picked up by Visual Studio if it is open. \nOn Windows and Windows it might be necessary to log out and log back in to your account after the installation for the newly defined environment variables to be picked up by Visual Studio. \nIt is the application s responsibility to ensure that at runtime GStreamer can access its libraries and plugins. It can be done by adding GSTREAMER_ROOT_X86 bin to the PATH environment variable or by running the application from this same folder. \nAt runtime GStreamer will look for its plugins in the following folders \nSo typically if your application can find libgstreamer dll it will find the GStreamer plugins as long as the installation folder structure is unmodified. If you do change this structure in your application then you can use the GST_PLUGIN_PATH environment variable to point GStreamer to its plugins. The plugins are initially found at GSTREAMER_ROOT_X86 lib gstreamer \nAdditionally if you want to prevent GStreamer from looking in all the default folders listed above you can set the GST_PLUGIN_SYSTEM_PATH environment variable to point where the plugins are located. \nThe tutorials code along with project files and a solution file for Visual Studio are in the gst docs in the examples tutorials folder. \nIn order to prevent accidental modification of the original code and to make sure Visual Studio has the necessary permissions to write the output files copy the entire tutorials folder to a place of your liking and work from there. \nbit Users \nUse GSTREAMER_ROOT_X86_64 if you have installed GStreamer binaries for bit platforms. Both GStreamer binariess and bit can be installed simultaneously and hence the separate environment variables. \nMake sure you select the Solution Configuration that matches GStreamer that you have installed Win32 for bits or x64 for bits. \n\nYou can fire up Visual Studio and load your copy of the tutorials.sln solution file Click on the screen shots to enlarge them \n\n\nHit F7 press the Build Solution button or go to Build Build Solution. All projects should build without problems. \nIn order to run the tutorials we will set the current working directory to GSTREAMER_ROOT_X86 bin in the Debugging section of the project properties. This property is not stored in the project files so you will need to manually add it to every tutorial you want to run from within Visual Studio. Right click on a project in the Solution Explorer Properties Debugging Working Directory and type GSTREAMER_ROOT_X86 bin \nThe notation is required to access environment variables from within Visual Studio. You use the notation from Windows Explorer \nYou should now be able to run the tutorials. \nIf you want to create bit applications remember also to create x64 Solution and Project configurations as explained here. \nThe included property sheets make creating new projects extremely easy. In Visual Studio create a new project Normally a Win32 Console or Win32 Application Then go to the Property Manager View Property Manager right click on your project and select Add Existing Property Sheet... Navigate to GSTREAMER_ROOT_X86 share vs libs and load gstreamer props \nThis property sheet contains the directories where the headers and libraries are located and the necessary options for the compiler and linker so you do not need to change anything else in your project. \nIf you cannot find the Property Manager you might need to enable Expert Settings. Go to Tools Settings Expert Settings. Upon first installation of Visual Studio Expert Settings are disabled by default. \n\nDepending on the GStreamer libraries you need to use you will have to add more property pages besides gstreamer each property page corresponds to one GStreamer library \nThe tutorial s project files already contain all necessary property pages. When developing your own applications the GStreamer documentation will tell you what library a function belongs to and therefore what property pages you need to add. \nAt this point you have a working environment which you can test by running the tutorials. However there is a last step remaining. \nApplications built with Visual C depend on the Visual C Runtime which is a DLL that gets installed when you install Visual Studio. If you were to distribute your application you would need to distribute this DLL with it What is known as the Visual C Redistributable Package This happens with every version of Visual Studio and the Runtime DLL is different for every version of Visual Studio. \nFurthermore GStreamer itself is built using a basic C runtime which comes in every Windows system since Windows XP and is named MSVCRT.DLL. If your application and GStreamer do not use the same C Runtime problems are bound to crop out. \nIn order to avoid these issues you must instruct your application to use the system s C Runtime. First install the Windows Device Driver Kit Version DDK When the installer asks about the features select only Build Environments Accept the suggested location for the installation which is usually C WinDDK This download is an ISO file you can either burn a DVD with it as recommended in the Microsoft site. You will need DVD burning software mount the file in a virtual DVD device you will need DVD virtualization software or unpack the file as if it was a regular compressed file you will need decompression software that understands the ISO format \nThen add the x86.props or x86_64.props for or bits property sheet found in GSTREAMER_ROOT_X86 share vs msvc to your project. This will make your application use the ubiquitous MSVCRT.DLL saving you some troubles in the future. \nIf you did not install the WinDDK to the standard path C WinDDK you will need to tell Visual Studio where it is. Unfortunately there is no automated way to do this. Once you have added the x86.props or x86_64.props to your project go to the Property Manager expand your project and its subfolders until you find the property sheet called config. Double click to edit it and select the section called User Macros in the list on the left. You should see a macro called WINDOWS_DRIVER_KIT. Double click to edit it and set its value to the root folder where you installed the DDK. This is the folder containing a file called samples.txt. \nThat s it. Accept the changes right click on the config property sheet and select Save The path to the DDK is now stored in config.props and you do not need to perform this operation anymore. \nGo to File New Project and you should find a template named GStreamer Project. It takes no parameters and sets all necessary project settings both for and bits architectures. \nThe generated project file includes the two required Property Sheets described in the previous section so in order to link to the correct MSVCRT.DLL you still need to install the Windows Device Driver Kit and change the appropriate property sheets. \n"});