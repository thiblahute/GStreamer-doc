fragment_downloaded_cb({"url": "installing/on-windows.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"on-windows.md\">\n<h1 id=\"installing-on-windows\">Installing on Windows</h1>\n<h2 id=\"supported-platforms\">Supported platforms</h2>\n<ul>\n<li>Windows 7</li>\n<li>Windows 8</li>\n<li>Windows 8.1</li>\n<li>Windows 10</li>\n</ul>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To develop applications using GStreamer for Windows we recommend using\n<a href=\"http://windows.microsoft.com/en-us/windows7/products/home\">Windows 7</a>\nor later. Windows Vista may also work but it is not supported.</p>\n<p>GStreamer binaries includes C headers (<code>.h</code>) and library files (<code>.lib</code>)\nvalid for any version of <a href=\"http://www.microsoft.com/visualstudio\">Microsoft Visual\nStudio</a>. For convenience,\nproperty pages (<code>.props</code>) are also included which extremely simplify\ncreating new projects. These property pages, though, only work with\n<a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions\">Microsoft Visual\nStudio 2010</a>\n(including the free <a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\">Visual C++ Express\nedition</a>).</p>\n<p>The recommended system is\n<a href=\"http://windows.microsoft.com/en-us/windows7/products/home\">Windows 7</a>\nwith <a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions\">Microsoft Visual\nStudio 2010</a>\u00a0(Take\na look at its <a href=\"http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express\">system\nrequirements</a>).</p>\n<p>Installing GStreamer for 32-bits platforms requires approximately 286MB of\nfree disk space for the runtime and 207MB for the development files.</p>\n<p>Installing GStreamer for 64-bits platforms requires approximately 340MB of\nfree disk space for the runtime and 216MB for the development files.</p>\n<h2 id=\"download-and-install-gstreamer-binaries\">Download and install GStreamer binaries</h2>\n<p>There are 3 sets of files in GStreamer binaries:</p>\n<ul>\n<li>The runtime files are needed to run GStreamer applications. You\nprobably want to distribute these files with your application (or\nthe installer below).</li>\n<li>The development files are <strong>additional</strong> files you need to create\nGStreamer applications.</li>\n<li>The <a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/aa369820%28v=vs.85%29.aspx\">Merge\nModules</a>\nfiles are <strong>additional</strong> files you can use to deploy GStreamer binaries\nalongside your application (see <a href=\"../deploying/windows.html\">Windows\ndeployment</a>).</li>\n</ul>\n<p>Get  <strong>the Runtime and Development files</strong> installers appropriate for\nyour architecture from here:</p>\n<p><a href=\"https://gstreamer.freedesktop.org/data/pkg/windows/\">https://gstreamer.freedesktop.org/data/pkg/windows/</a></p>\n<p>Execute the installers and choose an installation folder. The suggested\ndefault is usually OK.</p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"Warning\" id=\"warning\">\n`If you plan to use Visual Studio, <strong>close it before installing GStreamer</strong>. The installer will define new environment variables which will not be picked up by Visual Studio if it is open.</p>\n</blockquote>\n<blockquote>\n<p>On <strong>Windows 8</strong> and <strong>Windows 10</strong>, it might be necessary to log out and log back in to your account after the installation for the newly defined environment variables to be picked up by Visual Studio.</p>\n</blockquote>\n<p>It is the application's responsibility to ensure that, at runtime,\nGStreamer can access its libraries and plugins. It can be done by adding\n<code>%GSTREAMER_ROOT_X86%\\bin</code> to the <code>%PATH%</code> environment variable, or\nby running the application from this same folder.</p>\n<p>At runtime, GStreamer will look for its plugins in the following\nfolders:</p>\n<ul>\n<li><code>%HOMEDRIVE%%HOMEFOLDER%/.gstreamer-1.0/plugins</code></li>\n<li><code>C:\\gstreamer\\1.0\\x86\\lib\\gstreamer-1.0</code></li>\n<li><code>&lt;location of libgstreamer-1.0-0.dll&gt;\\..\\lib\\gstreamer-1.0</code></li>\n<li><code>%GST_PLUGIN_PATH%</code></li>\n</ul>\n<p>So, typically, if your application can find <code>libgstreamer-1.0-0.dll</code>,\nit will find the GStreamer plugins, as long as the installation folder\nstructure is unmodified. If you do change this structure in your\napplication, then you can use the <code>%GST_PLUGIN_PATH%</code> environment\nvariable to point GStreamer to its plugins. The plugins are initially\nfound at <code>%GSTREAMER_ROOT_X86%\\lib\\gstreamer-1.0</code>.</p>\n<p>Additionally, if you want to prevent GStreamer from looking in all the\ndefault folders listed above, you can set the\n<code>%GST_PLUGIN_SYSTEM_PATH%</code> environment variable to point where the\nplugins are located.</p>\n<h2 id=\"configure-your-development-environment\">Configure your development environment</h2>\n<h3 id=\"building-the-tutorials\">Building the tutorials</h3>\n<p>The tutorials code, along with project files and a solution file for\nVisual Studio 2010, are in the\n<a href=\"https://cgit.freedesktop.org/gstreamer/gst-docs/\">gst-docs</a> in the\n<code>examples/tutorials</code> folder.</p>\n<p>In order to prevent accidental modification of the original code, and to\nmake sure Visual Studio has the necessary permissions to write the\noutput files, copy the entire <code>tutorials</code> folder to a place of your\nliking, and work from there.</p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"Information\" id=\"information\">\n<strong>64-bit Users</strong></p>\n<p>Use <code>%GSTREAMER_ROOT_X86_64%</code> if you have installed GStreamer binaries for 64-bit platforms. Both GStreamer binariess (32 and 64-bit) can be installed simultaneously, and hence the separate environment variables.</p>\n<p>Make sure you select the Solution Configuration that matches GStreamer that you have installed: <code>Win32</code> for 32 bits or <code>x64</code> for 64 bits.</p>\n<p><img src=\"images/WindowsInstall-Configuration.png\" alt=\"Windows Install Configuration\" id=\"windows-install-configuration\"></p>\n</blockquote>\n<p>You can fire up Visual Studio 2010 and load your copy of the\n<code>tutorials.sln</code> solution file (Click on the screen shots to enlarge\nthem).</p>\n<p><img src=\"images/WindowsInstall2.png\" alt=\"\"></p>\n<p><img src=\"images/WindowsInstall1.png\" alt=\"\"></p>\n<p>Hit <strong>F7</strong>, press the Build Solution button\n<img src=\"images/WindowsInstall-BuildSolution.png\" alt=\"\"> or go to Build \u2192\nBuild Solution. All projects should build without problems.</p>\n<h3 id=\"running-the-tutorials\">Running the tutorials</h3>\n<p>In order to run the tutorials, we will set the current working directory\nto <code>%GSTREAMER_ROOT_X86%</code>\\<code>bin</code> in the Debugging section of the\nproject properties. <strong>This property is not stored in the project files,\nso you will need to manually add it to every tutorial you want to run\nfrom within Visual Studio</strong>. Right click on a project in the Solution\nExplorer, Properties \u2192 Debugging \u2192 Working Directory, and type\n<code>$(GSTREAMER_ROOT_X86)</code>\\<code>bin</code></p>\n<p>(The <code>$(...)</code> notation is required to access environment variables\nfrom within Visual Studio. You use the <code>%...%</code> notation from Windows\nExplorer)</p>\n<p>You should now be able to run the tutorials.</p>\n<h3 id=\"creating-new-projects-manually\">Creating new projects manually</h3>\n<p><strong>If you want to create 64-bit applications, remember also to create x64\nSolution and Project configurations as\nexplained <a href=\"http://msdn.microsoft.com/en-us/library/9yb4317s(v=vs.100).aspx\">here</a>.</strong></p>\n<h4 id=\"include-the-necessary-gstreamer-property-sheet\">Include the necessary GStreamer Property Sheet</h4>\n<p>The included property sheets make creating new projects extremely easy.\nIn Visual Studio 2010 create a new project (Normally a <code>Win32 Console</code> or <code>Win32 Application</code>). Then go to the Property Manager\n(View\u2192Property Manager), right-click on your project and select \u201cAdd\nExisting Property Sheet...\u201d. Navigate to\n<code>%GSTREAMER_ROOT_X86%</code>\\<code>share\\vs\\2010\\libs</code> and\nload <code>gstreamer-1.0.props</code></p>\n<p>This property sheet contains the directories where the headers and\nlibraries are located, and the necessary options for the compiler and\nlinker, so you do not need to change anything else in your project.</p>\n<p>If you cannot find the Property Manager, you might need to enable Expert\nSettings. Go to Tools \u2192 Settings \u2192 Expert Settings. Upon first\ninstallation of Visual Studio, Expert Settings are disabled by\ndefault.</p>\n<p><img src=\"images/WindowsInstall10.png\" alt=\"\"></p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"Warning\" id=\"warning1\">\n<strong>Depending on the GStreamer libraries you need to use, you will have to add more property pages, besides <code>gstreamer-1.0</code></strong>  (each property page corresponds to one GStreamer library).</p>\n<p>The tutorial's project files already contain all necessary property pages. When developing your own applications, the GStreamer documentation will tell you what library a function belongs to, and therefore, what property pages you need to add.</p>\n</blockquote>\n<h4 id=\"remove-the-dependency-with-the-visual-studio-runtime\">Remove the dependency with the Visual Studio runtime</h4>\n<p>At this point, you have a working environment, which you can test by\nrunning the tutorials. However, there is a last step remaining.</p>\n<p>Applications built with Visual C++ 2010 depend on the Visual C++ 2010\nRuntime, which is a DLL that gets installed when you install Visual\nStudio. If you were to distribute your application, you would need to\ndistribute this DLL with it (What is known as the <a href=\"http://www.microsoft.com/download/en/details.aspx?id=5555\">Visual C++ 2010\nRedistributable\nPackage</a>).\nThis happens with every version of Visual Studio, and the Runtime DLL is\ndifferent for every version of Visual Studio.</p>\n<p>Furthermore, GStreamer itself is built using a \u201cbasic\u201d C runtime which\ncomes in every Windows system since Windows XP, and is named\n<code>MSVCRT.DLL</code>. If your application and GStreamer do not use the same C\nRuntime, problems are bound to crop out.</p>\n<p>In order to avoid these issues you must instruct your application to use\nthe system's C Runtime. First install the <a href=\"http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=11800\">Windows Device Driver Kit\nVersion 7.1.0</a> (DDK).\nWhen the installer asks about the features, select only \u201cBuild\nEnvironments\u201d. Accept the suggested location for the installation, which\nis usually <code>C:\\WinDDK\\7600.16385.1</code>. This download is an ISO file, you\ncan either burn a DVD with it (as recommended in the Microsoft site. You\nwill need DVD burning software), mount the file in a virtual DVD device\n(you will need DVD virtualization software) or unpack the file as if it\nwas a regular compressed file (you will need decompression software that\nunderstands the ISO format).</p>\n<p>Then, add the <code>x86.props</code> or <code>x86_64.props</code> (for 32 or 64 bits) property\nsheet found in <code>%GSTREAMER_ROOT_X86%``\\``share\\vs\\2010\\msvc</code> to your\nproject. This will make your application use the ubiquitous\n<code>MSVCRT.DLL</code> saving you some troubles in the future.</p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"Information\" id=\"information1\">\nIf you did not install the WinDDK to the standard path <code>C:\\WinDDK\\7600.16385.1</code>, you will need to tell Visual Studio where it is. Unfortunately, there is no automated way to do this. Once you have added the <code>x86.props</code> or <code>x86_64.props</code> to your project, go to the Property Manager, expand your project and its subfolders until you find the property sheet called <code>config</code>. Double click to edit it, and select the section called \u201cUser Macros\u201d in the list on the left. You should see a macro called <code>WINDOWS_DRIVER_KIT</code>. Double click to edit it, and set its value to the root folder where you installed the DDK. This is the folder containing a file called <code>samples.txt</code>.</p>\n<p>That's it. Accept the changes, right click on the <code>config</code> property sheet and select \u201cSave\u201d. The path to the DDK is now stored in <code>config.props</code> and you do not need to perform this operation anymore.</p>\n</blockquote>\n<h3 id=\"creating-new-projects-using-the-wizard\">Creating new projects using the wizard</h3>\n<p>Go to File \u2192 New \u2192 Project\u2026 and you should find a template\nnamed <strong>GStreamer Project</strong>. It takes no parameters, and sets all\nnecessary project settings, both for 32 and 64 bits architectures.</p>\n<p>The generated project file includes the two required Property Sheets\ndescribed in the previous section, so, in order to link to the correct\n<code>MSVCRT.DLL</code>, <strong>you still need to install the Windows Device Driver\nKit</strong> and change the appropriate property sheets.</p>\n\n</div>\n\n\n        "});