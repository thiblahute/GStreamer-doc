fragment_downloaded_cb({"url": "installing/building-from-source-using-cerbero.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"building-from-source-using-cerbero.md\">\n        <h1 id=\"building-from-source-using-cerbero\">Building from source using Cerbero</h1>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"Warning\" id=\"warning\"> This section is intended for advanced users.</p>\n</blockquote>\n<h2 id=\"build-requirements\">Build requirements</h2>\n<p>The GStreamer build system provides bootstrapping facilities for all\nplatforms, but it still needs a minimum base to bootstrap:</p>\n<ul>\n<li>python &gt; 2.6 and python's <code>argparse</code> module, which is already\nincluded in python2.7.</li>\n<li>git</li>\n</ul>\n<h3 id=\"windows-users\">Windows users</h3>\n<p>Cerbero can be used on Windows using the Msys/MinGW shell (a Unix-like\nshell for Windows). There is a bit of setup that you need to do before\nCerbero can take control.</p>\n<p>You need to install the following programs:</p>\n<ul>\n<li><a href=\"http://www.python.org/getit/releases/2.7/\">Python 2.7</a></li>\n<li><a href=\"http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git\">Git</a> (Select the install option \"Checkout as-is, Commit as-is\" and\ninstall it in a path without spaces, eg: c:\\Git)</li>\n<li><a href=\"https://sourceforge.net/projects/mingw/files/Installer/mingw-get-inst/\">Msys/MinGW</a> (Install it with all the options enabled)</li>\n<li><a href=\"http://www.cmake.org/cmake/resources/software.htm\">CMake</a> (Select the option \"Add CMake in system path for the\ncurrent user\")</li>\n<li><a href=\"http://yasm.tortall.net/Download.html\">Yasm</a> (Download the win32 or win64 version for your platform, name\nit <code>yasm.exe</code>, and place it in your MinGW <code>bin</code> directory,\ntypically, <code>C:\\MinGW\\bin</code>)</li>\n<li><a href=\"http://wix.codeplex.com/releases/view/60102\">WiX 3.5</a></li>\n<li><a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=8279\">Microsoft SDK 7.1</a> (Install the SDK samples and the Visual C++\nCompilers, required to build the DirectShow base classes. Might need\ninstalling the .NET 4 Framework first if the SDK installer doesn't\nfind it)</li>\n<li><a href=\"http://msdn.microsoft.com/en-us/windows/hardware/hh852365\">Windows Driver Kit 7.1.0</a></li>\n</ul>\n<p>Your user ID can't have spaces (eg: John Smith). Paths with spaces are\nnot correctly handled in the build system and msys uses the user ID for\nthe home folder.</p>\n<p>Cerbero must be run in the MinGW shell, which is accessible from the\nmain menu once MinGW is installed.</p>\n<p>The last step is making <code>python</code> and <code>git</code> available from the shell, for\nwhich you will need to create a <code>.profile</code> file. Issue this command from\nwithin the MinGW shell:</p>\n<p><code>echo \"export PATH=\\\"\\$PATH:/c/Python27:/c/Git/bin\\\"\" &gt;&gt; ~/.profile</code></p>\n<p>Using the appropriate paths to where you installed <code>python</code> and <code>git</code></p>\n<p>(Note that inside the shell, / is mapped to c:\\Mingw\\msys\\1.0\u00a0)</p>\n<h3 id=\"os-x-users\">OS X users</h3>\n<p>To use cerbero on OS X you need to install the \"Command Line Tools\" from\nXCode. They are available from the \"Preferences\" dialog under\n\"Downloads\".</p>\n<h3 id=\"ios-developers\">iOS developers</h3>\n<p>If you want to build GStreamer for iOS, you also need the iOS\nSDK. The minimum required iOS SDK version is 6.0 and is included in\n<a href=\"https://developer.apple.com/devcenter/ios/index.action#downloads\">XCode</a> since version 4.</p>\n<h2 id=\"download-the-sources\">Download the sources</h2>\n<p>To build GStreamer, you first need to download <strong>Cerbero</strong>.\nCerbero is a multi-platform build system for Open Source projects that\nbuilds and creates native packages for different platforms,\narchitectures and distributions.</p>\n<p>Get a copy of Cerbero by cloning the git repository:</p>\n<pre><code>git clone git://anongit.freedesktop.org/gstreamer/cerbero\n</code></pre>\n<p>Cerbero can be run uninstalled and for convenience you can create an\nalias in your <code>.bashrc</code> file*.\u00a0*If you prefer to skip this step,\nremember that you need to replace the calls to <code>cerbero</code>\u00a0with\n<code>./cerbero-uninstalled</code>\u00a0in the next steps.</p>\n<pre><code>echo \"alias cerbero='~/git/cerbero/cerbero-uninstalled'\" &gt;&gt; ~/.bashrc\n</code></pre>\n<h2 id=\"setup-environment\">Setup environment</h2>\n<p>After Cerbero and the base requirements are in place, you need to setup\nthe build environment.</p>\n<p>Cerbero reads the configuration file <code>$HOME/.cerbero/cerbero.cbc</code> to\ndetermine the build options. This file is a python code which allows\noverriding/defining some options.</p>\n<p>If the file does not exist, Cerbero will try to determine the distro you\nare running and will use default build options such as the default build\ndirectory. The default options should work fine on the supported\ndistributions.</p>\n<p>An example configuration file with detailed comments can be found <a href=\"http://www.freedesktop.org/software/gstreamer-sdk/cerbero.cbc.template\">here</a></p>\n<p>To fire up the bootstrapping process, go to the directory where you\ncloned/unpacked Cerbero and type:</p>\n<pre><code>cerbero bootstrap\n</code></pre>\n<p>Enter the superuser/root password when prompted.</p>\n<p>The bootstrap process will then install all packages required to build\nGStreamer.</p>\n<h2 id=\"build-gstreamer\">Build GSTreamer</h2>\n<p>To generate GStreamer binaries, use the following command:</p>\n<pre><code>cerbero package gstreamer-1.0\n</code></pre>\n<p>This should build all required GStreamer components and create packages for\nyour distribution at the Cerbero source directory.</p>\n<p>A list of supported packages to build can be retrieved using:</p>\n<pre><code>cerbero list-packages\n</code></pre>\n<p>Packages are composed of 0 (in case of a meta package) or more\ncomponents that can be built separately if desired. The components are\ndefined as individual recipes and can be listed with:</p>\n<pre><code>cerbero list\n</code></pre>\n<p>To build an individual recipe and its dependencies, do the following:</p>\n<pre><code>cerbero build &lt;recipe_name&gt;\n</code></pre>\n<p>Or to build or force a rebuild of a recipe without building its\ndependencies use:</p>\n<pre><code>cerbero buildone &lt;recipe_name&gt;\n</code></pre>\n<p>To wipe everything and start from scratch:</p>\n<pre><code>cerbero wipe\n</code></pre>\n<p>Once built, the output of the recipes will be installed at the prefix\ndefined in the Cerbero configuration file <code>$HOME/.cerbero/cerbero.cbc</code>\nor at <code>$HOME/cerbero/dist</code> if no prefix is defined.</p>\n<h3 id=\"build-a-single-project-with-gstreamer\">Build a single project with GStreamer</h3>\n<p>Rebuilding the whole GStreamer is relatively fast on Linux and OS X, but it\ncan be very slow on Windows, so if you only need to rebuild a single\nproject (eg: gst-plugins-good to patch qtdemux) there is a much faster\nway of doing it. You will need to follow the steps detailed in this\npage, but skipping the step \"<strong>Build GStreamer</strong>\", and installing the\nGStreamer's development files as explained in <a href=\"index.html\">Installing GStreamer</a>.</p>\n<p>By default, Cerbero uses as prefix a folder in the user directory with\nthe following schema ~/cerbero/dist/$platform_$arch, but for GStreamer\nwe must change this prefix to use its installation directory. This can\nbe done with a custom configuration file named <em>custom.cbc</em>:</p>\n<pre><code># For Windows x86\nprefix='/c/gstreamer/1.0/x86/'\n\n# For Windows x86_64\n#prefix='/c/gstreamer/1.0/x86_64'\n\n# For Linux\n#prefix='/opt/gstreamer'\n\n# For OS X\n#prefix='/Library/Frameworks/GStreamer.framework/Versions/1.0'\n</code></pre>\n<p>The prefix path might not be writable by your current user. Make sure\nyou fix it before, for instance with:</p>\n<pre><code>$ sudo chown -R &lt;username&gt; /Library/Frameworks/GStreamer.framework/\n</code></pre>\n<p>Cerbero has a shell command that starts a new shell with all the\nenvironment set up to target GStreamer. You can start a new shell using\nthe installation prefix defined in *custom.cbc\u00a0*with the following\ncommand:</p>\n<pre><code>$ cerbero -c custom.cbc shell\n</code></pre>\n<p>Once you are in Cerbero's shell you can compile new projects targeting\nGStreamer using the regular build process:</p>\n<pre><code>$ git clone git://anongit.freedesktop.org/gstreamer/gst-plugins-good; cd gst-plugins-good\n$ sh autogen.sh --disable-gtk-doc --prefix=&lt;prefix&gt;\n$ make -C gst/isomp4\n</code></pre>\n<h3 id=\"crosscompilation-of-gstreamer\">Cross-compilation of GStreamer</h3>\n<p>Cerbero can be used to cross-compile GStreamer to other platforms like\nAndroid or Windows. You only need to use a configuration file that sets\nthe target platform, but we also provide a set of of pre-defined\nconfiguration files for the supported platforms (you will find them in\nthe <code>config</code> folder with the <code>.cbc</code> extension</p>\n<h4 id=\"android\">Android</h4>\n<p>You can cross-compile GStreamer for Android from a Linux host using the\nconfiguration file <code>config/cross-android.cbc</code>. Replace all the previous\ncommands with:</p>\n<pre><code>cerbero -c config/cross-android.cbc &lt;command&gt;\n</code></pre>\n<h4 id=\"windows\">Windows</h4>\n<p>GStreamer can also be cross-compiled to Windows from Linux, but you should\nonly use it for testing purpose. The DirectShow plugins cannot be\ncross-compiled yet and WiX can't be used with Wine yet, so packages can\nonly be created from Windows.</p>\n<p>Replace all the above commands for Windows 32bits with:</p>\n<pre><code>cerbero -c config/cross-win32.cbc &lt;command&gt;\n</code></pre>\n<p>Or with using the following for Windows 64bits:</p>\n<pre><code>cerbero -c config/cross-win64.cbc &lt;command&gt;\n</code></pre>\n<h4 id=\"ios\">iOS</h4>\n<p>To cross compile for iOS from OS X, use the configuration file\n<code>config/cross-ios-universal.cbc</code>. Replace all previous commands with:</p>\n<pre><code>cerbero -c config/cross-ios-universal.cbc &lt;command&gt;\n</code></pre>\n\n        \n\n    </div>\n\n\n        "});