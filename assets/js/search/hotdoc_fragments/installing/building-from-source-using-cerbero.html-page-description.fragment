fragment_downloaded_cb({"url": "installing/building-from-source-using-cerbero.html#page-description", "fragment": "This section is intended for advanced users. \nThe GStreamer build system provides bootstrapping facilities for all platforms but it still needs a minimum base to bootstrap \nCerbero can be used on Windows using the Msys MinGW shell a Unix like shell for Windows There is a bit of setup that you need to do before Cerbero can take control. \nYou need to install the following programs \nYour user ID can t have spaces eg John Smith Paths with spaces are not correctly handled in the build system and msys uses the user ID for the home folder. \nCerbero must be run in the MinGW shell which is accessible from the main menu once MinGW is installed. \nThe last step is making python and git available from the shell for which you will need to create a profile file. Issue this command from within the MinGW shell \necho export PATH PATH c Python27 c Git bin profile \nUsing the appropriate paths to where you installed python and git \nNote that inside the shell is mapped to c Mingw msys \nTo use cerbero on OS X you need to install the Command Line Tools from XCode. They are available from the Preferences dialog under Downloads \nIf you want to build GStreamer for iOS you also need the iOS SDK. The minimum required iOS SDK version is and is included in XCode since version \nTo build GStreamer you first need to download Cerbero. Cerbero is a multi platform build system for Open Source projects that builds and creates native packages for different platforms architectures and distributions. \nGet a copy of Cerbero by cloning the git repository \nCerbero can be run uninstalled and for convenience you can create an alias in your bashrc file If you prefer to skip this step remember that you need to replace the calls to cerbero with cerbero uninstalled in the next steps. \nAfter Cerbero and the base requirements are in place you need to setup the build environment. \nCerbero reads the configuration file HOME cerbero cerbero.cbc to determine the build options. This file is a python code which allows overriding defining some options. \nIf the file does not exist Cerbero will try to determine the distro you are running and will use default build options such as the default build directory. The default options should work fine on the supported distributions. \nAn example configuration file with detailed comments can be found here \nTo fire up the bootstrapping process go to the directory where you cloned unpacked Cerbero and type \nEnter the superuser root password when prompted. \nThe bootstrap process will then install all packages required to build GStreamer. \nTo generate GStreamer binaries use the following command \nThis should build all required GStreamer components and create packages for your distribution at the Cerbero source directory. \nA list of supported packages to build can be retrieved using \nPackages are composed of in case of a meta package or more components that can be built separately if desired. The components are defined as individual recipes and can be listed with \nTo build an individual recipe and its dependencies do the following \nOr to build or force a rebuild of a recipe without building its dependencies use \nTo wipe everything and start from scratch \nOnce built the output of the recipes will be installed at the prefix defined in the Cerbero configuration file HOME cerbero cerbero.cbc or at HOME cerbero dist if no prefix is defined. \nRebuilding the whole GStreamer is relatively fast on Linux and OS X but it can be very slow on Windows so if you only need to rebuild a single project eg gst plugins good to patch qtdemux there is a much faster way of doing it. You will need to follow the steps detailed in this page but skipping the step Build GStreamer and installing the GStreamer s development files as explained in Installing GStreamer. \nBy default Cerbero uses as prefix a folder in the user directory with the following schema cerbero dist platform_ arch but for GStreamer we must change this prefix to use its installation directory. This can be done with a custom configuration file named custom.cbc \nThe prefix path might not be writable by your current user. Make sure you fix it before for instance with \nCerbero has a shell command that starts a new shell with all the environment set up to target GStreamer. You can start a new shell using the installation prefix defined in custom.cbc with the following command \nOnce you are in Cerbero s shell you can compile new projects targeting GStreamer using the regular build process \nCerbero can be used to cross compile GStreamer to other platforms like Android or Windows. You only need to use a configuration file that sets the target platform but we also provide a set of of pre defined configuration files for the supported platforms you will find them in the config folder with the cbc extension \nYou can cross compile GStreamer for Android from a Linux host using the configuration file config cross android.cbc. Replace all the previous commands with \nGStreamer can also be cross compiled to Windows from Linux but you should only use it for testing purpose. The DirectShow plugins cannot be cross compiled yet and WiX can t be used with Wine yet so packages can only be created from Windows. \nReplace all the above commands for Windows bits with \nOr with using the following for Windows bits \nTo cross compile for iOS from OS X use the configuration file config cross ios universal.cbc. Replace all previous commands with \n"});