fragment_downloaded_cb({"url": "installing/for-android-development.html#page-description", "fragment": "All versions starting from Gingerbread are supported \nThe development machine is where you will develop your Android application which then you will deploy on the target machine which should obviously be an Android device. \nThe development machine can either be a Linux Mac OS X or Windows and needs to have installed \nBefore continuing make sure you can compile and run the samples included in the Android NDK and that you understand how the integration of C and Java works via the Java Native Interface JNI Besides the Android NDK documentation you can find some useful Android JNI tips here. \nThe GStreamer project provides prebuilt binaries you should download the latest version and unzip it into any folder of your choice. \nIn the process of building GStreamer enabled Android applications some tools will need to know where you installed the GStreamer binaries. You must define an environment variable called GSTREAMER_ROOT_ANDROID and point it to the folder where you extracted the GStreamer binaries. This environment variable must be available at build time so maybe you want to make it available system wide by adding it to your profile file on Linux and Mac or to the Environment Variables in the System Properties dialog on Windows \nPoint GSTREAMER_ROOT_ANDROID to the folder where you unzipped the binaries. \nIf you plan to use Android Studio and do not want to define this environment variable globally you can set it inside the build.gradle. \nIf you plan to use Eclipse and do not want to define this environment variable globally you can set it inside Eclipse. Go to Window Preferences C C Build Build Variables and define GSTREAMER_ROOT_ANDROID there. \nThe NDK support in the Gradle build system used by Android Studio is still in beta so the recommended way to build using the GStreamer SDK is still to use ndk build \nThere are two routes to use GStreamer in an Android application Either writing your GStreamer code in Java or in C. \nAndroid applications are mainly written in Java so adding GStreamer code to them in the same language is a huge advantage. However this requires using language bindings for the GStreamer API which are not complete yet. In the meantime this documentation will use Java for the User Interface UI part and C for the GStreamer code. Both parts interact through JNI. \nThe tutorials code are in the gst docs in the examples tutorials folder. \nThere are a few Android specific tutorials in the tutorials folder. Each tutorial is a folder containing source code in Java and C and the resource files required to build a complete Android application. \nThe rest of the GStreamer tutorials basic and playback tutorials cannot be run on Android without modification. \nAndroid projects with GStreamer support are built like conventional Android NDK projects so the instructions at the Android NDK home can be followed \nMake sure you have installed the ADT and NDK plugins listed in the prerequisites section and that they are both aware of the location of the Android SDK and NDK respectively. \nImport a tutorial into the Eclipse workspace File New Project Android Project from Existing Code and select the folder called android tutorial \nAfter reading in the project and generating some extra files and folders Eclipse might complain about missing files. This is normal we are not finished yet. \nProvide native development support by activating the NDK plugin Right click on the project in the Project Explorer this should be the top most folder called com.gst_sdk_tutorials.tutorial_1.Tutorial1 Android tools Add Native Support Here the NDK plugin asks for a library name. This is irrelevant and any valid file name will do. Accept. \nEclipse will still complain about errors in the code. This is normal. Some files are missing because they are generated during the first build run. \nBuild the project Project Build Project. If you bring up the Eclipse Console you should see some progress messages. Once finished the missing files will appear and all error messages should be gone. The project is now ready to run. Hit Run Run. \nA new application called Android tutorial should now be available on your device with the GStreamer logo. If you want to run the tutorial in an Android Virtual Device AVD make sure to create the device with support for audio playback and GPU Emulation to enable OpenGL ES \nNote that on Windows this procedure requires a working Cygwin shell as explained in the Android NDK System Requirements \nFor each tutorial move to its folder and run \nWhere X is one of the targets available in your system the ones you installed with the SDK manager Make sure to use a target with at least API level \nTo get a list of all available targets in your system issue this command \nThe update project command generates the build.xml file needed by the build system. You only need to perform this action once per project. \nTo build the C part just call \nA few lines in the Android.mk file reviewed later pull up the necessary machinery to compile the GStreamer bits and generate the Shared Object libraries so that the Java code can use as native methods. \nFinally compile the Java code with \nAnd install on the device with \nThe r switch allows the installer to overwrite previous versions. Otherwise you need to manually uninstall previous versions of your application. \nA new application called Android tutorial should now be available on your device with the GStreamer logo. If you want to run the tutorial in an Android Virtual Device AVD make sure to create the device with support for audio playback and GPU Emulation to enable OpenGL ES \nWindows linkage problems \nDue to problems related to the standard linker Google s Gold Linker is used to build GStreamer applications. Unfortunately the Android NDK toolchain for Windows does not include the gold linker and the standard one has to be used. \nIf you observe linkage problems you can replace the linker in your Android NDK with the gold one from this project. Download the android ndk r8b ma windows.7z file extract android ndk r8b toolchains arm linux androideabi prebuilt windows arm linux androideabi bin ld.exe only this file is needed and overwrite the one in the same folder in your Android NDK installation. You might need the free Zip archiving utility \nCreate a normal NDK project either from the command line as described in the Android NDK home or use Eclipse File New Project Android Application Project and once the wizard is complete right click on the project Android Tools Add Native Support \nTo add GStreamer support you only need to modify the jni Android.mk file. This file describes the native files in your project and its barebones structure as auto generated by Eclipse is \nAndroid.mk \nWhere line specifies the name of the so file that will contain your native code and line states all source files that compose your native code separated by spaces. \nAdding GStreamer support only requires adding these lines \nAndroid.mk with GStreamer support \nWhere line specifies an extra library to be included in the project libgstreamer_android.so. This library contains all GStreamer code tailored for your application s needs as shown below. \nLine specifies additional system libraries in this case in order to access android specific functionality. \nLines and simply define some convenient macros. \nLine lists the plugins you want statically linked into libgstreamer_android.so. Listing only the ones you need makes your application smaller. \nLine is required to have HTTPS TLS support from GStreamer through the souphttpsrc element. \nLine defines which GStreamer libraries your application requires. \nFinally line includes the make files which perform the rest of the magic. \nListing all desired plugins can be cumbersome so they have been grouped into categories which can be used by including the plugins.mk file and used as follows \nBuild and run your application as explained in the Building the tutorials section. \n"});