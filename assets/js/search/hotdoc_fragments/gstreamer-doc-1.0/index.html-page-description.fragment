fragment_downloaded_cb({"url": "gstreamer-doc-1.0/index.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"index.md\">\n<h1 id=\"gstreamer-core\">GStreamer Core</h1>\n<p>GStreamer is a streaming media framework. It uses graphs of elements\nwhich operate on data. The functionality to process media is provided by\nplug-ins which provide features like elements, typefinding, and so on.\nThis allows new functionality to be added simply by installing new\nplug-ins.</p>\n<p>GStreamer is cross-platform and works on most UNIX-like platforms as\nwell as Windows. It is released under the GNU Library General Public\nLicense (GNU LGPL).</p>\n<p><img src=\"images/gst-universe.svg\" alt=\" Relation between gstreamer core objects. \" id=\"relation-between-gstreamer-core-objects\"></p>\n<h2 id=\"building-on-unix\">Building on UNIX</h2>\n<p>On UNIX, GStreamer uses the standard GNU build system, using autoconf\nfor package configuration and resolving portability issues, automake for\nbuilding makefiles that comply with the GNU Coding Standards, and\nlibtool for building shared libraries on multiple platforms. The normal\nsequence for compiling and installing the GStreamer library is thus:\n<code>./configure</code> <code>make</code> <code>make install</code></p>\n<p>The standard options provided by GNU autoconf may be passed to the\n<code>configure</code> script. Please see the autoconf documentation or run\n<code>./configure --help</code> for information about the standard options.</p>\n<p>In addition there are several options to activate or deactivate\nfeatures. E.g. passing <code>--disable-gst-debug</code> to <code>configure</code> will turn\nthe debugging subsystem into a non-functional stub and remove all macro\nbased invocations from within the library (and anything compiled against\nthe library afterwards.)</p>\n<p>If library size matters and one builds in a controlled environment, it\nis also possible to totally remove subsystem code. This is intentionally\nnot offered as a configure option as it causes an ABI break. Code built\nagainst a version of GStreamer without these modifications needs to be\nrecompiled.</p>\n<p><code>make CFLAGS=\"-DGST_REMOVE_DEPRECATED -DGST_REMOVE_DISABLED\"</code></p>\n<ul>\n<li>\n<p><code>GST_REMOVE_DEPRECATED</code> - Omit deprecated functions from the\nlibrary.</p>\n</li>\n<li>\n<p><code>GST_REMOVE_DISABLED</code> - Omit stubs for disabled subsystems from the\nlibrary.</p>\n</li>\n</ul>\n<h2 id=\"building-gstreamer-applications\">Building GStreamer Applications</h2>\n<p>Applications and libraries can use <code>pkg-config</code> to get all the needed\ncompiler and linker flags to build against GStreamer. Please note that\nGStreamer is split into several libraries itself.\n<code>pkg-config --list-all | grep gstreamer</code> will list the available\nlibraries.</p>\n<h2 id=\"running-and-debugging-gstreamer-applications\">Running and debugging GStreamer Applications</h2>\n<h3 id=\"environment-variables\">Environment variables</h3>\n<p>GStreamer inspects a few of environment variables in addition to\nstandard variables like LANG, PATH or HOME.</p>\n<p><strong>GST_PLUGIN_SYSTEM_PATH, GST_PLUGIN_SYSTEM_PATH_1_0.</strong></p>\n<p>This environment variable can be set to a colon-separated list of paths\n(or semicolon-separated list on Windows). If this variable is not set,\nGStreamer will fill in this list for you with</p>\n<ul>\n<li>\n<p>plug-ins in the user's home directory, or rather the user's \"data\nhome\" directory according to the xdg base dir specification. Usually\nthis will be a directory called <code>plugins</code> inside the\n<code>.local/share/gstreamer-GST_API_VERSION</code> directory in the user's\nhome directory by default, though this search path may change if the\nXDG_DATA_HOME environment variable is set.</p>\n</li>\n<li>\n<p>plug-ins installed system-wide. On this system, they are stored in\n``.</p>\n</li>\n</ul>\n<p>GStreamer will scan these paths for GStreamer plug-ins. These plug-ins\nwill be loaded after the plug-ins in the GST_PLUGIN_PATH variable\nbelow. The paths are scanned in the given order. This allows a user to\noverride system-installed plug-ins with his own versions.</p>\n<p>The GST_PLUGIN_SYSTEM_PATH_1_0 variant is useful if both the old\nGStreamer 0.10 version and the new GStreamer 1.0 version need to be\npointed to new plugin paths. The latter will use the _1_0 variant over\nthe non-versioned one if it is set.</p>\n<p>Setting this variable to an empty string will cause GStreamer not to\nscan any system paths at all for plug-ins. This can be useful if you're\nrunning uninstalled (for development purposes) or while running\ntestsuites.</p>\n<p><strong>GST_PLUGIN_PATH, GST_PLUGIN_PATH_1_0.</strong></p>\n<p>This environment variable can be set to a colon-separated list of paths\n(or a semicolon-separated list on Windows). GStreamer will scan these\npaths for GStreamer plug-ins. These plug-ins will be loaded in addition\nto, and before, the plug-ins in the system paths.</p>\n<p>The GST_PLUGIN_PATH_1_0 variant is useful if both the old GStreamer\n0.10 version and the new GStreamer 1.0 version need to be pointed to new\nplugin paths. The latter will use the _1_0 variant over the\nnon-versioned one if it is set.</p>\n<p><strong>GST_DEBUG.</strong></p>\n<p>If GStreamer has been configured with <code>--enable-gst-debug=yes</code>, this\nvariable can be set to a list of debug options, which cause GStreamer to\nprint out different types of debugging information to stderr.</p>\n<p>The variable takes a comma-separated list of \"category_name:level\"\npairs to set specific levels for the individual categories. The level\nvalue ranges from 0 (nothing) to 9 (MEMDUMP).</p>\n<p>1 - <code>ERROR</code></p>\n<p>:   Logs all fatal errors. These are errors that do not allow the core\nor elements to perform the requested action. The application can\nstill recover if programmed to handle the conditions that triggered\nthe error.</p>\n<p>2 - <code>WARNING</code></p>\n<p>:   Logs all warnings. Typically these are non-fatal, but user-visible\nproblems are expected to happen.</p>\n<p>3 - <code>FIXME</code></p>\n<p>:   Logs all fixme messages. Fixme messages are messages that indicate\nthat something in the executed code path is not fully implemented or\nhandled yet. The purpose of this message is to make it easier to\nspot incomplete/unfinished pieces of code when reading the debug\nlog.</p>\n<p>4 - <code>INFO</code></p>\n<p>:   Logs all informational messages. These are typically used for events\nin the system that only happen once, or are important and rare\nenough to be logged at this level.</p>\n<p>5 - <code>DEBUG</code></p>\n<p>:   Logs all debug messages. These are general debug messages for events\nthat happen only a limited number of times during an object's\nlifetime; these include setup, teardown, change of parameters, ...</p>\n<p>6 - <code>LOG</code></p>\n<p>:   Logs all log messages. These are messages for events that happen\nrepeatedly during an object's lifetime; these include streaming and\nsteady-state conditions.</p>\n<p>7 - <code>TRACE</code></p>\n<p>:   Logs all trace messages. These messages for events that happen\nrepeatedly during an object's lifetime such as the ref/unref cycles.</p>\n<p>9 - <code>MEMDUMP</code></p>\n<p>:   Log all memory dump messages. Memory dump messages are used to log\n(small) chunks of data as memory dumps in the log. They will be\ndisplayed as hexdump with ASCII characters.</p>\n<p>The category_name can contain \"<code>*\"</code> as a wildcard.</p>\n<p>For example, setting GST_DEBUG to <code>GST_AUTOPLUG:6,GST_ELEMENT_*:4</code>,\nwill cause the <code>GST_AUTOPLUG</code> category to be logged at full <code>LOG</code> level,\nwhile all categories starting with <code>GST_ELEMENT_</code> will be logged at\n<code>INFO</code> level.</p>\n<p>To get all possible debug output, set GST_DEBUG to <code>*:9</code>. For debugging\npurposes a <code>*:6</code> debug log is usually the most useful, as it contains\nall important information, but hides a lot of noise such as refs/unrefs.\nFor bug reporting purposes, a <code>*:6</code> log is also what will be requested\nusually. It's often also worth running with <code>*:3</code> to see if there are\nany non-fatal errors or warnings that might be related to the problem at\nhand.</p>\n<p>Since GStreamer 1.2 it is also possible to specify debug levels by name,\ne.g. GST_DEBUG=*:WARNING,<em>audio</em>:LOG</p>\n<p><strong>GST_DEBUG_NO_COLOR.</strong></p>\n<p>Set this environment variable to any value (\"1\" typically) to switch off\ncolouring in GST_DEBUG output. This has the same effect as specifying\nthe <code>--gst-debug-no-color</code> or <code>--gst-debug-color-mode</code>=off command line\noption to well-behaved GStreamer applications (ie. those that pass\ncommand-line options correctly to GStreamer). This is particularly\nuseful to reduce the size of debug output and also allows for the output\nto be compressed much better than with colours turned on.</p>\n<p>Has the same effect as setting GST_DEBUG_COLOR_MODE environment\nvariable to \"off\".</p>\n<p><strong>GST_DEBUG_COLOR_MODE.</strong></p>\n<p>Set this environment variable to change log colouring in GST_DEBUG\noutput. Possible values:</p>\n<p><code>on</code></p>\n<p>:   Enables debug log output coloring. Uses default coloring method for\ncurrent platform. This is the default.</p>\n<p><code>off</code></p>\n<p>:   Disables debug log output coloring. This has the same effect as\nspecifying the <code>--gst-debug-color-mode</code>=off command line option to\nwell-behaved GStreamer applications (ie. those that pass\ncommand-line options correctly to GStreamer). This is particularly\nuseful to reduce the size of debug output and also allows for the\noutput to be compressed much better than with colours turned on.</p>\n<pre><code>Has the same effect as setting GST_DEBUG_NO_COLOR environment\nvariable to any value.\n</code></pre>\n<p><code>auto</code></p>\n<p>:   Same as <code>on</code>.</p>\n<p><code>disable</code></p>\n<p>:   Same as <code>off</code>.</p>\n<p><code>unix</code></p>\n<p>:   Enables debug log output coloring and forces the use of UNIX termial\ncodes for coloring, even if this method is not normally used on\ncurrent platform. This has the same effect as specifying the\n<code>--gst-debug-color-mode</code>=unix command line option to well-behaved\nGStreamer applications (ie. those that pass command-line options\ncorrectly to GStreamer). This is particularly useful to dump debug\noutput into a file on non-UNIX platforms to be sent to developers\nwho have viewers that support UNIX terminal codes.</p>\n<p><strong>GST_DEBUG_OPTIONS.</strong></p>\n<p>This environment variable can be used to tweak the behaviour of the\ndebugging system. Currently the only options supported are \"pretty-tags\"\nand \"full-tags\". In \"pretty-tags\" mode (the default), taglists in the\ndebug log will be serialized so that only the first few and last few\nbytes of a buffer-type tag will be serialized into the log, to avoid\ndumping hundreds of lines of useless output into the log in case of\nlarge image tags and the like.</p>\n<p><strong>GST_DEBUG_DUMP_DOT_DIR.</strong></p>\n<p>Set this environment variable to a path to turn on all\n#GST_DEBUG_BIN_TO_DOT_FILE or\n#GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS calls and have the dot files\nin that location.</p>\n<p>This will only work if the application in question makes these calls in\nstrategic places (like when the pipeline state changes or an error\noccurs). gst-launch-GST_API_VERSION is one such application.</p>\n<p>These .dot files can then be turned into images using the 'dot' utility\nfrom the graphviz set of tools, like this:\n<code>dot foo.dot -Tsvg -o foo.svg</code> or <code>dot foo.dot -Tpng -o foo.png</code> or\n<code>dot foo.dot -Tjpg -o foo.jpg</code>.</p>\n<p>There is also a utility called <code>xdot</code> which allows you to view the dot\nfile directly without converting it first.</p>\n<p><strong>GST_REGISTRY, GST_REGISTRY_1_0.</strong></p>\n<p>Set this environment variable to make GStreamer use a different file for\nthe plugin cache / registry than the default one. This is useful when\noperating in a separate environment which should not affect the default\ncache in the user's home directory.</p>\n<p><strong>GST_REGISTRY_FORK.</strong></p>\n<p>Set this environment variable to \"no\" to prevent GStreamer from forking\non startup in order to update the plugin registry. This is useful for\ndebugging purposes, but should not be used under normal circumstances,\nsince it means that plugins may be loaded into memory even if they are\nnot needed by the application.</p>\n<p><strong>GST_REGISTRY_UPDATE.</strong></p>\n<p>Set this environment variable to \"no\" to prevent GStreamer from updating\nthe plugin registry. This is useful for embedded device which is not\nupdating the plugins frequently, it will save time when doing\ngst_init().</p>\n<p><strong>GST_TRACE.</strong></p>\n<p>Enable memory allocation tracing. Most GStreamer objects have support\nfor tracing the number of unfreed objects and their memory pointers.</p>\n<p>The variable takes a comma-separated list of tracing options to enable.</p>\n<p>live</p>\n<p>:   Counts all live objects and dumps an overview of the number of\nunfreed objects at program exit.</p>\n<p>mem-live</p>\n<p>:   Keep track of the unfreed memory pointers and dump an overview of\nall unfreed memory at program exit. Together with a level 9 debug\nlog this can be used to follow the lifecycle of leaked objects in\norder to track down where they are leaked. This can be useful for\ndebugging memory leaks in situations where tools such as valgrind\nare not available, or not an option.</p>\n<p>Use <code>all</code> to enable all tracing flags.</p>\n<p><strong>GST_DEBUG_FILE.</strong></p>\n<p>Set this variable to a file path to redirect all GStreamer debug\nmessages to this file. If left unset, debug messages with be output unto\nthe standard error.</p>\n<p><strong>ORC_CODE.</strong></p>\n<p>Useful Orc environment variable. Set ORC_CODE=debug to enable debuggers\nsuch as gdb to create useful backtraces from Orc-generated code. Set\nORC_CODE=backup or ORC_CODE=emulate if you suspect Orc's SIMD code\ngenerator is producing incorrect code (Quite a few important GStreamer\nplugins like videotestsrc, audioconvert or audioresample use Orc). One\ncan also combine flags like ORC_CODE=backup,debug.</p>\n<p><strong>G_DEBUG.</strong></p>\n<p>Useful GLib environment variable. Set G_DEBUG=fatal_warnings to make\nGStreamer programs abort when a critical warning such as an assertion\nfailure occurs. This is useful if you want to find out which part of the\ncode caused that warning to be triggered and under what circumstances.\nSimply set G_DEBUG as mentioned above and run the program in gdb (or\nlet it core dump). Then get a stack trace in the usual way.</p>\n<p><strong>G_SLICE.</strong></p>\n<p>Useful GLib environment variable. Set G_SLICE=always-malloc when\nrunning GStreamer programs in valgrind, or debugging memory leaks with\nother tools. See the GLib API reference for more details.</p>\n<p><strong>GST_TAG_ENCODING.</strong></p>\n<p>Try this character encoding first for tag-related strings where the\nencoding is not defined and which are not UTF-8 already. By default the\ncurrent locale will be tried (if not UTF-8).</p>\n<p><strong>GST_TAG_ID3_ENCODING.</strong></p>\n<p>Try this character encoding first for ID3 tag-related strings where the\nencoding is not defined and which are not UTF-8 already. By default the\ncurrent locale will be tried (if not UTF-8).</p>\n<p><strong>GST_TAG_ID3V1_ENCODING.</strong></p>\n<p>Try this character encoding first for ID3v1 tag-related strings where\nthe encoding does not look like UTF-8.</p>\n<p><strong>GST_GL_WINDOW.</strong></p>\n<p>Influences the window system to use by the GStreamer OpenGL library.\nCommon values are 'x11', 'wayland', 'win32' or 'cocoa'.</p>\n<p><strong>GST_GL_PLATFORM.</strong></p>\n<p>Influences the OpenGL platform to use by the GStreamer OpenGL library.\nCommon values are 'egl', 'glx', 'wgl' or 'cgl'.</p>\n<p><strong>GST_GL_API.</strong></p>\n<p>Influences the OpenGL API requested by the OpenGL platform. Common\nvalues are 'opengl' or 'gles2'.</p>\n\n</div>\n\n\n        "});