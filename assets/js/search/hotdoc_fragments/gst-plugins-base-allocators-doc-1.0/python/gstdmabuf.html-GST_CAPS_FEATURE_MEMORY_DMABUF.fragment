fragment_downloaded_cb({"url": "gst-plugins-base-allocators-doc-1.0/python/gstdmabuf.html#GST_CAPS_FEATURE_MEMORY_DMABUF", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"since:1.11;\" id=\"GST_CAPS_FEATURE_MEMORY_DMABUF\">\n\t\t<h3 class=\"constant\" id=\"gstallocatorscaps_feature_memory_dmabuf\">\n\tGstAllocators.CAPS_FEATURE_MEMORY_DMABUF\n</h3>\n\n\t\t<p>Constant that defines the caps feature name for DMA buffer sharing.</p>\n<p>It has to be used for non-mappable dma-buf only, i.e. when the underlying\nmemory is not mappable to user space. Or when the mapped memory contains\nnon meaningful data. It can be the case for protected content or when the\nuser wants explicitly avoid any software post processing.</p>\n<p>In these cases all elements between the exported and the importer has to work\nin passthrough mode. This is done by adding this caps feature.</p>\n<p>When the memory is mappable for read and write requests then it is assumes\nto be a fast path and so this caps feature should not be used. Though\naccording to the dma-buf protocal, while it is mapped it prevents the\nexporter to migrate the buffer.</p>\n<p>This caps feature should not serve at all the purpose of selecting the\n<em>GST_ALLOCATOR_DMABUF</em> allocator during caps negotiation.\nWhen the exporter is the upstream element from the importer point of view,\nthe exporter should try to map the dma buffer at runtime (preferrably during\ndecide_allocation phase). When it succeeds for <a href=\"../../libgstreamer-doc-1.0/c/gstmemory.html#GST_MAP_READWRITE\">Gst.MAP_READWRITE</a> this caps\nfeature should not be used. This allows scalers, color converts and any image\nprocessing filters to work directly on the dma buffer.\nIn this case the importer element should check all incomming memory using\n<a href=\"../../gst-plugins-base-allocators-doc-1.0/python/gstdmabuf.html#gst_is_dmabuf_memory\">GstAllocators.is_dmabuf_memory</a>.</p>\n\n\n</div>\n\n\n\n"});