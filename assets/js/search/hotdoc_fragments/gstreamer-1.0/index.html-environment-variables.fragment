fragment_downloaded_cb({"url": "gstreamer-1.0/index.html#environment-variables", "fragment": "Environment variables \nGStreamer inspects a few of environment variables in addition to standard variables like LANG PATH or HOME. \nGST_PLUGIN_SYSTEM_PATH GST_PLUGIN_SYSTEM_PATH_1_0. \nThis environment variable can be set to a colon separated list of paths or semicolon separated list on Windows If this variable is not set GStreamer will fill in this list for you with \nplug ins in the user s home directory or rather the user s data home directory according to the xdg base dir specification. Usually this will be a directory called plugins inside the local share gstreamer GST_API_VERSION directory in the user s home directory by default though this search path may change if the XDG_DATA_HOME environment variable is set. \nplug ins installed system wide. On this system they are stored in GST_PLUGINS_DIR. \nGStreamer will scan these paths for GStreamer plug ins. These plug ins will be loaded after the plug ins in the GST_PLUGIN_PATH variable below. The paths are scanned in the given order. This allows a user to override system installed plug ins with his own versions. \nThe GST_PLUGIN_SYSTEM_PATH_1_0 variant is useful if both the old GStreamer version and the new GStreamer version need to be pointed to new plugin paths. The latter will use the _1_0 variant over the non versioned one if it is set. \nSetting this variable to an empty string will cause GStreamer not to scan any system paths at all for plug ins. This can be useful if you re running uninstalled for development purposes or while running testsuites. \nGST_PLUGIN_PATH GST_PLUGIN_PATH_1_0. \nThis environment variable can be set to a colon separated list of paths or a semicolon separated list on Windows GStreamer will scan these paths for GStreamer plug ins. These plug ins will be loaded in addition to and before the plug ins in the system paths. \nThe GST_PLUGIN_PATH_1_0 variant is useful if both the old GStreamer version and the new GStreamer version need to be pointed to new plugin paths. The latter will use the _1_0 variant over the non versioned one if it is set. \nGST_DEBUG. \nIf GStreamer has been configured with enable gst debug yes this variable can be set to a list of debug options which cause GStreamer to print out different types of debugging information to stderr. \nThe variable takes a comma separated list of category_name level pairs to set specific levels for the individual categories. The level value ranges from nothing to MEMDUMP \nThe category_name can contain as a wildcard. \nFor example setting GST_DEBUG to GST_AUTOPLUG GST_ELEMENT_ will cause the GST_AUTOPLUG category to be logged at full LOG level while all categories starting with GST_ELEMENT_ will be logged at INFO level. \nTo get all possible debug output set GST_DEBUG to For debugging purposes a debug log is usually the most useful as it contains all important information but hides a lot of noise such as refs unrefs. For bug reporting purposes a log is also what will be requested usually. It s often also worth running with to see if there are any non fatal errors or warnings that might be related to the problem at hand. \nSince GStreamer it is also possible to specify debug levels by name e.g. GST_DEBUG WARNING audio LOG \nGST_DEBUG_NO_COLOR. \nSet this environment variable to any value typically to switch off colouring in GST_DEBUG output. This has the same effect as specifying the gst debug no color or gst debug color mode off command line option to well behaved GStreamer applications ie. those that pass command line options correctly to GStreamer This is particularly useful to reduce the size of debug output and also allows for the output to be compressed much better than with colours turned on. \nHas the same effect as setting GST_DEBUG_COLOR_MODE environment variable to off \nGST_DEBUG_COLOR_MODE. \nSet this environment variable to change log colouring in GST_DEBUG output. Possible values \non Enables debug log output coloring. Uses default coloring method for current platform. This is the default. \noff Disables debug log output coloring. This has the same effect as specifying the gst debug color mode off command line option to well behaved GStreamer applications ie. those that pass command line options correctly to GStreamer This is particularly useful to reduce the size of debug output and also allows for the output to be compressed much better than with colours turned on. \nHas the same effect as setting GST_DEBUG_NO_COLOR environment variable to any value. \nauto Same as on. \ndisable Same as off. \nunix Enables debug log output coloring and forces the use of UNIX termial codes for coloring even if this method is not normally used on current platform. This has the same effect as specifying the gst debug color mode unix command line option to well behaved GStreamer applications ie. those that pass command line options correctly to GStreamer This is particularly useful to dump debug output into a file on non UNIX platforms to be sent to developers who have viewers that support UNIX terminal codes. \nGST_DEBUG_OPTIONS. \nThis environment variable can be used to tweak the behaviour of the debugging system. Currently the only options supported are pretty tags and full tags In pretty tags mode the default taglists in the debug log will be serialized so that only the first few and last few bytes of a buffer type tag will be serialized into the log to avoid dumping hundreds of lines of useless output into the log in case of large image tags and the like. \nGST_DEBUG_DUMP_DOT_DIR. \nSet this environment variable to a path to turn on all GST_DEBUG_BIN_TO_DOT_FILE or GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS calls and have the dot files in that location. \nThis will only work if the application in question makes these calls in strategic places like when the pipeline state changes or an error occurs gst launch GST_API_VERSION is one such application. \nThese dot files can then be turned into images using the dot utility from the graphviz set of tools like this dot foo.dot Tsvg o foo.svg or dot foo.dot Tpng o foo.png or dot foo.dot Tjpg o foo.jpg. \nThere is also a utility called xdot which allows you to view the dot file directly without converting it first. \nGST_REGISTRY GST_REGISTRY_1_0. \nSet this environment variable to make GStreamer use a different file for the plugin cache registry than the default one. This is useful when operating in a separate environment which should not affect the default cache in the user s home directory. \nGST_REGISTRY_FORK. \nSet this environment variable to no to prevent GStreamer from forking on startup in order to update the plugin registry. This is useful for debugging purposes but should not be used under normal circumstances since it means that plugins may be loaded into memory even if they are not needed by the application. \nGST_REGISTRY_UPDATE. \nSet this environment variable to no to prevent GStreamer from updating the plugin registry. This is useful for embedded device which is not updating the plugins frequently it will save time when doing gst_init \nGST_TRACE. \nEnable memory allocation tracing. Most GStreamer objects have support for tracing the number of unfreed objects and their memory pointers. \nThe variable takes a comma separated list of tracing options to enable. \nlive Counts all live objects and dumps an overview of the number of unfreed objects at program exit. \nmem live Keep track of the unfreed memory pointers and dump an overview of all unfreed memory at program exit. Together with a level debug log this can be used to follow the lifecycle of leaked objects in order to track down where they are leaked. This can be useful for debugging memory leaks in situations where tools such as valgrind are not available or not an option. \nUse all to enable all tracing flags. \nGST_DEBUG_FILE. \nSet this variable to a file path to redirect all GStreamer debug messages to this file. If left unset debug messages with be output unto the standard error. \nORC_CODE. \nUseful Orc environment variable. Set ORC_CODE debug to enable debuggers such as gdb to create useful backtraces from Orc generated code. Set ORC_CODE backup or ORC_CODE emulate if you suspect Orc s SIMD code generator is producing incorrect code Quite a few important GStreamer plugins like videotestsrc audioconvert or audioresample use Orc One can also combine flags like ORC_CODE backup debug. \nG_DEBUG. \nUseful GLib environment variable. Set G_DEBUG fatal_warnings to make GStreamer programs abort when a critical warning such as an assertion failure occurs. This is useful if you want to find out which part of the code caused that warning to be triggered and under what circumstances. Simply set G_DEBUG as mentioned above and run the program in gdb or let it core dump Then get a stack trace in the usual way. \nG_SLICE. \nUseful GLib environment variable. Set G_SLICE always malloc when running GStreamer programs in valgrind or debugging memory leaks with other tools. See the GLib API reference for more details. \nGST_TAG_ENCODING. \nTry this character encoding first for tag related strings where the encoding is not defined and which are not UTF already. By default the current locale will be tried if not UTF \nGST_TAG_ID3_ENCODING. \nTry this character encoding first for ID3 tag related strings where the encoding is not defined and which are not UTF already. By default the current locale will be tried if not UTF \nGST_TAG_ID3V1_ENCODING. \nTry this character encoding first for ID3v1 tag related strings where the encoding does not look like UTF \nGST_GL_WINDOW. \nInfluences the window system to use by the GStreamer OpenGL library. Common values are x11 wayland win32 or cocoa \nGST_GL_PLATFORM. \nInfluences the OpenGL platform to use by the GStreamer OpenGL library. Common values are egl glx wgl or cgl \nGST_GL_API. \nInfluences the OpenGL API requested by the OpenGL platform. Common values are opengl or gles2 \n"});