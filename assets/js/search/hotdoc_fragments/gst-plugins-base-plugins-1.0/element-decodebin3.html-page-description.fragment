fragment_downloaded_cb({"url": "gst-plugins-base-plugins-1.0/element-decodebin3.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-decodebin3\">\n<h1 id=\"decodebin31\">decodebin3</h1><p><a href=\"../libgstreamer-1.0/c/gstbin.html#GstBin\">GstBin</a> that auto-magically constructs a decoding pipeline using available\ndecoders and demuxers via auto-plugging. The output is raw audio, video\nor subtitle streams.</p>\n<p>decodebin3 differs from the previous decodebin (decodebin2) in important ways:</p>\n<ul>\n<li>\n<p>supports publication and selection of stream information via\nGstStreamCollection messages and GST_EVENT_SELECT_STREAM events.</p>\n</li>\n<li>\n<p>dynamically switches stream connections internally, and\nreuses decoder elements when stream selections change, so that in\nthe normal case it maintains 1 decoder of each type (video/audio/subtitle)\nand only creates new elements when streams change and an existing decoder\nis not capable of handling the new format.</p>\n</li>\n<li>\n<p>supports multiple input pads for the parallel decoding of auxilliary streams\nnot muxed with the primary stream.</p>\n</li>\n<li>\n<p>does not handle network stream buffering. decodebin3 expects that network stream\nbuffering is handled upstream, before data is passed to it.</p>\n</li>\n</ul>\n<p><emphasis>decodebin3 is still experimental API and a technology preview.\nIts behaviour and exposed API is subject to change.</emphasis></p>\n\n</div>\n\n\n"});