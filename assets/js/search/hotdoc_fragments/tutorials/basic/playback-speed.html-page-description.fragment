fragment_downloaded_cb({"url": "tutorials/basic/playback-speed.html#page-description", "fragment": "Fast forward reverse playback and slow motion are all techniques collectively known as trick modes and they all have in common that modify the normal playback rate. This tutorial shows how to achieve these effects and adds frame stepping into the deal. In particular it shows \nFast forward is the technique that plays a media at a speed higher than its normal intended speed whereas slow motion uses a speed lower than the intended one. Reverse playback does the same thing but backwards from the end of the stream to the beginning. \nAll these techniques do is change the playback rate which is a variable equal to for normal playback greater than in absolute value for fast modes lower than in absolute value for slow modes positive for forward playback and negative for reverse playback. \nGStreamer provides two mechanisms to change the playback rate Step Events and Seek Events. Step Events allow skipping a given amount of media besides changing the subsequent playback rate only to positive values Seek Events additionally allow jumping to any position in the stream and set positive and negative playback rates. \nIn Basic tutorial Time management seek events have already been shown using a helper function to hide their complexity. This tutorial explains a bit more how to use these events. \nStep Events are a more convenient way of changing the playback rate due to the reduced number of parameters needed to create them however they have some downsides so Seek Events are used in this tutorial instead. Step events only affect the sink at the end of the pipeline so they will only work if the rest of the pipeline can support going at a different speed Seek events go all the way through the pipeline so every element can react to them. The upside of Step events is that they are much faster to act. Step events are also unable to change the playback direction. \nTo use these events they are created and then passed onto the pipeline where they propagate upstream until they reach an element that can handle them. If an event is passed onto a bin element like playbin it will simply feed the event to all its sinks which will result in multiple seeks being performed. The common approach is to retrieve one of playbin s sinks through the video sink or audio sink properties and feed the event directly into the sink. \nFrame stepping is a technique that allows playing a video frame by frame. It is implemented by pausing the pipeline and then sending Step Events to skip one frame each time. \nCopy this code into a text file named basic tutorial c. \nbasic tutorial c \nNeed help \nIf you need help to compile this code refer to the Building the tutorials section for your platform Linux Mac OS X or Windows or use this specific command on Linux \ngcc basic tutorial c o basic tutorial pkg config cflags libs gstreamer \nIf you need help to run this code refer to the Running the tutorials section for your platform Linux Mac OS X or Windows. \nThis tutorial opens a window and displays a movie with accompanying audio. The media is fetched from the Internet so the window might take a few seconds to appear depending on your connection speed. The console shows the available commands composed of a single upper case or lower case letter which you should input followed by the Enter key. \nRequired libraries gstreamer \nThere is nothing new in the initialization code in the main function a playbin pipeline is instantiated an I O watch is installed to track keystrokes and a GLib main loop is executed. \nThen in the keyboard handler function \nPause Playing toggle is handled with gst_element_set_state as in previous tutorials. \nUse S and s to double or halve the current playback rate and d to reverse the current playback direction. In both cases the rate variable is updated and send_seek_event is called. Let s review this function. \nThis function creates a new Seek Event and sends it to the pipeline to update the rate. First the current position is recovered with gst_element_query_position This is needed because the Seek Event jumps to another position in the stream and since we do not actually want to move we jump to the current position. Using a Step Event would be simpler but this event is not currently fully functional as explained in the Introduction. \nThe Seek Event is created with gst_event_new_seek Its parameters are basically the new rate the new start position and the new stop position. Regardless of the playback direction the start position must be smaller than the stop position so the two playback directions are treated differently. \nAs explained in the Introduction to avoid performing multiple Seeks the Event is sent to only one sink in this case the video sink. It is obtained from playbin through the video sink property. It is read at this time instead at initialization time because the actual sink may change depending on the media contents and this won t be known until the pipeline is PLAYING and some media has been read. \nThe new Event is finally sent to the selected sink with gst_element_send_event \nBack to the keyboard handler we still miss the frame stepping code which is really simple \nA new Step Event is created with gst_event_new_step whose parameters basically specify the amount to skip frame in the example and the new rate which we do not change \nThe video sink is grabbed from playbin in case we didn t have it yet just like before. \nAnd with this we are done. When testing this tutorial keep in mind that backward playback is not optimal in many elements. \n\nChanging the playback rate might only work with local files. If you cannot modify it try changing the URI passed to playbin in line to a local URI starting with file \nThis tutorial has shown \nIt has been a pleasure having you here and see you soon \n"});