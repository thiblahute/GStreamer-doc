fragment_downloaded_cb({"url": "tutorials/basic/dynamic-pipelines.html#introduction", "fragment": "Introduction \nAs you are about to see the pipeline in this tutorial is not completely built before it is set to the playing state. This is OK. If we did not take further action data would reach the end of the pipeline and the pipeline would produce an error message and stop. But we are going to take further action... \nIn this example we are opening a file which is multiplexed or muxed this is audio and video are stored together inside a container file. The elements responsible for opening such containers are called demuxers and some examples of container formats are Matroska MKV Quick Time QT MOV Ogg or Advanced Systems Format ASF WMV WMA \nIf a container embeds multiple streams one video and two audio tracks for example the demuxer will separate them and expose them through different output ports. In this way different branches can be created in the pipeline dealing with different types of data. \nThe ports through which GStreamer elements communicate with each other are called pads GstPad There exists sink pads through which data enters an element and source pads through which data exits an element. It follows naturally that source elements only contain source pads sink elements only contain sink pads and filter elements contain both. \n\nFigure GStreamer elements with their pads. \nA demuxer contains one sink pad through which the muxed data arrives and multiple source pads one for each stream found in the container \n\nFigure A demuxer with two source pads. \nFor completeness here you have a simplified pipeline containing a demuxer and two branches one for audio and one for video. This is NOT the pipeline that will be built in this example \n\nFigure Example pipeline with two branches. \nThe main complexity when dealing with demuxers is that they cannot produce any information until they have received some data and have had a chance to look at the container to see what is inside. This is demuxers start with no source pads to which other elements can link and thus the pipeline must necessarily terminate at them. \nThe solution is to build the pipeline from the source down to the demuxer and set it to run play When the demuxer has received enough information to know about the number and kind of streams in the container it will start creating source pads. This is the right time for us to finish building the pipeline and attach it to the newly added demuxer pads. \nFor simplicity in this example we will only link to the audio pad and ignore the video. \n"});