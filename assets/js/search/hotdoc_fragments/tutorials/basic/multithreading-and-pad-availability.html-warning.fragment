fragment_downloaded_cb({"url": "tutorials/basic/multithreading-and-pad-availability.html#warning", "fragment": "To link Request Pads they need to be obtained by requesting them to the element. An element might be able to produce different kinds of Request Pads so when requesting them the desired Pad Template must be provided. Pad templates are obtained with gst_element_class_get_pad_template and are identified by their name. In the documentation for the tee element we see that it has two pad templates named sink for its sink Pads and src_ d for the Request Pads \nOnce we have the Pad template we request two Pads from the tee for the audio and video branches with gst_element_request_pad \nWe then obtain the Pads from the downstream elements to which these Request Pads need to be linked. These are normal Always Pads so we obtain them with gst_element_get_static_pad \nFinally we link the pads with gst_pad_link This is the function that gst_element_link and gst_element_link_many use internally. \nThe sink Pads we have obtained need to be released with gst_object_unref The Request Pads will be released when we no longer need them at the end of the program. \nWe then set the pipeline to playing as usual and wait until an error message or an EOS is produced. The only thing left to so is cleanup the requested Pads \ngst_element_release_request_pad releases the pad from the tee but it still needs to be unreferenced freed with gst_object_unref \n"});