fragment_downloaded_cb({"url": "tutorials/basic/media-information-gathering.html#page-description", "fragment": "Sometimes you might want to quickly find out what kind of media a file or URI contains or if you will be able to play the media at all. You can build a pipeline set it to run and watch the bus messages but GStreamer has a utility that does just that for you. This tutorial shows \nHow to recover information regarding a URI \nHow to find out if a URI is playable \nGstDiscoverer is a utility object found in the pbutils library Plug in Base utilities that accepts a URI or list of URIs and returns information about them. It can work in synchronous or asynchronous modes. \nIn synchronous mode there is only a single function to call gst_discoverer_discover_uri which blocks until the information is ready. Due to this blocking it is usually less interesting for GUI based applications and the asynchronous mode is used as described in this tutorial. \nThe recovered information includes codec descriptions stream topology number of streams and sub streams and available metadata like the audio language \nAs an example this is the result of discovering https www.freedesktop.org software gstreamer sdk data media sintel_trailer p.webm \nThe following code tries to discover the URI provided through the command line and outputs the retrieved information If no URI is provided it uses a default one \nThis is a simplified version of what the gst discoverer tool does Basic tutorial GStreamer tools which is an application that only displays data but does not perform any playback. \nCopy this code into a text file named basic tutorial c or find it in your GStreamer installation \nbasic tutorial c \nNeed help \nIf you need help to compile this code refer to the Building the tutorials section for your platform Linux Mac OS X or Windows or use this specific command on Linux \ngcc basic tutorial c o basic tutorial pkg config cflags libs gstreamer gstreamer pbutils \nIf you need help to run this code refer to the Running the tutorials section for your platform Linux Mac OS X or Windows. \nThis tutorial opens the URI passed as the first parameter in the command line or a default URI if none is provided and outputs information about it on the screen. If the media is located on the Internet the application might take a bit to react depending on your connection speed. \nRequired libraries gstreamer pbutils gstreamer \nThese are the main steps to use the GstDiscoverer \ngst_discoverer_new creates a new Discoverer object. The first parameter is the timeout per file in nanoseconds use the GST_SECOND macro for simplicity \nConnect to the interesting signals as usual. We discuss them in the snippet for their callbacks. \ngst_discoverer_start launches the discovering process but we have not provided any URI to discover yet. This is done next \ngst_discoverer_discover_uri_async enqueues the provided URI for discovery. Multiple URIs can be enqueued with this function. As the discovery process for each of them finishes the registered callback functions will be fired up. \nThe usual GLib main loop is instantiated and executed. We will get out of it when g_main_loop_quit is called from the on_finished_cb callback. \nOnce we are done with the discoverer we stop it with gst_discoverer_stop and unref it with g_object_unref \nLet s review now the callbacks we have registered \nWe got here because the Discoverer has finished working on one URI and provides us a GstDiscovererInfo structure with all the information. \nThe first step is to retrieve the particular URI this call refers to in case we had multiple discover process running which is not the case in this example with gst_discoverer_info_get_uri and the discovery result with gst_discoverer_info_get_result \nAs the code shows any result other than GST_DISCOVERER_OK means that there has been some kind of problem and this URI cannot be played. The reasons can vary but the enum values are quite explicit GST_DISCOVERER_BUSY can only happen when in synchronous mode which is not used in this example \nIf no error happened information can be retrieved from the GstDiscovererInfo structure with the different gst_discoverer_info_get_ methods like gst_discoverer_info_get_duration for example \nBits of information which are made of lists like tags and stream info needs some extra parsing \nTags are metadata labels attached to the media. They can be examined with gst_tag_list_foreach which will call print_tag_foreach for each tag found the list could also be traversed manually for example or a specific tag could be searched for with gst_tag_list_get_string The code for print_tag_foreach is pretty much self explicative. \ngst_discoverer_info_get_stream_info returns a GstDiscovererStreamInfo structure that is parsed in the print_topology function and then discarded with gst_discoverer_stream_info_unref \nThe print_stream_info function s code is also pretty much self explicative it prints the stream s capabilities and then the associated caps using print_tag_foreach too. \nThen print_topology looks for the next element to display. If gst_discoverer_stream_info_get_next returns a non NULL stream info it refers to our descendant and that should be displayed. Otherwise if we are a container recursively call print_topology on each of our children obatined with gst_discoverer_container_info_get_streams Otherwise we are a final stream and do not need to recurse This part of the Discoverer API is admittedly a bit obscure \nThis tutorial has shown \nHow to recover information regarding a URI using the GstDiscoverer \nHow to find out if a URI is playable by looking at the return code obtained with gst_discoverer_info_get_result \nIt has been a pleasure having you here and see you soon \n"});