fragment_downloaded_cb({"url": "tutorials/basic/time-management.html#message-pump", "fragment": "Message Pump \nThe handle_message function processes all messages received through the pipeline s bus. ERROR and EOS handling is the same as in previous tutorials so we skip to the interesting part \nThis message is posted on the bus whenever the duration of the stream changes. Here we simply mark the current duration as invalid so it gets re queried later. \nSeeks and time queries generally only get a valid reply when in the PAUSED or PLAYING state since all elements have had a chance to receive information and configure themselves. Here we take note of whether we are in the PLAYING state or not with the playing variable. \nAlso if we have just entered the PLAYING state we do our first query. We ask the pipeline if seeking is allowed on this stream \ngst_query_new_seeking creates a new query object of the seeking type with GST_FORMAT_TIME format. This indicates that we are interested in seeking by specifying the new time to which we want to move. We could also ask for GST_FORMAT_BYTES and then seek to a particular byte position inside the source file but this is normally less useful. \nThis query object is then passed to the pipeline with gst_element_query The result is stored in the same query and can be easily retrieved with gst_query_parse_seeking It extracts a boolean indicating if seeking is allowed and the range in which seeking is possible. \nDon t forget to unref the query object when you are done with it. \nAnd that s it With this knowledge a media player can be built which periodically updates a slider based on the current stream position and allows seeking by moving the slider \n"});