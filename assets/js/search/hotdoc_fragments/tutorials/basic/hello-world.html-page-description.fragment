fragment_downloaded_cb({"url": "tutorials/basic/hello-world.html#page-description", "fragment": "Nothing better to get a first impression about a software library than to print Hello World on the screen \nBut since we are dealing with multimedia frameworks we are going to play a video instead. \nDo not be scared by the amount of code below there are only lines which do real work. The rest is cleanup code and in C this is always a bit verbose. \nWithout further ado get ready for your first GStreamer application... \nCopy this code into a text file named basic tutorial c or find it in your GStreamer installation \nbasic tutorial c \nCompile it as described in Installing on Linux Installing on Mac OS X or Installing on Windows. If you get compilation errors double check the instructions given in those sections. \nIf everything built fine fire up the executable You should see a window pop up containing a video being played straight from the Internet along with audio. Congratulations \nNeed help \nIf you need help to compile this code refer to the Building the tutorials section for your platform Linux Mac OS X or Windows or use this specific command on Linux \ngcc basic tutorial c o basic tutorial pkg config cflags libs gstreamer \nIf you need help to run this code refer to the Running the tutorials section for your platform Linux Mac OS X or Windows. \nThis tutorial opens a window and displays a movie with accompanying audio. The media is fetched from the Internet so the window might take a few seconds to appear depending on your connection speed. Also there is no latency management buffering so on slow connections the movie might stop after a few seconds. See how Basic tutorial Streaming solves this issue. \nRequired libraries gstreamer \nLet s review these lines of code and see what they do \nThis must always be your first GStreamer command. Among other things gst_init \nInitializes all internal structures \nChecks what plug ins are available \nExecutes any command line option intended for GStreamer \nIf you always pass your command line parameters argc and argv to gst_init your application will automatically benefit from the GStreamer standard command line options more on this in Basic tutorial GStreamer tools \nThis line is the heart of this tutorial and exemplifies two key points gst_parse_launch and playbin. \nGStreamer is a framework designed to handle multimedia flows. Media travels from the source elements the producers down to the sink elements the consumers passing through a series of intermediate elements performing all kinds of tasks. The set of all the interconnected elements is called a pipeline \nIn GStreamer you usually build the pipeline by manually assembling the individual elements but when the pipeline is easy enough and you do not need any advanced features you can take the shortcut gst_parse_launch \nThis function takes a textual representation of a pipeline and turns it into an actual pipeline which is very handy. In fact this function is so handy there is a tool built completely around it which you will get very acquainted with see Basic tutorial GStreamer tools to learn about gst launch and the gst launch syntax \nSo what kind of pipeline are we asking gst_parse_launch to build for us Here enters the second key point We are building a pipeline composed of a single element called playbin. \nplaybin is a special element which acts as a source and as a sink and is a whole pipeline. Internally it creates and connects all the necessary elements to play your media so you do not have to worry about it. \nIt does not allow the control granularity that a manual pipeline does but still it permits enough customization to suffice for a wide range of applications. Including this tutorial. \nIn this example we are only passing one parameter to playbin which is the URI of the media we want to play. Try changing it to something else Whether it is an http or file URI playbin will instantiate the appropriate GStreamer source transparently \nIf you mistype the URI or the file does not exist or you are missing a plug in GStreamer provides several notification mechanisms but the only thing we are doing in this example is exiting on error so do not expect much feedback. \nThis line highlights another interesting concept the state. Every GStreamer element has an associated state which you can more or less think of as the Play Pause button in your regular DVD player. For now suffice to say that playback will not start unless you set the pipeline to the PLAYING state. \nIn this line gst_element_set_state is setting pipeline our only element remember to the PLAYING state thus initiating playback. \nThese lines will wait until an error occurs or the end of the stream is found. gst_element_get_bus retrieves the pipeline s bus and gst_bus_timed_pop_filtered will block until you receive either an ERROR or an EOS End Of Stream through that bus. Do not worry much about this line the GStreamer bus is explained in Basic tutorial GStreamer concepts. \nAnd that s it From this point onwards GStreamer takes care of everything. Execution will end when the media reaches its end EOS or an error is encountered try closing the video window or unplugging the network cable The application can always be stopped by pressing control C in the console. \nBefore terminating the application though there is a couple of things we need to do to tidy up correctly after ourselves. \nAlways read the documentation of the functions you use to know if you should free the objects they return after using them. \nIn this case gst_bus_timed_pop_filtered returned a message which needs to be freed with gst_message_unref more about messages in Basic tutorial GStreamer concepts \ngst_element_get_bus added a reference to the bus that must be freed with gst_object_unref Setting the pipeline to the NULL state will make sure it frees any resources it has allocated More about states in Basic tutorial Dynamic pipelines Finally unreferencing the pipeline will destroy it and all its contents. \nAnd so ends your first tutorial with GStreamer. We hope its brevity serves as an example of how powerful this framework is \nLet s recap a bit. Today we have learned \nHow to initialize GStreamer using gst_init \nHow to quickly build a pipeline from a textual description using gst_parse_launch \nHow to create an automatic playback pipeline using playbin. \nHow to signal GStreamer to start playback using gst_element_set_state \nHow to sit back and relax while GStreamer takes care of everything using gst_element_get_bus and gst_bus_timed_pop_filtered \nThe next tutorial will keep introducing more basic GStreamer elements and show you how to build a pipeline manually. \nIt has been a pleasure having you here and see you soon \n"});