fragment_downloaded_cb({"url": "tutorials/basic/time-management.html#user-interface-resfreshing", "fragment": "User interface resfreshing \nFirst off if we are not in the PLAYING state we do not want to do anything here since most queries would fail. Otherwise it is time to refresh the screen. \nWe get here approximately times per second a good enough refresh rate for our UI. We are going to print on screen the current media position which we can learn be querying the pipeline. This involves a few steps that will be shown in the next subsection but since position and duration are common enough queries GstElement offers easier ready made alternatives \ngst_element_query_position hides the management of the query object and directly provides us with the result. \nNow is a good moment to know the length of the stream with another GstElement helper function gst_element_query_duration \nNote the usage of the GST_TIME_FORMAT and GST_TIME_ARGS macros to provide user friendly representation of GStreamer times. \nNow we perform the seek simply by calling gst_element_seek_simple on the pipeline. A lot of the intricacies of seeking are hidden in this method which is a good thing \nLet s review the parameters \nGST_FORMAT_TIME indicates that we are specifying the destination in time as opposite to bytes and other more obscure mechanisms \nThen come the GstSeekFlags let s review the most common \nGST_SEEK_FLAG_FLUSH This discards all data currently in the pipeline before doing the seek. Might pause a bit while the pipeline is refilled and the new data starts to show up but greatly increases the responsiveness of the application. If this flag is not provided stale data might be shown for a while until the new position appears at the end of the pipeline. \nGST_SEEK_FLAG_KEY_UNIT Most encoded video streams cannot seek to arbitrary positions only to certain frames called Key Frames. When this flag is used the seek will actually move to the closest key frame and start producing data straight away. If this flag is not used the pipeline will move internally to the closest key frame it has no other alternative but data will not be shown until it reaches the requested position. Not providing the flag is more accurate but might take longer to react. \nGST_SEEK_FLAG_ACCURATE Some media clips do not provide enough indexing information meaning that seeking to arbitrary positions is time consuming. In these cases GStreamer usually estimates the position to seek to and usually works just fine. If this precision is not good enough for your case you see seeks not going to the exact time you asked for then provide this flag. Be warned that it might take longer to calculate the seeking position very long on some files \nAnd finally we provide the position to seek to. Since we asked for GST_FORMAT_TIME this position is in nanoseconds so we use the GST_SECOND macro for simplicity. \n"});