fragment_downloaded_cb({"url": "tutorials/basic/multithreading-and-pad-availability.html#walkthrough", "fragment": "Walkthrough \nAll the elements in the above picture are instantiated here \naudiotestsrc produces a synthetic tone. wavescope consumes an audio signal and renders a waveform as if it was an admittedly cheap oscilloscope. We have already worked with the autoaudiosink and autovideosink. \nThe conversion elements audioconvert audioresample and videoconvert are necessary to guarantee that the pipeline can be linked. Indeed the Capabilities of the audio and video sinks depend on the hardware and you do not know at design time if they will match the Caps produced by the audiotestsrc and wavescope. If the Caps matched though these elements act in pass through mode and do not modify the signal having negligible impact on performance. \nSmall adjustments for better demonstration The freq property of audiotestsrc controls the frequency of the wave Hz makes the wave appear almost stationary in the window and this style and shader for wavescope make the wave continuous. Use the gst inspect tool described in Basic tutorial GStreamer tools to learn all the properties of these elements. \nThis code block adds all elements to the pipeline and then links the ones that can be automatically linked the ones with Always Pads as the comment says \ngst_element_link_many can actually link elements with Request Pads. It internally requests the Pads so you do not have worry about the elements being linked having Always or Request Pads. Strange as it might seem this is actually inconvenient because you still need to release the requested Pads afterwards and if the Pad was requested automatically by gst_element_link_many it is easy to forget. Stay out of trouble by always requesting Request Pads manually as shown in the next code block. \n"});