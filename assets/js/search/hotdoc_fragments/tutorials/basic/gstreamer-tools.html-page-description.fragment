fragment_downloaded_cb({"url": "tutorials/basic/gstreamer-tools.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstreamer-tools.md\">\n<h1 id=\"basic-tutorial-10-gstreamer-tools\">Basic tutorial 10: GStreamer tools</h1>\n<h2 id=\"goal\">Goal</h2>\n<p>GStreamer comes with a set of tools which range from handy to\nabsolutely essential. There is no code in this tutorial, just sit back\nand relax, and we will teach you:</p>\n<ul>\n<li>How to build and run GStreamer pipelines from the command line,\nwithout using C at all!</li>\n<li>How to find out what GStreamer elements you have available and their\ncapabilities.</li>\n<li>How to discover the internal structure of media files.</li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>These tools are available in the bin directory of the GStreamer\nbinaries. You need to move to this directory to execute them, because\nit is not added to the system\u2019s <code>PATH</code> environment variable (to avoid\npolluting it too much).</p>\n<p>Just open a terminal (or console window) and go to the <code>bin</code> directory\nof your GStreamer installation (Read again the <a href=\"../../installing/index.html\">Installing\nGStreamer</a> section to find our where this is),\nand you are ready to start typing the commands given in this tutorial.</p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"Information\" id=\"information\"></p>\n<p>On Linux, you should use the GStreamer version installed with your\ndistribution, the tools should be installed with a package named <code>gstreamer1</code>\non Fedora style distributions, or <code>gstreamer1.0-tools</code> on Debian/Ubuntu style\ndistributions.</p>\n</blockquote>\n<p>In order to allow for multiple versions of GStreamer to coexists in the\nsame system, these tools are versioned, this is, a GStreamer version\nnumber is appended to their name. This version is based on\nGStreamer 1.0, so the tools are called <code>gst-launch-1.0</code>,\n<code>gst-inspect-1.0</code> and <code>gst-discoverer-1.0</code></p>\n<h2 id=\"gstlaunch10\"><code>gst-launch-1.0</code></h2>\n<p>This tool accepts a textual description of a pipeline, instantiates it,\nand sets it to the PLAYING state. It allows you to quickly check if a\ngiven pipeline works, before going through the actual implementation\nusing GStreamer API calls.</p>\n<p>Bear in mind that it can only create simple pipelines. In particular, it\ncan only simulate the interaction of the pipeline with the application\nup to a certain level. In any case, it is extremely handy to test\npipelines quickly, and is used by GStreamer developers around the world\non a daily basis.</p>\n<p>Please note that <code>gst-launch-1.0</code> is primarily a debugging tool for\ndevelopers. You should not build applications on top of it. Instead, use\nthe <code>gst_parse_launch()</code> function of the GStreamer API as an easy way to\nconstruct pipelines from pipeline descriptions.</p>\n<p>Although the rules to construct pipeline descriptions are very simple,\nthe concatenation of multiple elements can quickly make such\ndescriptions resemble black magic. Fear not, for everyone learns the\n<code>gst-launch-1.0</code> syntax, eventually.</p>\n<p>The command line for gst-launch-1.0 consists of a list of options followed\nby a PIPELINE-DESCRIPTION. Some simplified instructions are given next,\nse the complete documentation at <a href=\"../../tools/gst-launch.html\">the reference page</a>\nfor <code>gst-launch-1.0</code>.</p>\n<h3 id=\"elements\">Elements</h3>\n<p>In simple form, a PIPELINE-DESCRIPTION is a list of element types\nseparated by exclamation marks (!). Go ahead and type in the following\ncommand:</p>\n<pre><code>gst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n</code></pre>\n<p>You should see a windows with an animated video pattern. Use CTRL+C on\nthe terminal to stop the program.</p>\n<p>This instantiates a new element of type <code>videotestsrc</code> (an element which\ngenerates a sample video pattern), an <code>videoconvert</code> (an element\nwhich does raw video format conversion, making sure other elements can\nunderstand each other), and an <code>autovideosink</code> (a window to which video\nis rendered). Then, GStreamer tries to link the output of each element\nto the input of the element appearing on its right in the description.\nIf more than one input or output Pad is available, the Pad Caps are used\nto find two compatible Pads.</p>\n<h3 id=\"properties\">Properties</h3>\n<p>Properties may be appended to elements, in the form\n*property=value *(multiple properties can be specified, separated by\nspaces). Use the <code>gst-inspect-1.0</code> tool (explained next) to find out the\navailable properties for an\nelement.</p>\n<pre><code>gst-launch-1.0 videotestsrc pattern=11 ! videoconvert ! autovideosink\n</code></pre>\n<p>You should see a static video pattern, made of circles.</p>\n<h3 id=\"named-elements\">Named elements</h3>\n<p>Elements can be named using the <code>name</code> property, in this way complex\npipelines involving branches can be created. Names allow linking to\nelements created previously in the description, and are indispensable to\nuse elements with multiple output pads, like demuxers or tees, for\nexample.</p>\n<p>Named elements are referred to using their name followed by a\ndot.</p>\n<pre><code>gst-launch-1.0 videotestsrc ! videoconvert ! tee name=t ! queue ! autovideosink t. ! queue ! autovideosink\n</code></pre>\n<p>You should see two video windows, showing the same sample video pattern.\nIf you see only one, try to move it, since it is probably on top of the\nsecond window.</p>\n<p>This example instantiates a <code>videotestsrc</code>, linked to a\n<code>videoconvert</code>, linked to a <code>tee</code> (Remember from <a href=\"multithreading-and-pad-availability.html\">Basic tutorial 7: Multithreading and Pad Availability</a> that\na <code>tee</code> copies to each of its output pads everything coming through its\ninput pad). The <code>tee</code> is named simply \u2018t\u2019 (using the <code>name</code> property)\nand then linked to a <code>queue</code> and an <code>autovideosink</code>. The same <code>tee</code> is\nreferred to using \u2018t.\u2019 (mind the dot) and then linked to a second\n<code>queue</code> and a second <code>autovideosink</code>.</p>\n<p>To learn why the queues are necessary read <a href=\"multithreading-and-pad-availability.html\">Basic tutorial 7: Multithreading and Pad Availability</a>.</p>\n<h3 id=\"pads\">Pads</h3>\n<p>Instead of letting GStreamer choose which Pad to use when linking two\nelements, you may want to specify the Pads directly. You can do this by\nadding a dot plus the Pad name after the name of the element (it must be\na named element). Learn the names of the Pads of an element by using\nthe <code>gst-inspect-1.0</code> tool.</p>\n<p>This is useful, for example, when you want to retrieve one particular\nstream out of a\ndemuxer:</p>\n<pre><code>gst-launch-1.0 souphttpsrc location=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm ! matroskademux name=d d.video_00 ! matroskamux ! filesink location=sintel_video.mkv\n</code></pre>\n<p>This fetches a media file from the internet using <code>souphttpsrc</code>, which\nis in webm format (a special kind of Matroska container, see <a href=\"concepts.html\">Basic tutorial 2: GStreamer concepts</a>). We\nthen open the container using <code>matroskademux</code>. This media contains both\naudio and video, so <code>matroskademux</code> will create two output Pads, named\n<code>video_00</code> and <code>audio_00</code>. We link <code>video_00</code> to a <code>matroskamux</code> element\nto re-pack the video stream into a new container, and finally link it to\na <code>filesink</code>, which will write the stream into a file named\n\"sintel_video.mkv\" (the <code>location</code> property specifies the name of the\nfile).</p>\n<p>All in all, we took a webm file, stripped it of audio, and generated a\nnew matroska file with the video. If we wanted to keep only the\naudio:</p>\n<pre><code>gst-launch-1.0 souphttpsrc location=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm ! matroskademux name=d d.audio_00 ! vorbisparse ! matroskamux ! filesink location=sintel_audio.mka\n</code></pre>\n<p>The <code>vorbisparse</code> element is required to extract some information from\nthe stream and put it in the Pad Caps, so the next element,\n<code>matroskamux</code>, knows how to deal with the stream. In the case of video\nthis was not necessary, because <code>matroskademux</code> already extracted this\ninformation and added it to the Caps.</p>\n<p>Note that in the above two examples no media has been decoded or played.\nWe have just moved from one container to another (demultiplexing and\nre-multiplexing again).</p>\n<h3 id=\"caps-filters\">Caps filters</h3>\n<p>When an element has more than one output pad, it might happen that the\nlink to the next element is ambiguous: the next element may have more\nthan one compatible input pad, or its input pad may be compatible with\nthe Pad Caps of all the output pads. In these cases GStreamer will link\nusing the first pad that is available, which pretty much amounts to\nsaying that GStreamer will choose one output pad at random.</p>\n<p>Consider the following\npipeline:</p>\n<pre><code>gst-launch-1.0 souphttpsrc location=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm ! matroskademux ! filesink location=test\n</code></pre>\n<p>This is the same media file and demuxer as in the previous example. The\ninput Pad Caps of <code>filesink</code> are <code>ANY</code>, meaning that it can accept any\nkind of media. Which one of the two output pads of <code>matroskademux</code> will\nbe linked against the filesink? <code>video_00</code> or <code>audio_00</code>? You cannot\nknow.</p>\n<p>You can remove this ambiguity, though, by using named pads, as in the\nprevious sub-section, or by using <strong>Caps\nFilters</strong>:</p>\n<pre><code>gst-launch-1.0 souphttpsrc location=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm ! matroskademux ! video/x-vp8 ! matroskamux ! filesink location=sintel_video.mkv\n</code></pre>\n<p>A Caps Filter behaves like a pass-through element which does nothing and\nonly accepts media with the given Caps, effectively resolving the\nambiguity. In this example, between <code>matroskademux</code> and <code>matroskamux</code> we\nadded a <code>video/x-vp8</code> Caps Filter to specify that we are interested in\nthe output pad of <code>matroskademux</code> which can produce this kind of video.</p>\n<p>To find out the Caps an element accepts and produces, use the\n<code>gst-inspect-1.0</code> tool. To find out the Caps contained in a particular file,\nuse the <code>gst-discoverer-1.0</code> tool. To find out the Caps an element is\nproducing for a particular pipeline, run <code>gst-launch-1.0</code> as usual, with the\n<code>\u2013v</code> option to print Caps information.</p>\n<h3 id=\"examples\">Examples</h3>\n<p>Play a media file using <code>playbin</code> (as in <a href=\"hello-world.html\">Basic tutorial 1: Hello world!</a>):</p>\n<pre><code>gst-launch-1.0 playbin uri=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm\n</code></pre>\n<p>A fully operation playback pipeline, with audio and video (more or less\nthe same pipeline that <code>playbin</code> will create\ninternally):</p>\n<pre><code>gst-launch-1.0 souphttpsrc location=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm ! matroskademux name=d ! queue ! vp8dec ! videoconvert ! autovideosink d. ! queue ! vorbisdec ! audioconvert ! audioresample ! autoaudiosink\n</code></pre>\n<p>A transcoding pipeline, which opens the webm container and decodes both\nstreams (via uridecodebin), then re-encodes the audio and video branches\nwith a different codec, and puts them back together in an Ogg container\n(just for the sake of\nit).</p>\n<pre><code>gst-launch-1.0 uridecodebin uri=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm name=d ! queue ! theoraenc ! oggmux name=m ! filesink location=sintel.ogg d. ! queue ! audioconvert ! audioresample ! flacenc ! m.\n</code></pre>\n<p>A rescaling pipeline. The <code>videoscale</code> element performs a rescaling\noperation whenever the frame size is different in the input and the\noutput caps. The output caps are set by the Caps Filter to\n320x200.</p>\n<pre><code>gst-launch-1.0 uridecodebin uri=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm ! queue ! videoscale ! video/x-raw-yuv,width=320,height=200 ! videoconvert ! autovideosink\n</code></pre>\n<p>This short description of <code>gst-launch-1.0</code> should be enough to get you\nstarted. Remember that you have the <a href=\"../../tools/gst-launch.html\">complete documentation available\nhere</a>.</p>\n<h2 id=\"gstinspect10\"><code>gst-inspect-1.0</code></h2>\n<p>This tool has three modes of operation:</p>\n<ul>\n<li>Without arguments, it lists all available elements types, this is,\nthe types you can use to instantiate new elements.</li>\n<li>With a file name as an argument, it treats the file as a GStreamer\nplugin, tries to open it, and lists all the elements described\ninside.</li>\n<li>With a GStreamer element name as an argument, it lists all\ninformation regarding that element.</li>\n</ul>\n<p>Let's see an example of the third mode:</p>\n<pre><code>gst-inspect-1.0 vp8dec\n\nFactory Details:\n  Rank                     primary (256)\n  Long-name                On2 VP8 Decoder\n  Klass                    Codec/Decoder/Video\n  Description              Decode VP8 video streams\n  Author                   David Schleef &lt;ds@entropywave.com&gt;, Sebastian Dr\u00f6ge &lt;sebastian.droege@collabora.co.uk&gt;\n\nPlugin Details:\n  Name                     vpx\n  Description              VP8 plugin\n  Filename                 /usr/lib64/gstreamer-1.0/libgstvpx.so\n  Version                  1.6.4\n  License                  LGPL\n  Source module            gst-plugins-good\n  Source release date      2016-04-14\n  Binary package           Fedora GStreamer-plugins-good package\n  Origin URL               http://download.fedoraproject.org\n\nGObject\n +----GInitiallyUnowned\n       +----GstObject\n             +----GstElement\n                   +----GstVideoDecoder\n                         +----GstVP8Dec\n\nPad Templates:\n  SINK template: 'sink'\n    Availability: Always\n    Capabilities:\n      video/x-vp8\n\n  SRC template: 'src'\n    Availability: Always\n    Capabilities:\n      video/x-raw\n                 format: I420\n                  width: [ 1, 2147483647 ]\n                 height: [ 1, 2147483647 ]\n              framerate: [ 0/1, 2147483647/1 ]\n\n\nElement Flags:\n  no flags set\n\nElement Implementation:\n  Has change_state() function: gst_video_decoder_change_state\n\nElement has no clocking capabilities.\nElement has no URI handling capabilities.\n\nPads:\n  SINK: 'sink'\n    Pad Template: 'sink'\n  SRC: 'src'\n    Pad Template: 'src'\n\nElement Properties:\n  name                : The name of the object\n                        flags: readable, writable\n                        String. Default: \"vp8dec0\"\n  parent              : The parent of the object\n                        flags: readable, writable\n                        Object of type \"GstObject\"\n  post-processing     : Enable post processing\n                        flags: readable, writable\n                        Boolean. Default: false\n  post-processing-flags: Flags to control post processing\n                        flags: readable, writable\n                        Flags \"GstVP8DecPostProcessingFlags\" Default: 0x00000403, \"mfqe+demacroblock+deblock\"\n                           (0x00000001): deblock          - Deblock\n                           (0x00000002): demacroblock     - Demacroblock\n                           (0x00000004): addnoise         - Add noise\n                           (0x00000400): mfqe             - Multi-frame quality enhancement\n  deblocking-level    : Deblocking level\n                        flags: readable, writable\n                        Unsigned Integer. Range: 0 - 16 Default: 4\n  noise-level         : Noise level\n                        flags: readable, writable\n                        Unsigned Integer. Range: 0 - 16 Default: 0\n  threads             : Maximum number of decoding threads\n                        flags: readable, writable\n                        Unsigned Integer. Range: 1 - 16 Default: 0\n</code></pre>\n<p>The most relevant sections are:</p>\n<ul>\n<li>Pad Templates: This lists all the kinds of Pads this\nelement can have, along with their capabilities. This is where you\nlook to find out if an element can link with another one. In this\ncase, it has only one sink pad template, accepting only\n<code>video/x-vp8</code> (encoded video data in VP8 format) and only one source\npad template, producing <code>video/x-raw</code> (decoded video data).</li>\n<li>Element Properties: This lists the properties of the\nelement, along with their type and accepted values.</li>\n</ul>\n<p>For more information, you can check the <a href=\"../../tools/gst-inspect.html\">documentation\npage</a> of <code>gst-inspect-1.0</code>.</p>\n<h2 id=\"gstdiscoverer10\"><code>gst-discoverer-1.0</code></h2>\n<p>This tool is a wrapper around the <code>GstDiscoverer</code> object shown in <a href=\"media-information-gathering.html\">Basic tutorial 9: Media information gathering</a>.\nIt accepts a URI from the command line and prints all information\nregarding the media that GStreamer can extract. It is useful to find out\nwhat container and codecs have been used to produce the media, and\ntherefore what elements you need to put in a pipeline to play it.</p>\n<p>Use <code>gst-discoverer-1.0 --help</code> to obtain the list of available options,\nwhich basically control the amount of verbosity of the output.</p>\n<p>Let's see an\nexample:</p>\n<pre><code>gst-discoverer-1.0 https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm -v\n\nAnalyzing https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm\nDone discovering https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm\nTopology:\n  container: video/webm\n    audio: audio/x-vorbis, channels=(int)2, rate=(int)48000\n      Codec:\n        audio/x-vorbis, channels=(int)2, rate=(int)48000\n      Additional info:\n        None\n      Language: en\n      Channels: 2\n      Sample rate: 48000\n      Depth: 0\n      Bitrate: 80000\n      Max bitrate: 0\n      Tags:\n        taglist, language-code=(string)en, container-format=(string)Matroska, audio-codec=(string)Vorbis, application-name=(string)ffmpeg2theora-0.24, encoder=(string)\"Xiph.Org\\ libVorbis\\ I\\ 20090709\", encoder-version=(uint)0, nominal-bitrate=(uint)80000, bitrate=(uint)80000;\n    video: video/x-vp8, width=(int)854, height=(int)480, framerate=(fraction)25/1\n      Codec:\n        video/x-vp8, width=(int)854, height=(int)480, framerate=(fraction)25/1\n      Additional info:\n        None\n      Width: 854\n      Height: 480\n      Depth: 0\n      Frame rate: 25/1\n      Pixel aspect ratio: 1/1\n      Interlaced: false\n      Bitrate: 0\n      Max bitrate: 0\n      Tags:\n        taglist, video-codec=(string)\"VP8\\ video\", container-format=(string)Matroska;\n\nProperties:\n  Duration: 0:00:52.250000000\n  Seekable: yes\n  Tags:\n      video codec: VP8 video\n      language code: en\n      container format: Matroska\n      application name: ffmpeg2theora-0.24\n      encoder: Xiph.Org libVorbis I 20090709\n      encoder version: 0\n      audio codec: Vorbis\n      nominal bitrate: 80000\n      bitrate: 80000\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This tutorial has shown:</p>\n<ul>\n<li>How to build and run GStreamer pipelines from the command line using\nthe <code>gst-launch-1.0</code> tool.</li>\n<li>How to find out what GStreamer elements you have available and their\ncapabilities, using the <code>gst-inspect-1.0</code> tool.</li>\n<li>How to discover the internal structure of media files, using\n<code>gst-discoverer-1.0</code>.</li>\n</ul>\n<p>It has been a pleasure having you here, and see you soon!</p>\n\n</div>\n\n\n        "});