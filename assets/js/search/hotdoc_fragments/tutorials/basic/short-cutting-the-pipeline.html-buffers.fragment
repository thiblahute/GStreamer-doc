fragment_downloaded_cb({"url": "tutorials/basic/short-cutting-the-pipeline.html#buffers", "fragment": "Buffers \nData travels through a GStreamer pipeline in chunks called buffers. Since this example produces and consumes data we need to know about GstBuffers. \nSource Pads produce buffers that are consumed by Sink Pads GStreamer takes these buffers and passes them from element to element. \nA buffer simply represents a unit of data do not assume that all buffers will have the same size or represent the same amount of time. Neither should you assume that if a single buffer enters an element a single buffer will come out. Elements are free to do with the received buffers as they please. GstBuffers may also contain more than one actual memory buffer. Actual memory buffers are abstracted away using GstMemory objects and a GstBuffer can contain multiple GstMemory objects. \nEvery buffer has attached time stamps and duration that describe in which moment the content of the buffer should be decoded rendered or displayed. Time stamping is a very complex and delicate subject but this simplified vision should suffice for now. \nAs an example a filesrc a GStreamer element that reads files produces buffers with the ANY caps and no time stamping information. After demuxing see Basic tutorial Dynamic pipelines buffers can have some specific caps for example video x h264 After decoding each buffer will contain a single video frame with raw caps for example video x raw yuv and very precise time stamps indicating when should that frame be displayed. \n"});