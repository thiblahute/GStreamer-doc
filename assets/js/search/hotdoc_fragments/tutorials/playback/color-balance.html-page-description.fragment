fragment_downloaded_cb({"url": "tutorials/playback/color-balance.html#page-description", "fragment": "Brightness Contrast Hue and Saturation are common video adjustments which are collectively known as Color Balance settings in GStreamer. This tutorial shows \nBasic tutorial GUI toolkit integration has already explained the concept of GObject interfaces applications use them to find out if certain functionality is available regardless of the actual element which implements it. \nplaybin implements the Color Balance interface GstColorBalance which allows access to the color balance settings. If any of the elements in the playbin pipeline support this interface playbin simply forwards it to the application otherwise a colorbalance element is inserted in the pipeline. \nThis interface allows querying for the available color balance channels GstColorBalanceChannel along with their name and valid range of values and then modify the current value of any of them. \nCopy this code into a text file named playback tutorial c. \nplayback tutorial c \nIf you need help to compile this code refer to the Building the tutorials section for your platform Mac or Windows or use this specific command on Linux \ngcc playback tutorial c o playback tutorial pkg config cflags libs gstreamer gstreamer video \nIf you need help to run this code refer to the Running the tutorials section for your platform Mac OS X Windows for iOS or for android. \nThis tutorial opens a window and displays a movie with accompanying audio. The media is fetched from the Internet so the window might take a few seconds to appear depending on your connection speed. \nThe console should print all commands Each command is a single upper case or lower case letter and list all available Color Balance channels typically CONTRAST BRIGHTNESS HUE and SATURATION. Type each command letter followed by the Enter key. \nRequired libraries gstreamer gstreamer video \nThe main function is fairly simple. A playbin pipeline is instantiated and set to run and a keyboard watch is installed so keystrokes can be monitored. \nThis method prints the current value for all channels and exemplifies how to retrieve the list of channels. This is accomplished through the gst_color_balance_list_channels method. It returns a GList which needs to be traversed. \nEach element in the list is a GstColorBalanceChannel structure informing of the channel s name minimum value and maximum value. gst_color_balance_get_value can then be called on each channel to retrieve the current value. \nIn this example the minimum and maximum values are used to output the current value as a percentage. \nThis method locates the specified channel by name and increases or decreases it as requested. Again the list of channels is retrieved and parsed looking for the channel with the specified name. Obviously this list could be parsed only once and the pointers to the channels be stored and indexed by something more efficient than a string. \nThe current value for the channel is then retrieved changed the increment is proportional to its dynamic range clamped to avoid out of range values and set using gst_color_balance_set_value \nAnd there is not much more to it. Run the program and observe the effect of changing each of the channels in real time. \nThis tutorial has shown how to use the color balance interface. Particularly it has shown \nIt has been a pleasure having you here and see you soon \n"});