fragment_downloaded_cb({"url": "tutorials/playback/digital-audio-pass-through.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"digital-audio-pass-through.md\">\n<h1 id=\"playback-tutorial-9-digital-audio-passthrough\">Playback tutorial 9: Digital audio pass-through</h1>\n<h2 id=\"goal\">Goal</h2>\n<p>This tutorial shows how GStreamer handles digital audio pass-through.</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Besides the common analog format, high-end audio systems usually also\naccept data in digital form, either compressed or uncompressed. This is\nconvenient because the audio signal then travels from the computer to\nthe speakers in a form that is more resilient to interference and noise,\nresulting higher quality.</p>\n<p>The connection is typically made through an\n<a href=\"http://en.wikipedia.org/wiki/SPDIF\">S/PDIF</a> cable which can either be\noptical (with <a href=\"http://en.wikipedia.org/wiki/TOSLINK\">TOSLINK</a>\nconnectors) or coaxial (with <a href=\"http://en.wikipedia.org/wiki/RCA\">RCA</a>\nconnectors). S/PDIF is also known as IEC 60958 type II (IEC 958 before\n1998).</p>\n<p>In this scenario, GStreamer does not need to perform audio decoding; it\ncan simply output the encoded data, acting in <em>pass-through</em> mode, and\nlet the external audio system perform the decoding.</p>\n<h2 id=\"inner-workings-of-gstreamer-audio-sinks\">Inner workings of GStreamer audio sinks</h2>\n<p>First off, digital audio output must be enabled at the system level. The\nmethod to achieve this depend on the operating system, but it generally\ninvolves going to the audio control panel and activating a checkbox\nreading \u201cDigital Audio Output\u201d or similar.</p>\n<p>The main GStreamer audio sinks for each platform, Pulse Audio\n(<code>pulsesink</code>) for Linux, <code>osxaudiosink</code> for OS X and Direct Sound\n(<code>directsoundsink</code>) for Windows, detect when digital audio output is\navailable and change their input caps accordingly to accept encoded\ndata. For example, these elements typically accept <code>audio/x-raw</code> data:\nwhen digital audio output is enabled in the system, they may also\naccept <code>audio/mpeg</code>, <code>audio/x-ac3</code>, <code>audio/x-eac3</code> or <code>audio/x-dts</code>.</p>\n<p>Then, when <code>playbin</code> builds the decoding pipeline, it realizes that the\naudio sink can be directly connected to the encoded data (typically\ncoming out of a demuxer), so there is no need for a decoder. This\nprocess is automatic and does not need any action from the application.</p>\n<p>On Linux, there exist other audio sinks, like Alsa (<code>alsasink</code>) which\nwork differently (a \u201cdigital device\u201d needs to be manually selected\nthrough the <code>device</code> property of the sink). Pulse Audio, though, is the\ncommonly preferred audio sink on Linux.</p>\n<h2 id=\"precautions-with-digital-formats\">Precautions with digital formats</h2>\n<p>When Digital Audio Output is enabled at the system level, the GStreamer\naudio sinks automatically expose all possible digital audio caps,\nregardless of whether the actual audio decoder at the end of the S/PDIF\ncable is able to decode all those formats. This is so because there is\nno mechanism to query an external audio decoder which formats are\nsupported, and, in fact, the cable can even be disconnected during this\nprocess.</p>\n<p>For example, after enabling Digital Audio Output in the system\u2019s Control\nPanel,  <code>directsoundsink</code>  will automatically expose <code>audio/x-ac3</code>,\n<code>audio/x-eac3</code> and <code>audio/x-dts</code> caps in addition to <code>audio/x-raw</code>.\nHowever, one particular external decoder might only understand raw\ninteger streams and would try to play the compressed data as such (a\npainful experience for your ears, rest assured).</p>\n<p>Solving this issue requires user intervention, since only the user knows\nthe formats supported by the external decoder.</p>\n<p>On some systems, the simplest solution is to inform the operating system\nof the formats that the external audio decoder can accept. In this way,\nthe GStreamer audio sinks will only offer these formats. The acceptable\naudio formats are commonly selected from the operating system\u2019s audio\nconfiguration panel, from the same place where Digital Audio Output is\nenabled, but, unfortunately, this option is not available in all audio\ndrivers.</p>\n<p>Another solution involves, using a custom sinkbin (see\n<a href=\"custom-playbin-sinks.html\">Playback tutorial 7: Custom playbin sinks</a>) which includes a\n<code>capsfilter</code> element (see <a href=\"../basic/handy-elements.html\">Basic tutorial 14: Handy elements</a>)\nand an audio sink. The caps that the external decoder supports are\nthen set in the capsfiler so the wrong format is not output. This\nallows the application to enforce the appropriate format instead of\nrelying on the user to have the system correctly configured. Still\nrequires user intervention, but can be used regardless of the options\nthe audio driver offers.</p>\n<p>Please do not use <code>autoaudiosink</code> as the audio sink, as it currently\nonly supports raw audio, and will ignore any compressed format.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This tutorial has shown a bit of how GStreamer deals with digital audio.\nIn particular, it has shown that:</p>\n<ul>\n<li>Applications using <code>playbin</code> do not need to do anything special to\nenable digital audio output: it is managed from the audio control\npanel of the operating system.</li>\n</ul>\n<p>It has been a pleasure having you here, and see you soon!</p>\n\n</div>\n\n\n        "});