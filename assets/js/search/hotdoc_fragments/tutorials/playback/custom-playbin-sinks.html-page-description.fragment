fragment_downloaded_cb({"url": "tutorials/playback/custom-playbin-sinks.html#page-description", "fragment": "playbin can be further customized by manually selecting its audio and video sinks. This allows applications to rely on playbin to retrieve and decode the media and then manage the final render display themselves. This tutorial shows \nTwo properties of playbin allow selecting the desired audio and video sinks audio sink and video sink respectively The application only needs to instantiate the appropriate GstElement and pass it to playbin through these properties. \nThis method though only allows using a single Element as sink. If a more complex pipeline is required for example an equalizer plus an audio sink it needs to be wrapped in a Bin so it looks to playbin as if it was a single Element. \nA Bin GstBin is a container that encapsulates partial pipelines so they can be managed as single elements. As an example the GstPipeline we have been using in all tutorials is a type of GstBin which does not interact with external Elements. Elements inside a Bin connect to external elements through Ghost Pads GstGhostPad this is Pads on the surface of the Bin which simply forward data from an external Pad to a given Pad on an internal Element. \n\nFigure A Bin with two Elements and one Ghost Pad. \nGstBins are also a type of GstElement so they can be used wherever an Element is required in particular as sinks for playbin and they are then known as sink bins \nCopy this code into a text file named playback tutorial c. \nplayback tutorial7.c \nIf you need help to compile this code refer to the Building the tutorials section for your platform Mac or Windows or use this specific command on Linux \ngcc playback tutorial c o playback tutorial pkg config cflags libs gstreamer \nIf you need help to run this code refer to the Running the tutorials section for your platform Mac OS X Windows for iOS or for android. \nThis tutorial opens a window and displays a movie with accompanying audio. The media is fetched from the Internet so the window might take a few seconds to appear depending on your connection speed. The higher frequency bands have been attenuated so the movie sound should have a more powerful bass component. \nRequired libraries gstreamer \nAll the Elements that compose our sink bin are instantiated. We use an equalizer bands and an autoaudiosink with an audioconvert in between because we are not sure of the capabilities of the audio sink since they are hardware dependant \nThis adds the new Elements to the Bin and links them just as we would do if this was a pipeline. \nNow we need to create a Ghost Pad so this partial pipeline inside the Bin can be connected to the outside. This Ghost Pad will be connected to a Pad in one of the internal Elements the sink pad of the equalizer so we retrieve this Pad with gst_element_get_static_pad Remember from Basic tutorial Multithreading and Pad Availability that if this was a Request Pad instead of an Always Pad we would need to use gst_element_request_pad \nThe Ghost Pad is created with gst_ghost_pad_new pointing to the inner Pad we just acquired and activated with gst_pad_set_active It is then added to the Bin with gst_element_add_pad transferring ownership of the Ghost Pad to the bin so we do not have to worry about releasing it. \nFinally the sink Pad we obtained from the equalizer needs to be release with gst_object_unref \nAt this point we have a functional sink bin which we can use as the audio sink in playbin. We just need to instruct playbin to use it \nIt is as simple as setting the audio sink property on playbin to the newly created sink. \nThe only bit remaining is to configure the equalizer. For this example the two higher frequency bands are set to the maximum attenuation so the bass is boosted. Play a bit with the values to feel the difference Look at the documentation for the equalizer bands element for the allowed range of values \nBuild a video bin instead of an audio bin using one of the many interesting video filters GStreamer offers like solarize vertigotv or any of the Elements in the effectv plugin. Remember to use the color space conversion element videoconvert if your pipeline fails to link due to incompatible caps. \nThis tutorial has shown \nIt has been a pleasure having you here and see you soon \n"});