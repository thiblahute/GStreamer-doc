fragment_downloaded_cb({"url": "tutorials/playback/audio-visualization.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"audio-visualization.md\">\n<h1 id=\"playback-tutorial-6-audio-visualization\">Playback tutorial 6: Audio visualization</h1>\n<h2 id=\"goal\">Goal</h2>\n<p>GStreamer comes with a set of elements that turn audio into video. They\ncan be used for scientific visualization or to spice up your music\nplayer, for example. This tutorial shows:</p>\n<ul>\n<li>How to enable audio visualization</li>\n<li>How to select the visualization element</li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Enabling audio visualization in <code>playbin</code> is actually very easy. Just\nset the appropriate <code>playbin</code> flag and, when an audio-only stream is\nfound, it will instantiate the necessary elements to create and display\nthe visualization.</p>\n<p>If you want to specify the actual element that you want to use to\ngenerate the visualization, you instantiate it yourself and then tell\n<code>playbin</code> about it through the <code>vis-plugin</code> property.</p>\n<p>This tutorial searches the GStreamer registry for all the elements of\nthe Visualization class, tries to select <code>goom</code> (or another one if it is\nnot available) and passes it to <code>playbin</code>.</p>\n<h2 id=\"a-fancy-music-player\">A fancy music player</h2>\n<p>Copy this code into a text file named <code>playback-tutorial-6.c</code>.</p>\n<p><strong>playback-tutorial-6.c</strong></p>\n<pre><code class=\"language-c\">#include &lt;gst/gst.h&gt;\n\n/* playbin flags */\ntypedef enum {\n  GST_PLAY_FLAG_VIS           = (1 &lt;&lt; 3) /* Enable rendering of visualizations when there is no video stream. */\n} GstPlayFlags;\n\n/* Return TRUE if this is a Visualization element */\nstatic gboolean filter_vis_features (GstPluginFeature *feature, gpointer data) {\n  GstElementFactory *factory;\n\n  if (!GST_IS_ELEMENT_FACTORY (feature))\n    return FALSE;\n  factory = GST_ELEMENT_FACTORY (feature);\n  if (!g_strrstr (gst_element_factory_get_klass (factory), \"Visualization\"))\n    return FALSE;\n\n  return TRUE;\n}\n\nint main(int argc, char *argv[]) {\n  GstElement *pipeline, *vis_plugin;\n  GstBus *bus;\n  GstMessage *msg;\n  GList *list, *walk;\n  GstElementFactory *selected_factory = NULL;\n  guint flags;\n\n  /* Initialize GStreamer */\n  gst_init (&amp;argc, &amp;argv);\n\n  /* Get a list of all visualization plugins */\n  list = gst_registry_feature_filter (gst_registry_get (), filter_vis_features, FALSE, NULL);\n\n  /* Print their names */\n  g_print(\"Available visualization plugins:\\n\");\n  for (walk = list; walk != NULL; walk = g_list_next (walk)) {\n    const gchar *name;\n    GstElementFactory *factory;\n\n    factory = GST_ELEMENT_FACTORY (walk-&gt;data);\n    name = gst_element_factory_get_longname (factory);\n    g_print(\"  %s\\n\", name);\n\n    if (selected_factory == NULL || g_str_has_prefix (name, \"GOOM\")) {\n      selected_factory = factory;\n    }\n  }\n\n  /* Don't use the factory if it's still empty */\n  /* e.g. no visualization plugins found */\n  if (!selected_factory) {\n    g_print (\"No visualization plugins found!\\n\");\n    return -1;\n  }\n\n  /* We have now selected a factory for the visualization element */\n  g_print (\"Selected '%s'\\n\", gst_element_factory_get_longname (selected_factory));\n  vis_plugin = gst_element_factory_create (selected_factory, NULL);\n  if (!vis_plugin)\n    return -1;\n\n  /* Build the pipeline */\n  pipeline = gst_parse_launch (\"playbin uri=http://radio.hbr1.com:19800/ambient.ogg\", NULL);\n\n  /* Set the visualization flag */\n  g_object_get (pipeline, \"flags\", &amp;flags, NULL);\n  flags |= GST_PLAY_FLAG_VIS;\n  g_object_set (pipeline, \"flags\", flags, NULL);\n\n  /* set vis plugin for playbin */\n  g_object_set (pipeline, \"vis-plugin\", vis_plugin, NULL);\n\n  /* Start playing */\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  /* Wait until error or EOS */\n  bus = gst_element_get_bus (pipeline);\n  msg = gst_bus_timed_pop_filtered (bus, GST_CLOCK_TIME_NONE, GST_MESSAGE_ERROR | GST_MESSAGE_EOS);\n\n  /* Free resources */\n  if (msg != NULL)\n    gst_message_unref (msg);\n  gst_plugin_feature_list_free (list);\n  gst_object_unref (bus);\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  return 0;\n}\n</code></pre>\n<blockquote>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"information\" id=\"information\"> If you need help to compile this code, refer to the\n<strong>Building the tutorials</strong> section for your platform: <a href=\"../../installing/on-mac-osx.html\">Mac</a> or\n<a href=\"../../installing/on-windows.html\">Windows</a> or use this specific command on Linux:</p>\n<p><code>gcc playback-tutorial-6.c -o playback-tutorial-6 `pkg-config --cflags --libs gstreamer-1.0`</code></p>\n<p>If you need help to run this code, refer to the <strong>Running the\ntutorials</strong> section for your platform: <a href=\"../../installing/on-mac-osx.html#building-the-tutorials\">Mac OS X</a>, <a href=\"../../installing/on-windows.html#running-the-tutorials\">Windows</a>, for\n<a href=\"../../installing/for-ios-development.html#building-the-tutorials\">iOS</a> or for <a href=\"../../installing/for-android-development.html#building-the-tutorials\">android</a>.</p>\n<p>This tutorial plays music streamed from the <a href=\"http://www.hbr1.com/\">HBR1</a> Internet radio station. A window should open displaying somewhat psychedelic color patterns moving with the music. The media is fetched from the Internet, so the window might take a few seconds to appear, depending on your connection speed.</p>\n<p>Required libraries: <code>gstreamer-1.0</code></p>\n</blockquote>\n<h2 id=\"walkthrough\">Walkthrough</h2>\n<p>First off, we indicate <code>playbin</code> that we want an audio visualization by\nsetting the <code>GST_PLAY_FLAG_VIS</code> flag. If the media already contains\nvideo, this flag has no effect.</p>\n<pre><code class=\"language-c\">/* Set the visualization flag */\ng_object_get (pipeline, \"flags\", &amp;flags, NULL);\nflags |= GST_PLAY_FLAG_VIS;\ng_object_set (pipeline, \"flags\", flags, NULL);\n</code></pre>\n<p>If no visualization plugin is enforced by the user, <code>playbin</code> will use\n<code>goom</code> (audio visualization will be disabled if <code>goom</code> is not\navailable). The rest of the tutorial shows how to find out the available\nvisualization elements and enforce one to <code>playbin</code>.</p>\n<pre><code class=\"language-c\">/* Get a list of all visualization plugins */\nlist = gst_registry_feature_filter (gst_registry_get (), filter_vis_features, FALSE, NULL);\n</code></pre>\n<p><code>gst_registry_feature_filter()</code> examines all elements currently in the\nGStreamer registry and selects those for which\nthe <code>filter_vis_features</code> function returns TRUE. This function selects\nonly the Visualization plugins:</p>\n<pre><code class=\"language-c\">/* Return TRUE if this is a Visualization element */\nstatic gboolean filter_vis_features (GstPluginFeature *feature, gpointer data) {\n  GstElementFactory *factory;\n\n  if (!GST_IS_ELEMENT_FACTORY (feature))\n    return FALSE;\n  factory = GST_ELEMENT_FACTORY (feature);\n  if (!g_strrstr (gst_element_factory_get_klass (factory), \"Visualization\"))\n    return FALSE;\n\n  return TRUE;\n}\n</code></pre>\n<p>A bit of theory regarding the organization of GStreamer elements is in\nplace: Each of the files that GStreamer loads at runtime is known as a\nPlugin (<code>GstPlugin</code>). A Plugin can contain many Features\n(<code>GstPluginFeature</code>). There are different kinds of Features, among them,\nthe Element Factories (<code>GstElementFactory</code>) that we have been using to\nbuild Elements (<code>GstElement</code>).</p>\n<p>This function simply disregards all Features which are not Factories,\nand then all Factories whose class (obtained with\n<code>gst_element_factory_get_klass()</code>) does not include \u201cVisualization\u201d.  As\nstated in the documentation for <code>GstElementFactory</code>, a Factory\u2019s class\nis a \u201cstring describing the type of element, as an unordered list\nseparated with slashes (/)\u201d. Examples of classes are \u201cSource/Network\u201d,\n\u201cCodec/Decoder/Video\u201d, \u201cCodec/Encoder/Audio\u201d or \u201cVisualization\u201d.</p>\n<pre><code class=\"language-c\">/* Print their names */\ng_print(\"Available visualization plugins:\\n\");\nfor (walk = list; walk != NULL; walk = g_list_next (walk)) {\n  const gchar *name;\n  GstElementFactory *factory;\n\n  factory = GST_ELEMENT_FACTORY (walk-&gt;data);\n  name = gst_element_factory_get_longname (factory);\n  g_print(\"  %s\\n\", name);\n\n  if (selected_factory == NULL || g_str_has_prefix (name, \"GOOM\")) {\n    selected_factory = factory;\n  }\n}\n</code></pre>\n<p>Once we have the list of Visualization plugins, we print their names\n(<code>gst_element_factory_get_longname()</code>) and choose one (in this case,\nGOOM).</p>\n<pre><code class=\"language-c\">/* We have now selected a factory for the visualization element */\ng_print (\"Selected '%s'\\n\", gst_element_factory_get_longname (selected_factory));\nvis_plugin = gst_element_factory_create (selected_factory, NULL);\nif (!vis_plugin)\n  return -1;\n</code></pre>\n<p>The selected factory is used to instantiate an actual <code>GstElement</code> which\nis then passed to <code>playbin</code> through the <code>vis-plugin</code> property:</p>\n<pre><code class=\"language-c\">/* set vis plugin for playbin */\ng_object_set (pipeline, \"vis-plugin\", vis_plugin, NULL);\n</code></pre>\n<p>And we are done.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This tutorial has shown:</p>\n<ul>\n<li>How to enable Audio Visualization in <code>playbin</code> with the\n<code>GST_PLAY_FLAG_VIS</code> flag</li>\n<li>How to enforce one particular visualization element with the\n<code>vis-plugin</code> <code>playbin</code> property</li>\n</ul>\n<p>It has been a pleasure having you here, and see you soon!</p>\n\n</div>\n\n\n\t"});