fragment_downloaded_cb({"url": "tutorials/ios/a-running-pipeline.html#introduction", "fragment": "Introduction \nWhen using a Graphical User Interface UI if the application waits for GStreamer calls to complete the user experience will suffer. The usual approach with the GTK toolkit for example is to relinquish control to a GLib GMainLoop and let it control the events coming from the UI or GStreamer. \nOther graphical toolkits that are not based on GLib like the Cocoa Touch framework used on iOS devices cannot use this option though. The solution used in this tutorial uses a GLib GMainLoop for its simplicity but moves it to a separate thread a Dispatch Queue different than the main one so it does not block the user interface operation. \nAdditionally this tutorial shows a few places where caution has to be taken when calling from Objective C to C and vice versa. \nThe code below builds a pipeline with an audiotestsrc and an autoaudiosink it plays an audible tone Two buttons in the UI allow setting the pipeline to PLAYING or PAUSED. A Label in the UI shows messages sent from the C code for errors and state changes \n"});