fragment_downloaded_cb({"url": "tutorials/ios/video.html#the-view-controller", "fragment": "The View Controller \nThe ViewControllerclass manages the UI instantiates the GStreamerBackend and also performs some UI related tasks on its behalf \nViewController.m \nWe expand the class to remember the width and height of the media we are currently playing \nIn later tutorials this data is retrieved from the GStreamer pipeline but in this tutorial for simplicity s sake the width and height of the media is constant and initialized in viewDidLoad \nAs shown below the GStreamerBackend constructor has also been expanded to accept another parameter the UIView where the video sink should draw. \nThe rest of the ViewControllercode is the same as the previous tutorial except for the code that adapts the video_view size to the media size respecting its aspect ratio \nThe viewDidLayoutSubviews method is called every time the main view size has changed for example due to a device orientation change and the entire layout has been recalculated. At this point we can access the bounds property of the video_container_view to retrieve its new size and change the video_view size accordingly. \nThe simple algorithm above maximizes either the width or the height of the video_view while changing the other axis so the aspect ratio of the media is preserved. The goal is to provide the GStreamer video sink with a surface of the correct proportions so it does not need to add black borders letterboxing which is a waste of processing power. \nThe final size is reported to the layout engine by changing the constant field in the width and height Constraints of the video_view. These constraints have been created in the storyboard and are accessible to the ViewControllerthrough IBOutlets as is usually done with other widgets. \n"});