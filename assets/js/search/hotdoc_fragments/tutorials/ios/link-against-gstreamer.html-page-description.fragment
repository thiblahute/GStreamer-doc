fragment_downloaded_cb({"url": "tutorials/ios/link-against-gstreamer.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"link-against-gstreamer.md\">\n<h1 id=\"ios-tutorial-1-link-against-gstreamer\">iOS tutorial 1: Link against GStreamer</h1>\n<h2 id=\"goal\">Goal</h2>\n<p><img src=\"images/tutorials/ios-link-against-gstreamer-screenshot.png\" alt=\"screenshot\" id=\"screenshot\"></p>\n<p>The first iOS tutorial is simple. The objective is to get the GStreamer\nversion and display it on screen. It exemplifies how to link against the\nGStreamer library from Xcode using objective-C.</p>\n<h2 id=\"hello-gstreamer\">Hello GStreamer!</h2>\n<p>The tutorials code are in the\n<a href=\"https://cgit.freedesktop.org/gstreamer/gst-docs/\">gst-docs</a> in the\n<code>tutorials/xcode iOS</code> folder.</p>\n<p>It was created using the GStreamer Single View\nApplication template. The view contains only a <code>UILabel</code> that will be\nused to display the GStreamer's version to the user.</p>\n<h2 id=\"the-user-interface\">The User Interface</h2>\n<p>The UI uses storyboards and contains a single <code>View</code> with a centered\n<code>UILabel</code>. The <code>ViewController</code> for the <code>View</code> links its\n<code>label</code> variable to this <code>UILabel</code> as an <code>IBOutlet</code>.</p>\n<p><strong>ViewController.h</strong></p>\n<pre><code>#import &lt;UIKit/UIKit.h&gt;\n\n@interface ViewController : UIViewController {\n    IBOutlet UILabel *label;\n}\n\n@property (retain,nonatomic) UILabel *label;\n\n@end\n</code></pre>\n<h2 id=\"the-gstreamer-backend\">The GStreamer backend</h2>\n<p>All GStreamer-handling code is kept in a single Objective-C class called\n<code>GStreamerBackend</code>. In successive tutorials it will get expanded, but,\nfor now, it only contains a method to retrieve the GStreamer version.</p>\n<p>The <code>GStreamerBackend</code> is made in Objective-C so it can take care of the\nfew C-to-Objective-C conversions that might be necessary (like <code>char *</code> to <code>NSString *</code>, for example). This eases the usage of this class by\nthe UI code, which is typically made in pure Objective-C.\n<code>GStreamerBackend</code> serves exactly the same purpose as the JNI code in\nthe <a href=\"../android/index.html\">Android tutorials</a>.</p>\n<p><strong>GStreamerBackend.m</strong></p>\n<pre><code>#import \"GStreamerBackend.h\"\n\n#include &lt;gst/gst.h&gt;\n\n@implementation GStreamerBackend\n\n-(NSString*) getGStreamerVersion\n{\n    char *version_utf8 = gst_version_string();\n    NSString *version_string = [NSString stringWithUTF8String:version_utf8];\n    g_free(version_utf8);\n    return version_string;\n}\n\n@end\n</code></pre>\n<p>The <code>getGStreamerVersion()</code> method simply calls\n<code>gst_version_string()</code> to obtain a string describing this version of\nGStreamer. This <a href=\"http://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8\">Modified\nUTF8</a> string is then\nconverted to a <code>NSString *</code> by <code>NSString:stringWithUTF8String</code>and\nreturned. Objective-C will take care of freeing the memory used by the\nnew <code>NSString *</code>, but we need to free the <code>char *</code> returned\nby <code>gst_version_string()</code>.</p>\n<h2 id=\"the-view-controller\">The View Controller</h2>\n<p>The view controller instantiates the GStremerBackend and asks it for the\nGStreamer version to display at the label. That's it!</p>\n<p><strong>ViewController.m</strong></p>\n<pre><code>#import \"ViewController.h\"\n#import \"GStreamerBackend.h\"\n\n@interface ViewController () {\n    GStreamerBackend *gst_backend;\n}\n\n@end\n\n@implementation ViewController\n\n@synthesize label;\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    gst_backend = [[GStreamerBackend alloc] init];\n\n    label.text = [NSString stringWithFormat:@\"Welcome to %@!\", [gst_backend getGStreamerVersion]];\n}\n\n- (void)didReceiveMemoryWarning\n{\n    [super didReceiveMemoryWarning];\n    // Dispose of any resources that can be recreated.\n}\n\n@end\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This ends the first iOS tutorial. It has shown that, due to the\ncompatibility of C and Objective-C, adding GStreamer support to an iOS\napp is as easy as it is on a Desktop application. An extra Objective-C\nwrapper has been added (the <code>GStreamerBackend</code> class) for clarity, but\ncalls to the GStreamer framework are valid from any part of the\napplication code.</p>\n<p>The following tutorials detail the few places in which care has to be\ntaken when developing specifically for the iOS platform.</p>\n<p>It has been a pleasure having you here, and see you soon!</p>\n\n</div>\n\n\n\t"});