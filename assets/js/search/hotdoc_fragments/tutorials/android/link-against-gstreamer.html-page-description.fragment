fragment_downloaded_cb({"url": "tutorials/android/link-against-gstreamer.html#page-description", "fragment": "\nThis first Android tutorial is extremely simple it just retrieves the GStreamer version and displays it on the screen. It exemplifies how to access GStreamer C code from Java and verifies that there have been no linkage problems. \nThe tutorial code is in the gst docs in the tutorials android tutorial subdirectory. This directories contains the usual Android NDK structure a src folder for the Java code a jni folder for the C code and a res folder for UI resources. \nWe recommend that you open this project in Eclipse as explained in Installing for Android development so you can easily see how all the pieces fit together. \nLet s first introduce the Java code then the C code and finally the makefile that allows GStreamer integration. \nsrc org freedesktop gstreamer tutorials tutorial_1 Tutorial1.java \nCalls from Java to C happen through native methods like the one declared here \nThis tells Java that there exists a method with this signature somewhere so it compiles happily. It is your responsibility to ensure that at runtime this method is accessible. This is accomplished by the C code shown later. \nThe first bit of code that gets actually executed is the static initializer of the class \nIt loads libgstreamer_android.so which contains all GStreamer methods and libtutorial so which contains the C part of this tutorial explained below. \nUpon loading each of these libraries JNI_OnLoad method is executed. It basically registers the native methods that these libraries expose. The GStreamer library only exposes a init method which initializes GStreamer and registers all plugins The tutorial library is explained later below \nNext in the OnCreate method of the Activity we actually initialize GStreamer by calling GStreamer.init This method requires a Context so it cannot be called from the static initializer but there is no danger in calling it multiple times as all but the first time the calls will be ignored. \nShould initialization fail the init method would throw an Exception with the details provided by the GStreamer library. \nThen the native method nativeGetGStreamerInfo is called and a string is retrieved which is used to format the content of the TextView in the UI. \nThis finishes the UI part of this tutorial. Let s take a look at the C code \njni tutorial c \nThe JNI_OnLoad method is executed every time the Java Virtual Machine VM loads a library. \nHere we retrieve the JNI environment needed to make calls that interact with Java \nAnd then locate the class containing the UI part of this tutorial using FindClass \nFinally we register our native methods with RegisterNatives this is we provide the code for the methods we advertised in Java using the native keyword \nThe native_methods array describes each one of the methods to register only one in this tutorial For each method it provides its Java name its type signature and a pointer to the C function implementing it \nThe only native method used in this tutorial is nativeGetGStreamerInfo \nIt simply calls gst_version_string to obtain a string describing this version of GStreamer. This Modified UTF8 string is then converted to UTF16 by NewStringUTF as required by Java and returned. Java will be responsible for freeing the memory used by the new UTF16 String but we must free the char returned by gst_version_string \njni Android.mk \nThis is a barebones makefile for a project with GStreamer support. It simply states that it depends on the libgstreamer_android.so library line and requires the coreelements plugin line More complex applications will probably add more libraries and plugins to Android.mk \nThis ends the first Android tutorial. It has shown that besides the interconnection between Java and C which abides to the standard JNI procedure adding GStreamer support to an Android application is not any more complicated than adding it to a desktop application. \nThe following tutorials detail the few places in which care has to be taken when developing specifically for the Android platform. \nAs usual it has been a pleasure having you here and see you soon \n"});