fragment_downloaded_cb({"url": "tutorials/android/a-running-pipeline.html#check_initialization_complete", "fragment": "check_initialization_complete \nThis method does not do much in this tutorial but it will also be used in the next ones with progressively more complex functionality. Its purpose is to check if the native code is ready to accept commands and if so notify the UI code. \nIn tutorial the only conditions are the code is not already initialized and the main loop is running. If these two are met the Java onGStreamerInitialized method is called via the CallVoidMethod JNI call. \nHere comes a tricky bit. JNI calls require a JNI Environment which is different for every thread. C methods called from Java receive a JNIEnv pointer as a parameter but this is not the situation with check_initialization_complete Here we are in a thread which has never been called from Java so we have no JNIEnv. We need to use the JavaVM pointer passed to us in the JNI_OnLoad method and shared among all threads to attach this thread to the Java Virtual Machine and obtain a JNIEnv. This JNIEnv is stored in the Thread Local Storage TLS using the pthread key we created in JNI_OnLoad so we do not need to attach the thread anymore. \nThis behavior is implemented in the get_jni_env method used for example in check_initialization_complete as we have just seen. Let s see how it works step by step \n"});