fragment_downloaded_cb({"url": "tutorials/android/link-against-gstreamer.html#hello-gstreamer-java-code", "fragment": "Hello GStreamer Java code \nThe tutorial code is in the gst docs in the tutorials android tutorial subdirectory. This directories contains the usual Android NDK structure a src folder for the Java code a jni folder for the C code and a res folder for UI resources. \nWe recommend that you open this project in Eclipse as explained in Installing for Android development so you can easily see how all the pieces fit together. \nLet s first introduce the Java code then the C code and finally the makefile that allows GStreamer integration. \nsrc org freedesktop gstreamer tutorials tutorial_1 Tutorial1.java \nCalls from Java to C happen through native methods like the one declared here \nThis tells Java that there exists a method with this signature somewhere so it compiles happily. It is your responsibility to ensure that at runtime this method is accessible. This is accomplished by the C code shown later. \nThe first bit of code that gets actually executed is the static initializer of the class \nIt loads libgstreamer_android.so which contains all GStreamer methods and libtutorial so which contains the C part of this tutorial explained below. \nUpon loading each of these libraries JNI_OnLoad method is executed. It basically registers the native methods that these libraries expose. The GStreamer library only exposes a init method which initializes GStreamer and registers all plugins The tutorial library is explained later below \nNext in the OnCreate method of the Activity we actually initialize GStreamer by calling GStreamer.init This method requires a Context so it cannot be called from the static initializer but there is no danger in calling it multiple times as all but the first time the calls will be ignored. \nShould initialization fail the init method would throw an Exception with the details provided by the GStreamer library. \nThen the native method nativeGetGStreamerInfo is called and a string is retrieved which is used to format the content of the TextView in the UI. \nThis finishes the UI part of this tutorial. Let s take a look at the C code \n"});