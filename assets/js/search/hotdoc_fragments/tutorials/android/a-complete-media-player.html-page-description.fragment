fragment_downloaded_cb({"url": "tutorials/android/a-complete-media-player.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"a-complete-media-player.md\">\n        <h1 id=\"android-tutorial-5-a-complete-media-player\">Android tutorial 5: A Complete media player</h1>\n<h2 id=\"goal\">Goal!</h2>\n<p><img src=\"images/tutorials/android-a-complete-media-player-screenshot.png\" alt=\"screenshot\" id=\"screenshot\"></p>\n<p>This tutorial wants to be the \u201cdemo application\u201d that showcases what can\nbe done with GStreamer in the Android platform.</p>\n<p>It is intended to be downloaded in final, compiled, form rather than\nanalyzed for its pedagogical value, since it adds very little GStreamer\nknowledge over what has already been shown in <a href=\"media-player.html\">Android tutorial 4: A basic media player</a>.</p>\n<p><strong>FIXME: Do we want to provide a binary of the app?</strong></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The previous tutorial already implemented a basic media player. This one\nsimply adds a few finishing touches. In particular, it adds the\ncapability to choose the media to play, and disables the screensaver\nduring media playback.</p>\n<p>These are not features directly related to GStreamer, and are therefore\noutside the scope of these tutorials. Only a few implementation pointers\nare given here.</p>\n<h2 id=\"registering-as-a-media-player\">Registering as a media player</h2>\n<p>The <code>AndroidManifest.xml</code> tells the Android system the capabilities of\nthe application. By specifying in the <code>intent-filter</code> of the activity\nthat it understands the <code>audio/*</code>, <code>video/*</code> and <code>image/*</code> MIME types,\nthe tutorial will be offered as an option whenever an application\nrequires such medias to be viewed.</p>\n<p>\u201cUnfortunately\u201d, GStreamer knows more file formats than Android does,\nso, for some files, Android will not provide a MIME type. For these\ncases, a new <code>intent-filter</code> has to be provided which ignores MIME types\nand focuses only in the filename extension. This is inconvenient because\nthe list of extensions can be large, but there does not seem to be\nanother option. In this tutorial, only a very short list of extensions\nis provided, for simplicity.</p>\n<p>Finally, GStreamer can also playback remote files, so URI schemes like\n<code>http</code> are supported in another <code>intent-filter</code>. Android does not\nprovide MIME types for remote files, so the filename extension list has\nto be provided again.</p>\n<p>Once we have informed the system of our capabilities, it will start\nsending\n<a href=\"http://developer.android.com/reference/android/content/Intent.html\">Intents</a>\nto invoke our activity, which will contain the desired URI to play. In\nthe <code>onCreate()</code> method the intent that invoked the activity is\nretrieved and checked for such URI.</p>\n<h2 id=\"implementing-a-file-chooser-dialog\">Implementing a file chooser dialog</h2>\n<p>The UI includes a new button ![media-next) which\nwas not present in <a href=\"media-player.html\">Android tutorial 4: A basic media player</a>. It\ninvokes a file chooser dialog (based on the <a href=\"http://code.google.com/p/android-file-dialog/\">Android File\nDialog</a> project) that\nallows you to choose a local media file, no matter what extension or\nMIME type it has.</p>\n<p>If a new media is selected, it is passed onto the native code (which\nwill set the pipeline to READY, pass the URI onto <code>playbin</code>, and bring\nthe pipeline back to the previous state). The current position is also\nreset, so the new clip does not start in the previous position.</p>\n<h2 id=\"preventing-the-screen-from-turning-off\">Preventing the screen from turning off</h2>\n<p>While watching a movie, there is typically no user activity. After a\nshort period of such inactivity, Android will dim the screen, and then\nturn it off completely. To prevent this, a <a href=\"http://developer.android.com/reference/android/os/PowerManager.WakeLock.html\">Wake\nLock</a>\nis used. The application acquires the lock when the Play button is\npressed, so the screen is never turned off, and releases it when the\nPause button is pressed.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This finishes the series of Android tutorials. Each one of the\npreceding tutorials has evolved on top of the previous one, showing\nhow to implement a particular set of features, and concluding in this\ntutorial 5. The goal of tutorial 5 is to build a complete media player\nwhich can already be used to showcase the integration of GStreamer and\nAndroid.</p>\n<p>It has been a pleasure having you here, and see you soon!</p>\n\n        \n\n    </div>\n\n\n        "});