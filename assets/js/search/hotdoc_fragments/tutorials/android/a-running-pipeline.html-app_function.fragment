fragment_downloaded_cb({"url": "tutorials/android/a-running-pipeline.html#app_function", "fragment": "app_function \nIt first creates a GLib context so all GSource are kept in the same place. This also helps cleaning after GSources created by other libraries which might not have been properly disposed of. A new context is created with g_main_context_new and then it is made the default one for the thread with g_main_context_push_thread_default \nIt then creates a pipeline the easy way with gst parse launch In this case it is simply an audiotestsrc which produces a continuous tone and an autoaudiosink with accompanying adapter elements. \nThese lines create a bus signal watch and connect to some interesting signals just like we have been doing in the basic tutorials. The creation of the watch is done step by step instead of using gst_bus_add_signal_watch to exemplify how to use a custom GLib context. \nFinally the main loop is created and set to run. When it exits because somebody else calls g_main_loop_quit the main loop is disposed of. Before entering the main loop though check_initialization_complete is called. This method checks if all conditions are met to consider the native code ready to accept commands. Since having a running main loop is one of the conditions check_initialization_complete is called here. This method is reviewed below. \nOnce the main loop has quit all resources are freed in lines to \n"});