fragment_downloaded_cb({"url": "tutorials/android/a-running-pipeline.html#a-pipeline-on-android-c-code", "fragment": "A pipeline on Android C code \njni tutorial c \nLet s start with the CustomData structure. We have seen it in most of the basic tutorials and it is used to hold all our information in one place so we can easily pass it around to callbacks \nWe will see the meaning of each member as we go. What is interesting now is that CustomData belongs to the application so a pointer is kept in the Tutorial2 Java class in the private long native_custom_data attribute. Java only holds this pointer for us it is completely handled in C code. \nFrom C this pointer can be set and retrieved with the SetLongField and GetLongField JNI functions but two convenience macros have been defined SET_CUSTOM_DATA and GET_CUSTOM_DATA. These macros are handy because the long type used in Java is always bits wide but the pointer used in C can be either or bits wide. The macros take care of the conversion without warnings. \nThe JNI_OnLoad function is almost the same as the previous tutorial. It registers the list of native methods which is longer in this tutorial It also uses pthread_key_create to be able to store per thread information which is crucial to properly manage the JNI Environment as shown later. \nThis method is called from the static initializer of the Java class which is passed as a parameter since this is called from a static method it receives a class object instead of an instance object In order for C code to be able to call a Java method it needs to know the method s MethodID. This ID is obtained from the method s name and signature and can be cached. The purpose of the gst_native_class_init function is to obtain the IDs of all the methods and fields that the C code will need. If some ID cannot be retrieved the calling Java class does not offer the expected interface and execution should halt which is not currently done for simplicity \nLet s review now the first native method which can be directly called from Java \n"});