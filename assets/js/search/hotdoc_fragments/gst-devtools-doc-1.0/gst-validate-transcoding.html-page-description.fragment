fragment_downloaded_cb({"url": "gst-devtools-doc-1.0/gst-validate-transcoding.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gst-validate-transcoding.md\">\n<h1 id=\"gstvalidatetranscoding\">gst-validate-transcoding</h1>\n<p><code>gst-validate-transcoding</code> is tool to create media files transcoding\npipelines running inside the GstValidate monitoring infrastructure.</p>\n<p>You can for example transcode any media file to Vorbis audio + VP8 video\nin a WebM container by doing:</p>\n<pre><code>gst-validate-transcoding-GST_API_VERSION file:///./file.ogg file:///.../transcoded.webm -o 'video/webm:video/x-vp8:audio/x-vorbis'\n</code></pre>\n<p><code>gst-validate-transcoding</code> will list every issue encountered during the\nexecution of the transcoding operation in a human readable report like\nthe one below:</p>\n<pre><code>issue : buffer is out of the segment range Detected on theoradec0.srcpad\nat 0:00:00.096556426 Details : buffer is out of segment and shouldn't be\npushed. Timestamp: 0:00:25.000 - duration: 0:00:00.040 Range:\n0:00:00.000 - 0:00:04.520 Description : buffer being pushed is out of\nthe current segment's start-stop range. Meaning it is going to be\ndiscarded downstream without any use\n</code></pre>\n<p>The return code of the process will be 18 in case a <code>CRITICAL</code> issue has\nbeen found.</p>\n<h2 id=\"the-encoding-profile-serialization-format\">The encoding profile serialization format</h2>\n<p>This is the serialization format of a <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingProfile\">GstEncodingProfile</a>.</p>\n<p>Internally the transcoding application uses <a href=\"../gst-plugins-base-plugins-doc-1.0/element-encodebin.html#encodebin\">GstEncodeBin</a>.\n<code>gst-validate-transcoding-GST_API_VERSION</code> uses its own serialization\nformat to describe the <a href=\"GstEncodeBin--profile\"><code>GstEncodeBin.profile</code></a> property of the\nencodebin.</p>\n<p>The simplest serialized profile looks like:</p>\n<pre><code>muxer_source_caps:videoencoder_source_caps:audioencoder_source_caps\n</code></pre>\n<p>For example to encode a stream into a WebM container, with an OGG audio\nstream and a VP8 video stream, the serialized <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingProfile\">GstEncodingProfile</a>\nwill look like:</p>\n<pre><code>video/webm:video/x-vp8:audio/x-vorbis\n</code></pre>\n<p>You can also set the preset name of the encoding profile using the\ncaps+preset_name syntax as in:</p>\n<pre><code>video/webm:video/x-vp8+youtube-preset:audio/x-vorbis\n</code></pre>\n<p>Moreover, you can set the <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#gst_encoding_profile_set_presence\">presence</a> property\nof an encoding profile using the <code>|presence</code> syntax as in:</p>\n<pre><code>video/webm:video/x-vp8|1:audio/x-vorbis\n</code></pre>\n<p>This field allows you to specify how many times maximum a\n<a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingProfile\">GstEncodingProfile</a> can be used inside an encodebin.</p>\n<p>You can also use the <code>restriction_caps-&gt;encoded_format_caps</code> syntax to\nspecify the <a href=\"GstEncodingProfile::restriction-caps\">restriction caps</a>\nto be set on a <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingProfile\">GstEncodingProfile</a>. It\ncorresponds to the restriction <a href=\"../libgstreamer-doc-1.0/c/gstcaps.html#GstCaps\">GstCaps</a> to apply before the encoder\nthat will be used in the profile. The fields present in restriction caps\nare properties of the raw stream (that is, before encoding), such as\nheight and width for video and depth and sampling rate for audio. This\nproperty does not make sense for muxers.</p>\n<p>To force a video stream to be encoded with a Full HD resolution (using\nWebM as the container format, VP8 as the video codec and Vorbis as the\naudio codec), you should use:</p>\n<pre><code>video/webm:video/x-raw,width=1920,height=1080-&gt;video/x-vp8:audio/x-vorbis\n</code></pre>\n<h3 id=\"some-serialized-encoding-formats-examples\">Some serialized encoding formats examples:</h3>\n<p>MP3 audio and H264 in MP4:</p>\n<div class=\"informalexample\">\n<pre><code>video/quicktime,variant=iso:video/x-h264:audio/mpeg,mpegversion=1,layer=3\n</code></pre>\n</div>\n<p>Vorbis and theora in OGG:</p>\n<div class=\"informalexample\">\n<pre><code>application/ogg:video/x-theora:audio/x-vorbis\n</code></pre>\n</div>\n<p>AC3 and H264 in MPEG-TS:</p>\n<div class=\"informalexample\">\n<pre><code>video/mpegts:video/x-h264:audio/x-ac3\n</code></pre>\n</div>\n<h1 id=\"invocation\">Invocation</h1>\n<p><code>gst-validate-transcoding</code> takes and input URI and an output URI, plus a\nfew options to control how transcoding should be tested.</p>\n<h2 id=\"options\">Options</h2>\n<ul>\n<li><code>--set-scenario</code>: Let you set a scenario, it can be a full path to a scenario file or\nthe name of the scenario (name of the file without the <code>.scenario</code>\nextension).</li>\n<li><code>-l</code>, <code>--list-scenarios</code>: List the avalaible scenarios that can be run.</li>\n<li><code>--scenarios-defs-output-file</code>: The output file to store scenarios details. Implies\n<code>--list-scenario</code>.</li>\n<li><code>-t</code>, <code>--inspect-action-type</code>: Inspect the avalaible action types with which to write scenarios if\nno parameter passed, it will list all avalaible action types\notherwize will print the full description of the wanted types.</li>\n<li><code>--set-configs</code>: Let you set a config scenario. The scenario needs to be set as\n<code>config</code>. You can specify a list of scenarios separated by <code>:</code>. It\nwill override the GST_VALIDATE_SCENARIO environment variable.</li>\n<li><code>-e</code>, <code>--eos-on-shutdown</code>: If an EOS event should be sent to the pipeline if an interrupt is\nreceived, instead of forcing the pipeline to stop. Sending an EOS\nwill allow the transcoding to finish the files properly before\nexiting.</li>\n<li><code>-r</code>, <code>--force-reencoding</code>: Whether to try to force reencoding, meaning trying to only remux if\npossible, defaults to <code>TRUE</code>.</li>\n</ul>\n\n</div>\n\n\n        "});