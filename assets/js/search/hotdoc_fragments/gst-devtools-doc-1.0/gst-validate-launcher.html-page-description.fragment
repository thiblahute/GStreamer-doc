fragment_downloaded_cb({"url": "gst-devtools-doc-1.0/gst-validate-launcher.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gst-validate-launcher.md\">\n<h1 id=\"gstvalidatelauncher\">gst-validate-launcher</h1>\n<p><code>gst-validate-launcher</code> is an application to create full testsuites on\ntop of the GstValidate tools, testing behaviour with dynamic pipelines\nand user actions (seeking, changing the pipeline state, etc.) as\ndescribed by the <a href=\"GstValidateScenario\">scenario</a> format.</p>\n<h2 id=\"run-the-gstvalidate-default-testsuite\">Run the GstValidate default testsuite</h2>\n<p>GstValidate comes with a default testsuite to be executed on a default\nset of media samples. Those media samples are stored with <code>git-annex</code> so\nyou will need it to be able to launch the default testsuite.</p>\n<p>The first time you launch the testsuite, you will need to make sure that\nthe media samples are downloaded. To do so and launch the testsuite you\ncan simply do:</p>\n<pre><code>gst-validate-launcher validate --sync\n</code></pre>\n<p>This will only launch the GstValidate tests and not other applications\nthat might be supported (currently <code>ges-launch</code> is also supported and\nhas its own default testsuite).</p>\n<p>Launching the default testsuite will open/close many windows, you might\nwant to mute it so you can keep using your computer:</p>\n<pre><code>gst-validate-launcher validate --sync --mute\n</code></pre>\n<h2 id=\"example-of-a-testsuite-implementation\">Example of a testsuite implementation</h2>\n<p>To implement a testsuite, you will have to write some simple python code\nthat defines the tests to be launched by <code>gst-validate-launcher</code>.</p>\n<p>In this example, we will assume that you want to write a whole new\ntestsuite based on your own media samples and <a href=\"GstValidateScenario\">scenarios</a>. The\nset of media files and the testsuite implementation file will be\nstructured as follow:</p>\n<pre><code>testsuite_folder/\n  |-&gt; testsuite.py\n  |-&gt; sample_files/\n      |-&gt; file.mp4\n      |-&gt; file1.mkv\n      |-&gt; file2.ogv\n  |-&gt; scenarios\n      |-&gt; scenario.scenario\n      |-&gt; scenario1.scenario\n</code></pre>\n<p>You should generate the <code>.media_info</code> files. To generate them for local\nfiles, you can use:</p>\n<pre><code>gst-validate-launcher --medias-paths /path/to/sample_files/ --generate-media-info\n</code></pre>\n<p>For remote streams, you should use\n<code>gst-validate-media-check-GST_API_VERSION</code>. For an http stream you can\nfor example do:</p>\n<pre><code>gst-validate-media-check-GST_API_VERSION http://someonlinestream.com/thestream \\\n              --output-file /path/to/testsuite_folder/sample_files/thestream.stream_info\n</code></pre>\n<p>The <code>gst-validate-launcher</code> will use the generated <code>.media_info</code> and\n<code>.stream_info</code> files to validate the tests as those contain the\nnecessary information.</p>\n<p>Then you will need to write the <code>testsuite.py</code> file. You can for example\nimplement the following testsuite:</p>\n<pre><code class=\"language-python\">import os\n\n# Make sure gst-validate-launcher uses our media files\noptions.paths = os.path.dirname(os.path.realpath(__file__))\n\n# Make sure GstValidate is able to use our scenarios\n# from the testsuite_folder/scenarios folder\nos.environ[\"GST_VALIDATE_SCENARIOS_PATH\"] = \\\n    os.path.join(os.path.dirname(os.path.realpath(__file__)), \"scenarios\")\n\n# You can activate the following if you only care about critical issues in\n# the report:\n# os.environ[\"GST_VALIDATE\"] = \"print_criticals\"\n\n# Make gst-validate use our scenarios\nvalidate.add_scenarios([\"scenario\", \"scenario1\"])\n\n\n# Now add \"Theora and Vorbis in OGG container\" as a wanted transcoding format. That means\n# that conversion to this format will be tested on all the media files/streams.\nvalidate.add_encoding_formats([MediaFormatCombination(\"ogg\", \"vorbis\", \"theora\")])\n\n# Use the GstValidatePlaybinTestsGenerator to generate tests that will use playbin\n# and GstValidateTranscodingTestsGenerator to create media transcoding tests that\n# will use all the media format added with validate.add_encoding_formats\nvalidate.add_generators([validate.GstValidatePlaybinTestsGenerator(validate),\n                         GstValidateTranscodingTestsGenerator(self)])\n\n# Blacklist some tests that are known to fail because a feature is not supported\n# or due to any other reason.\n# The tuple defining those tests is of the form:\n# (\"regex defining the test name\", \"Reason why the test should be disabled\")\nvalidate.set_default_blacklist([\n        (\"validate.*.scenario1.*ogv$\"\n         \"oggdemux does not support some action executed in scenario1\")]\n        )\n</code></pre>\n<p>Once this is done, you've got a testsuite that will:</p>\n<ul>\n<li>\n<p>Run playbin pipelines on <code>file.mp4</code>, <code>file1.mkv</code> and <code>file2.ogv</code>&amp;gt;\nexecuting <code>scenario</code> and <code>scenario1</code> scenarios</p>\n</li>\n<li>\n<p>Transcode <code>file.mp4,</code> <code>file1.mkv</code> and <code>file2.ogv</code> to Theora and\nVorbis in a OGG container</p>\n</li>\n</ul>\n<p>The only thing to do to run the testsuite is:</p>\n<pre><code>gst-validate-launcher --config /path/to/testsuite_folder/testsuite.py\n</code></pre>\n<h1 id=\"invocation\">Invocation</h1>\n<p>You can find detailed information about the launcher by launching it:</p>\n<pre><code>gst-validate-launcher --help\n</code></pre>\n\n</div>\n\n\n\t"});