fragment_downloaded_cb({"url": "plugin-development/introduction/basics.html#buffer-allocation", "fragment": "Buffer Allocation \nBuffers are able to store chunks of memory of several different types. The most generic type of buffer contains memory allocated by malloc Such buffers although convenient are not always very fast since data often needs to be specifically copied into the buffer. \nMany specialized elements create buffers that point to special memory. For example the filesrc element usually maps a file into the address space of the application using mmap and creates buffers that point into that address range. These buffers created by filesrc act exactly like generic buffers except that they are read only. The buffer freeing code automatically determines the correct method of freeing the underlying memory. Downstream elements that receive these kinds of buffers do not need to do anything special to handle or unreference it. \nAnother way an element might get specialized buffers is to request them from a downstream peer through a GstBufferPool or GstAllocator. Elements can ask a GstBufferPool or GstAllocator from the downstream peer element. If downstream is able to provide these objects upstream can use them to allocate buffers. See more in Memory allocation. \nMany sink elements have accelerated methods for copying data to hardware or have direct access to hardware. It is common for these elements to be able to create a GstBufferPool or GstAllocator for their upstream peers. One such example is ximagesink. It creates buffers that contain XImages. Thus when an upstream peer copies data into the buffer it is copying directly into the XImage enabling ximagesink to draw the image directly to the screen instead of having to copy data into an XImage first. \nFilter elements often have the opportunity to either work on a buffer in place or work while copying from a source buffer to a destination buffer. It is optimal to implement both algorithms since the GStreamer framework can choose the fastest algorithm as appropriate. Naturally this only makes sense for strict filters elements that have exactly the same format on source and sink pads. \n"});