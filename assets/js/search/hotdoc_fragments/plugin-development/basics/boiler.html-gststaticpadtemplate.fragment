fragment_downloaded_cb({"url": "plugin-development/basics/boiler.html#gststaticpadtemplate", "fragment": "GstStaticPadTemplate \nA GstStaticPadTemplate is a description of a pad that the element will or might create and use. It contains \nA short name for the pad. \nPad direction. \nExistence property. This indicates whether the pad exists always an always pad only in some cases a sometimes pad or only if the application requested such a pad a request pad \nSupported types by this element capabilities \nFor example \nThose pad templates are registered during the _class_init function with the gst_element_class_add_pad_template For this function you need a handle the GstPadTemplate which you can create from the static pad template with gst_static_pad_template_get See below for more details on this. \nPads are created from these static templates in the element s _init function using gst_pad_new_from_static_template In order to create a new pad from this template using gst_pad_new_from_static_template you will need to declare the pad template as a global variable. More on this subject in Specifying the pads. \nThe last argument in a template is its type or list of supported types. In this example we use ANY which means that this element will accept all input. In real life situations you would set a media type and optionally a set of properties to make sure that only supported input will come in. This representation should be a string that starts with a media type then a set of comma separates properties with their supported values. In case of an audio filter that supports raw integer bit audio mono or stereo at any samplerate the correct template would look like this \nValues surrounded by curly brackets and are lists values surrounded by square brackets and are ranges. Multiple sets of types are supported too and should be separated by a semicolon Later in the chapter on pads we will see how to use types to know the exact format of a stream Specifying the pads. \n"});