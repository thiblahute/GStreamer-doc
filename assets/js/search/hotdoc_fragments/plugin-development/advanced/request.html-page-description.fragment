fragment_downloaded_cb({"url": "plugin-development/advanced/request.html#page-description", "fragment": "Until now we ve only dealt with pads that are always available. However there s also pads that are only being created in some cases or only if the application requests the pad. The first is called a sometimes the second is called a request pad. The availability of a pad always sometimes or request can be seen in a pad s template. This chapter will discuss when each of the two is useful how they are created and when they should be disposed. \nA sometimes pad is a pad that is created under certain conditions but not in all cases. This mostly depends on stream content demuxers will generally parse the stream header decide what elementary video audio subtitle etc. streams are embedded inside the system stream and will then create a sometimes pad for each of those elementary streams. At its own choice it can also create more than one instance of each of those per element instance. The only limitation is that each newly created pad should have a unique name. Sometimes pads are disposed when the stream data is disposed too i.e. when going from PAUSED to the READY state You should not dispose the pad on EOS because someone might re activate the pipeline and seek back to before the end of stream point. The stream should still stay valid after EOS at least until the stream data is disposed. In any case the element is always the owner of such a pad. \nThe example code below will parse a text file where the first line is a number n The next lines all start with a number to n which is the number of the source pad over which the data should be sent. \nThe code to parse this file and create the dynamic sometimes pads looks like this \nNote that we use a lot of checks everywhere to make sure that the content in the file is valid. This has two purposes first the file could be erroneous in which case we prevent a crash. The second and most important reason is that in extreme cases the file could be used maliciously to cause undefined behaviour in the plugin which might lead to security issues. Always assume that the file could be used to do bad things. \nRequest pads are similar to sometimes pads except that request are created on demand of something outside of the element rather than something inside the element. This concept is often used in muxers where for each elementary stream that is to be placed in the output system stream one sink pad will be requested. It can also be used in elements with a variable number of input or outputs pads such as the tee multi output or input selector multi input elements. \nTo implement request pads you need to provide a padtemplate with a GST_PAD_REQUEST presence and implement the request_new_pad virtual method in GstElement. To clean up you will need to implement the release_pad virtual method. \n"});