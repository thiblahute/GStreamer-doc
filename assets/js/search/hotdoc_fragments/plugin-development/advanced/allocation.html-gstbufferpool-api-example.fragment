fragment_downloaded_cb({"url": "plugin-development/advanced/allocation.html#gstbufferpool-api-example", "fragment": "GstBufferPool API example \nMany different bufferpool implementations can exist they are all subclasses of the base class GstBufferPool. For this example we will assume we somehow have access to a bufferpool either because we created it ourselves or because we were given one as a result of the ALLOCATION query as we will see below. \nThe bufferpool is initially in the inactive state so that we can configure it. Trying to configure a bufferpool that is not in the inactive state will fail. Likewise trying to activate a bufferpool that is not configured will fail. \nThe configuration of the bufferpool is maintained in a generic GstStructure that can be obtained with gst_buffer_pool_get_config Convenience methods exist to get and set the configuration options in this structure. After updating the structure it is set as the current configuration in the bufferpool again with gst_buffer_pool_set_config \nThe following options can be configured on a bufferpool \nThe caps of the buffers to allocate. \nThe size of the buffers. This is the suggested size of the buffers in the pool. The pool might decide to allocate larger buffers to add padding. \nThe minimum and maximum amount of buffers in the pool. When minimum is set to the bufferpool will pre allocate this amount of buffers. When maximum is not the bufferpool will allocate up to maximum amount of buffers. \nThe allocator and parameters to use. Some bufferpools might ignore the allocator and use its internal one. \nOther arbitrary bufferpool options identified with a string. a bufferpool lists the supported options with gst_buffer_pool_get_options and you can ask if an option is supported with gst_buffer_pool_has_option The option can be enabled by adding it to the configuration structure with gst_buffer_pool_config_add_option These options are used to enable things like letting the pool set metadata on the buffers or to add extra configuration options for padding for example. \nAfter the configuration is set on the bufferpool the pool can be activated with gst_buffer_pool_set_active pool TRUE From that point on you can use gst_buffer_pool_acquire_buffer to retrieve a buffer from the pool like this \nIt is important to check the return value of the acquire function because it is possible that it fails When your element shuts down it will deactivate the bufferpool and then all calls to acquire will return GST_FLOW_FLUSHNG. \nAll buffers that are acquired from the pool will have their pool member set to the original pool. When the last ref is decremented on the buffer GStreamer will automatically call gst_buffer_pool_release_buffer to release the buffer back to the pool. You or any other downstream element don t need to know if a buffer came from a pool you can just unref it. \n"});