fragment_downloaded_cb({"url": "plugin-development/advanced/allocation.html#define-the-metadata-api", "fragment": "Define the metadata API \nFirst we need to define what our API will look like and we will have to register this API to the system. This is important because this API definition will be used when elements negotiate what kind of metadata they will exchange. The API definition also contains arbitrary tags that give hints about what the metadata contains. This is important when we see how metadata is preserved when buffers pass through the pipeline. \nIf you are making a new implementation of an existing API you can skip this step and move on to the implementation step. \nFirst we start with making the my example meta.h header file that will contain the definition of the API and structure for our metadata. \nThe metadata API definition consists of the definition of the structure that holds a gint and a string. The first field in the structure must be GstMeta. \nWe also define a my_example_meta_api_get_type function that will register out metadata API definition. We also define a convenience macro gst_buffer_get_my_example_meta that simply finds and returns the metadata with our new API. \nNext let s have a look at how the my_example_meta_api_get_type function is implemented in the my example meta.c file. \nAs you can see it simply uses the gst_meta_api_type_register function to register a name for the api and some tags. The result is a new pointer GType that defines the newly registered API. \n"});