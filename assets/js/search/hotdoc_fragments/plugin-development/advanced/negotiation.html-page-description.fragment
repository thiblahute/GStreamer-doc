fragment_downloaded_cb({"url": "plugin-development/advanced/negotiation.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"negotiation.md\">\n<h1 id=\"caps-negotiation\">Caps negotiation</h1>\n<p>Caps negotiation is the act of finding a media format (GstCaps) between\nelements that they can handle. This process in GStreamer can in most\ncases find an optimal solution for the complete pipeline. In this\nsection we explain how this works.</p>\n<h2 id=\"caps-negotiation-basics\">Caps negotiation basics</h2>\n<p>In GStreamer, negotiation of the media format always follows the\nfollowing simple rules:</p>\n<ul>\n<li>\n<p>A downstream element suggest a format on its sinkpad and places the\nsuggestion in the result of the CAPS query performed on the sinkpad.\nSee also <a href=\"../../#implementing-a-caps-query-function\">Implementing a CAPS query\nfunction</a>.</p>\n</li>\n<li>\n<p>An upstream element decides on a format. It sends the selected media\nformat downstream on its source pad with a CAPS event. Downstream\nelements reconfigure themselves to handle the media type in the CAPS\nevent on the sinkpad.</p>\n</li>\n<li>\n<p>A downstream element can inform upstream that it would like to\nsuggest a new format by sending a RECONFIGURE event upstream. The\nRECONFIGURE event simply instructs an upstream element to restart\nthe negotiation phase. Because the element that sent out the\nRECONFIGURE event is now suggesting another format, the format in\nthe pipeline might change.</p>\n</li>\n</ul>\n<p>In addition to the CAPS and RECONFIGURE event and the CAPS query, there\nis an ACCEPT_CAPS query to quickly check if a certain caps can be\naccepted by an element.</p>\n<p>All negotiation follows these simple rules. Let's take a look at some\ntypical uses cases and how negotiation happens.</p>\n<h2 id=\"caps-negotiation-use-cases\">Caps negotiation use cases</h2>\n<p>In what follows we will look at some use cases for push-mode scheduling.\nThe pull-mode scheduling negotiation phase is discussed in <a href=\"../../#pull-mode-caps-negotiation\">Pull-mode\nCaps negotiation</a> and is actually similar\nas we will see.</p>\n<p>Since the sink pads only suggest formats and the source pads need to\ndecide, the most complicated work is done in the source pads. We can\nidentify 3 caps negotiation use cases for the source pads:</p>\n<ul>\n<li>\n<p>Fixed negotiation. An element can output one format only. See <a href=\"../../#fixed-negotiation\">Fixed\nnegotiation</a>.</p>\n</li>\n<li>\n<p>Transform negotiation. There is a (fixed) transform between the\ninput and output format of the element, usually based on some\nelement property. The caps that the element will produce depend on\nthe upstream caps and the caps that the element can accept depend on\nthe downstream caps. See <a href=\"../../#transform-negotiation\">Transform\nnegotiation</a>.</p>\n</li>\n<li>\n<p>Dynamic negotiation. An element can output many formats. See\n<a href=\"../../#dynamic-negotiation\">Dynamic negotiation</a>.</p>\n</li>\n</ul>\n<h3 id=\"fixed-negotiation\">Fixed negotiation</h3>\n<p>In this case, the source pad can only produce a fixed format. Usually\nthis format is encoded inside the media. No downstream element can ask\nfor a different format, the only way that the source pad will\nrenegotiate is when the element decides to change the caps itself.</p>\n<p>Elements that could implement fixed caps (on their source pads) are, in\ngeneral, all elements that are not renegotiable. Examples include:</p>\n<ul>\n<li>\n<p>A typefinder, since the type found is part of the actual data stream\nand can thus not be re-negotiated. The typefinder will look at the\nstream of bytes, figure out the type, send a CAPS event with the\ncaps and then push buffers of the type.</p>\n</li>\n<li>\n<p>Pretty much all demuxers, since the contained elementary data\nstreams are defined in the file headers, and thus not renegotiable.</p>\n</li>\n<li>\n<p>Some decoders, where the format is embedded in the data stream and\nnot part of the peercaps <em>and</em> where the decoder itself is not\nreconfigurable, too.</p>\n</li>\n<li>\n<p>Some sources that produce a fixed format.</p>\n</li>\n</ul>\n<p><code>gst_pad_use_fixed_caps()</code> is used on the source pad with fixed caps. As\nlong as the pad is not negotiated, the default CAPS query will return\nthe caps presented in the padtemplate. As soon as the pad is negotiated,\nthe CAPS query will return the negotiated caps (and nothing else). These\nare the relevant code snippets for fixed caps source pads.</p>\n<pre><code class=\"language-c\">\n[..]\n  pad = gst_pad_new_from_static_template (..);\n  gst_pad_use_fixed_caps (pad);\n[..]\n\n\n</code></pre>\n<p>The fixed caps can then be set on the pad by calling <code>gst_pad_set_caps ()</code>.</p>\n<pre><code class=\"language-c\">\n[..]\n    caps = gst_caps_new_simple (\"audio/x-raw\",\n        \"format\", G_TYPE_STRING, GST_AUDIO_NE(F32),\n        \"rate\", G_TYPE_INT, &lt;samplerate&gt;,\n        \"channels\", G_TYPE_INT, &lt;num-channels&gt;, NULL);\n    if (!gst_pad_set_caps (pad, caps)) {\n      GST_ELEMENT_ERROR (element, CORE, NEGOTIATION, (NULL),\n          (\"Some debug information here\"));\n      return GST_FLOW_ERROR;\n    }\n[..]\n\n\n</code></pre>\n<p>These types of elements also don't have a relation between the input\nformat and the output format, the input caps simply don't contain the\ninformation needed to produce the output caps.</p>\n<p>All other elements that need to be configured for the format should\nimplement full caps negotiation, which will be explained in the next few\nsections.</p>\n<h3 id=\"transform-negotiation\">Transform negotiation</h3>\n<p>In this negotiation technique, there is a fixed transform between the\nelement input caps and the output caps. This transformation could be\nparameterized by element properties but not by the content of the stream\n(see <a href=\"../../#fixed-negotiation\">Fixed negotiation</a> for that use-case).</p>\n<p>The caps that the element can accept depend on the (fixed\ntransformation) downstream caps. The caps that the element can produce\ndepend on the (fixed transformation of) the upstream caps.</p>\n<p>This type of element can usually set caps on its source pad from the\n<code>_event()</code> function on the sink pad when it received the CAPS event.\nThis means that the caps transform function transforms a fixed caps into\nanother fixed caps. Examples of elements include:</p>\n<ul>\n<li>\n<p>Videobox. It adds configurable border around a video frame depending\non object properties.</p>\n</li>\n<li>\n<p>Identity elements. All elements that don't change the format of the\ndata, only the content. Video and audio effects are an example.\nOther examples include elements that inspect the stream.</p>\n</li>\n<li>\n<p>Some decoders and encoders, where the output format is defined by\ninput format, like mulawdec and mulawenc. These decoders usually\nhave no headers that define the content of the stream. They are\nusually more like conversion elements.</p>\n</li>\n</ul>\n<p>Below is an example of a negotiation steps of a typical transform\nelement. In the sink pad CAPS event handler, we compute the caps for the\nsource pad and set those.</p>\n<pre><code class=\"language-c\">\n  [...]\n\nstatic gboolean\ngst_my_filter_setcaps (GstMyFilter *filter,\n               GstCaps *caps)\n{\n  GstStructure *structure;\n  int rate, channels;\n  gboolean ret;\n  GstCaps *outcaps;\n\n  structure = gst_caps_get_structure (caps, 0);\n  ret = gst_structure_get_int (structure, \"rate\", &amp;rate);\n  ret = ret &amp;&amp; gst_structure_get_int (structure, \"channels\", &amp;channels);\n  if (!ret)\n    return FALSE;\n\n  outcaps = gst_caps_new_simple (\"audio/x-raw\",\n      \"format\", G_TYPE_STRING, GST_AUDIO_NE(S16),\n      \"rate\", G_TYPE_INT, rate,\n      \"channels\", G_TYPE_INT, channels, NULL);\n  ret = gst_pad_set_caps (filter-&gt;srcpad, outcaps);\n  gst_caps_unref (outcaps);\n\n  return ret;\n}\n\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n    {\n      GstCaps *caps;\n\n      gst_event_parse_caps (event, &amp;caps);\n      ret = gst_my_filter_setcaps (filter, caps);\n      break;\n    }\n    default:\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n  return ret;\n}\n\n  [...]\n\n\n</code></pre>\n<h3 id=\"dynamic-negotiation\">Dynamic negotiation</h3>\n<p>A last negotiation method is the most complex and powerful dynamic\nnegotiation.</p>\n<p>Like with the transform negotiation in <a href=\"../../#transform-negotiation\">Transform\nnegotiation</a>, dynamic negotiation will perform a\ntransformation on the downstream/upstream caps. Unlike the transform\nnegotiation, this transform will convert fixed caps to unfixed caps.\nThis means that the sink pad input caps can be converted into unfixed\n(multiple) formats. The source pad will have to choose a format from all\nthe possibilities. It would usually like to choose a format that\nrequires the least amount of effort to produce but it does not have to\nbe. The selection of the format should also depend on the caps that can\nbe accepted downstream (see a QUERY_CAPS function in <a href=\"../../#implementing-a-caps-query-function\">Implementing a\nCAPS query function</a>).</p>\n<p>A typical flow goes like this:</p>\n<ul>\n<li>\n<p>Caps are received on the sink pad of the element.</p>\n</li>\n<li>\n<p>If the element prefers to operate in passthrough mode, check if\ndownstream accepts the caps with the ACCEPT_CAPS query. If it does,\nwe can complete negotiation and we can operate in passthrough mode.</p>\n</li>\n<li>\n<p>Calculate the possible caps for the source pad.</p>\n</li>\n<li>\n<p>Query the downstream peer pad for the list of possible caps.</p>\n</li>\n<li>\n<p>Select from the downstream list the first caps that you can\ntransform to and set this as the output caps. You might have to\nfixate the caps to some reasonable defaults to construct fixed caps.</p>\n</li>\n</ul>\n<p>Examples of this type of elements include:</p>\n<ul>\n<li>\n<p>Converter elements such as videoconvert, audioconvert,\naudioresample, videoscale, ...</p>\n</li>\n<li>\n<p>Source elements such as audiotestsrc, videotestsrc, v4l2src,\npulsesrc, ...</p>\n</li>\n</ul>\n<p>Let's look at the example of an element that can convert between\nsamplerates, so where input and output samplerate don't have to be the\nsame:</p>\n<pre><code class=\"language-c\">\nstatic gboolean\ngst_my_filter_setcaps (GstMyFilter *filter,\n               GstCaps *caps)\n{\n  if (gst_pad_set_caps (filter-&gt;srcpad, caps)) {\n    filter-&gt;passthrough = TRUE;\n  } else {\n    GstCaps *othercaps, *newcaps;\n    GstStructure *s = gst_caps_get_structure (caps, 0), *others;\n\n    /* no passthrough, setup internal conversion */\n    gst_structure_get_int (s, \"channels\", &amp;filter-&gt;channels);\n    othercaps = gst_pad_get_allowed_caps (filter-&gt;srcpad);\n    others = gst_caps_get_structure (othercaps, 0);\n    gst_structure_set (others,\n      \"channels\", G_TYPE_INT, filter-&gt;channels, NULL);\n\n    /* now, the samplerate value can optionally have multiple values, so\n     * we \"fixate\" it, which means that one fixed value is chosen */\n    newcaps = gst_caps_copy_nth (othercaps, 0);\n    gst_caps_unref (othercaps);\n    gst_pad_fixate_caps (filter-&gt;srcpad, newcaps);\n    if (!gst_pad_set_caps (filter-&gt;srcpad, newcaps))\n      return FALSE;\n\n    /* we are now set up, configure internally */\n    filter-&gt;passthrough = FALSE;\n    gst_structure_get_int (s, \"rate\", &amp;filter-&gt;from_samplerate);\n    others = gst_caps_get_structure (newcaps, 0);\n    gst_structure_get_int (others, \"rate\", &amp;filter-&gt;to_samplerate);\n  }\n\n  return TRUE;\n}\n\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n    {\n      GstCaps *caps;\n\n      gst_event_parse_caps (event, &amp;caps);\n      ret = gst_my_filter_setcaps (filter, caps);\n      break;\n    }\n    default:\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n  return ret;\n}\n\nstatic GstFlowReturn\ngst_my_filter_chain (GstPad    *pad,\n             GstObject *parent,\n             GstBuffer *buf)\n{\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n  GstBuffer *out;\n\n  /* push on if in passthrough mode */\n  if (filter-&gt;passthrough)\n    return gst_pad_push (filter-&gt;srcpad, buf);\n\n  /* convert, push */\n  out = gst_my_filter_convert (filter, buf);\n  gst_buffer_unref (buf);\n\n  return gst_pad_push (filter-&gt;srcpad, out);\n}\n\n\n</code></pre>\n<h2 id=\"upstream-caps-renegotiation\">Upstream caps (re)negotiation</h2>\n<p>Upstream negotiation's primary use is to renegotiate (part of) an\nalready-negotiated pipeline to a new format. Some practical examples\ninclude to select a different video size because the size of the video\nwindow changed, and the video output itself is not capable of rescaling,\nor because the audio channel configuration changed.</p>\n<p>Upstream caps renegotiation is requested by sending a\nGST_EVENT_RECONFIGURE event upstream. The idea is that it will\ninstruct the upstream element to reconfigure its caps by doing a new\nquery for the allowed caps and then choosing a new caps. The element\nthat sends out the RECONFIGURE event would influence the selection of\nthe new caps by returning the new preferred caps from its\nGST_QUERY_CAPS query function. The RECONFIGURE event will set the\nGST_PAD_FLAG_NEED_RECONFIGURE on all pads that it travels over.</p>\n<p>It is important to note here that different elements actually have\ndifferent responsibilities here:</p>\n<ul>\n<li>\n<p>Elements that want to propose a new format upstream need to first\ncheck if the new caps are acceptable upstream with an ACCEPT_CAPS\nquery. Then they would send a RECONFIGURE event and be prepared to\nanswer the CAPS query with the new preferred format. It should be\nnoted that when there is no upstream element that can (or wants) to\nrenegotiate, the element needs to deal with the currently configured\nformat.</p>\n</li>\n<li>\n<p>Elements that operate in transform negotiation according to\n<a href=\"../../#transform-negotiation\">Transform negotiation</a> pass the RECONFIGURE\nevent upstream. Because these elements simply do a fixed transform\nbased on the upstream caps, they need to send the event upstream so\nthat it can select a new format.</p>\n</li>\n<li>\n<p>Elements that operate in fixed negotiation (<a href=\"../../#fixed-negotiation\">Fixed\nnegotiation</a>) drop the RECONFIGURE event. These\nelements can't reconfigure and their output caps don't depend on the\nupstream caps so the event can be dropped.</p>\n</li>\n<li>\n<p>Elements that can be reconfigured on the source pad (source pads\nimplementing dynamic negotiation in <a href=\"../../#dynamic-negotiation\">Dynamic\nnegotiation</a>) should check its\nNEED_RECONFIGURE flag with <code>gst_pad_check_reconfigure ()</code> and it\nshould start renegotiation when the function returns TRUE.</p>\n</li>\n</ul>\n<h2 id=\"implementing-a-caps-query-function\">Implementing a CAPS query function</h2>\n<p>A <code>_query ()</code>-function with the GST_QUERY_CAPS query type is called\nwhen a peer element would like to know which formats this pad supports,\nand in what order of preference. The return value should be all formats\nthat this elements supports, taking into account limitations of peer\nelements further downstream or upstream, sorted by order of preference,\nhighest preference first.</p>\n<pre><code class=\"language-c\">\nstatic gboolean\ngst_my_filter_query (GstPad *pad, GstObject * parent, GstQuery * query)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_QUERY_TYPE (query)) {\n    case GST_QUERY_CAPS\n    {\n      GstPad *otherpad;\n      GstCaps *temp, *caps, *filt, *tcaps;\n      gint i;\n\n      otherpad = (pad == filter-&gt;srcpad) ? filter-&gt;sinkpad :\n                                           filter-&gt;srcpad;\n      caps = gst_pad_get_allowed_caps (otherpad);\n\n      gst_query_parse_caps (query, &amp;filt);\n\n      /* We support *any* samplerate, indifferent from the samplerate\n       * supported by the linked elements on both sides. */\n      for (i = 0; i &lt; gst_caps_get_size (caps); i++) {\n        GstStructure *structure = gst_caps_get_structure (caps, i);\n\n        gst_structure_remove_field (structure, \"rate\");\n      }\n\n      /* make sure we only return results that intersect our\n       * padtemplate */\n      tcaps = gst_pad_get_pad_template_caps (pad);\n      if (tcaps) {\n        temp = gst_caps_intersect (caps, tcaps);\n        gst_caps_unref (caps);\n        gst_caps_unref (tcaps);\n        caps = temp;\n      }\n      /* filter against the query filter when needed */\n      if (filt) {\n        temp = gst_caps_intersect (caps, filt);\n        gst_caps_unref (caps);\n        caps = temp;\n      }\n      gst_query_set_caps_result (query, caps);\n      gst_caps_unref (caps);\n      ret = TRUE;\n      break;\n    }\n    default:\n      ret = gst_pad_query_default (pad, parent, query);\n      break;\n  }\n  return ret;\n}\n\n\n</code></pre>\n<h2 id=\"pullmode-caps-negotiation\">Pull-mode Caps negotiation</h2>\n<p>WRITEME, the mechanism of pull-mode negotiation is not yet fully\nunderstood.</p>\n<p>Using all the knowledge you've acquired by reading this chapter, you\nshould be able to write an element that does correct caps negotiation.\nIf in doubt, look at other elements of the same type in our git\nrepository to get an idea of how they do what you want to do.</p>\n\n</div>\n\n\n\t"});