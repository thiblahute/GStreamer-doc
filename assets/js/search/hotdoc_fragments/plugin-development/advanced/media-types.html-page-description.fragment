fragment_downloaded_cb({"url": "plugin-development/advanced/media-types.html#page-description", "fragment": "Building a Simple Format for Testing \nTypefind Functions and Autoplugging \nIf you need a new format that has not yet been defined in our List of Defined Types you will want to have some general guidelines on media type naming properties and such. A media type would ideally be equivalent to the Mime type defined by IANA else it should be in the form type x name where type is the sort of data this media type handles audio video and name should be something specific for this specific type. Audio and video media types should try to support the general audio video properties see the list and can use their own properties too. To get an idea of what properties we think are useful see again the list. \nTake your time to find the right set of properties for your type. There is no reason to hurry. Also experimenting with this is generally a good idea. Experience learns that theoretically thought out types are good but they still need practical use to assure that they serve their needs. Make sure that your property names do not clash with similar properties used in other types. If they match make sure they mean the same thing properties with different types but the same names are not allowed. \nWith only defining the types we re not yet there. In order for a random data file to be recognized and played back as such we need a way of recognizing their type out of the blue. For this purpose typefinding was introduced. Typefinding is the process of detecting the type of a data stream. Typefinding consists of two separate parts first there s an unlimited number of functions that we call typefind functions which are each able to recognize one or more types from an input stream. Then secondly there s a small engine which registers and calls each of those functions. This is the typefind core. On top of this typefind core you would normally write an autoplugger which is able to use this type detection system to dynamically build a pipeline around an input stream. Here we will focus only on typefind functions. \nA typefind function usually lives in gst plugins base gst typefind gsttypefindfunctions.c unless there s a good reason like library dependencies to put it elsewhere. The reason for this centralization is to reduce the number of plugins that need to be loaded in order to detect a stream s type. Below is an example that will recognize AVI files which start with a RIFF tag then the size of the file and then an AVI tag \nNote that gst plugins gst typefind gsttypefindfunctions.c has some simplification macros to decrease the amount of code. Make good use of those if you want to submit typefinding patches with new typefind functions. \nAutoplugging has been discussed in great detail in the Application Development Manual. \n"});