fragment_downloaded_cb({"url": "plugin-development/advanced/negotiation.html#fixed-negotiation", "fragment": "Fixed negotiation \nIn this case the source pad can only produce a fixed format. Usually this format is encoded inside the media. No downstream element can ask for a different format the only way that the source pad will renegotiate is when the element decides to change the caps itself. \nElements that could implement fixed caps on their source pads are in general all elements that are not renegotiable. Examples include \nA typefinder since the type found is part of the actual data stream and can thus not be re negotiated. The typefinder will look at the stream of bytes figure out the type send a CAPS event with the caps and then push buffers of the type. \nPretty much all demuxers since the contained elementary data streams are defined in the file headers and thus not renegotiable. \nSome decoders where the format is embedded in the data stream and not part of the peercaps and where the decoder itself is not reconfigurable too. \nSome sources that produce a fixed format. \ngst_pad_use_fixed_caps is used on the source pad with fixed caps. As long as the pad is not negotiated the default CAPS query will return the caps presented in the padtemplate. As soon as the pad is negotiated the CAPS query will return the negotiated caps and nothing else These are the relevant code snippets for fixed caps source pads. \nThe fixed caps can then be set on the pad by calling gst_pad_set_caps \nThese types of elements also don t have a relation between the input format and the output format the input caps simply don t contain the information needed to produce the output caps. \nAll other elements that need to be configured for the format should implement full caps negotiation which will be explained in the next few sections. \n"});