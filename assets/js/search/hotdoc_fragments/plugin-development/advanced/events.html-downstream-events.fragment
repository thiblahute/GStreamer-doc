fragment_downloaded_cb({"url": "plugin-development/advanced/events.html#downstream-events", "fragment": "Downstream events \nDownstream events are received through the sink pad s event handler as set using gst_pad_set_event_function when the pad was created. \nDownstream events can travel in two ways they can be in band serialised with the buffer flow or out of band travelling through the pipeline instantly possibly not in the same thread as the streaming thread that is processing the buffers skipping ahead of buffers being processed or queued in the pipeline The most common downstream events SEGMENT CAPS TAG EOS are all serialised with the buffer flow. \nHere is a typical event function \nIf your element is chain based you will almost always have to implement a sink event function since that is how you are notified about segments caps and the end of the stream. \nIf your element is exclusively loop based you may or may not want a sink event function since the element is driving the pipeline it will know the length of the stream in advance or be notified by the flow return value of gst_pad_pull_range In some cases even loop based element may receive events from upstream though for example audio decoders with an id3demux or apedemux element in front of them or demuxers that are being fed input from sources that send additional information about the stream in custom events as DVD sources do \n"});