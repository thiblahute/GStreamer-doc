fragment_downloaded_cb({"url": "plugin-development/advanced/interfaces.html#video-overlay-interface", "fragment": "Video Overlay Interface \nThe GstVideoOverlay interface is used for main purposes \nTo get a grab on the Window where the video sink element is going to render. This is achieved by either being informed about the Window identifier that the video sink element generated or by forcing the video sink element to use a specific Window identifier for rendering. \nTo force a redrawing of the latest video frame the video sink element displayed on the Window. Indeed if the GstPipeline is in GST _STATE _PAUSED state moving the Window around will damage its content. Application developers will want to handle the Expose events themselves and force the video sink element to refresh the Window s content. \nA plugin drawing video output in a video window will need to have that window at one stage or another. Passive mode simply means that no window has been given to the plugin before that stage so the plugin created the window by itself. In that case the plugin is responsible of destroying that window when it s not needed any more and it has to tell the applications that a window has been created so that the application can use it. This is done using the have window handle message that can be posted from the plugin with the gst_video_overlay_got_window_handle method. \nAs you probably guessed already active mode just means sending a video window to the plugin so that video output goes there. This is done using the gst_video_overlay_set_window_handle method. \nIt is possible to switch from one mode to another at any moment so the plugin implementing this interface has to handle all cases. There are only methods that plugins writers have to implement and they most probably look like that \nYou will also need to use the interface methods to post messages when needed such as when receiving a CAPS event where you will know the video geometry and maybe create the window. \n"});