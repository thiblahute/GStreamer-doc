fragment_downloaded_cb({"url": "plugin-development/advanced/allocation.html#implementing-a-metadata-api", "fragment": "Implementing a metadata API \nNext we can make an implementation for a registered metadata API GType. The implementation detail of a metadata API are kept in a GstMetaInfo structure that you will make available to the users of your metadata API implementation with a my_example_meta_get_info function and a convenience MY_EXAMPLE_META_INFO macro. You will also make a method to add your metadata implementation to a GstBuffer. Your my example meta.h header file will need these additions \nLet s have a look at how these functions are implemented in the my example meta.c file. \ngst_meta_register registers the implementation details like the API that you implement and the size of the metadata structure along with methods to initialize and free the memory area. You can also implement a transform function that will be called when a certain transformation identified by the quark and quark specific data is performed on a buffer. \nLastly you implement a gst_buffer_add_ _meta that adds the metadata implementation to a buffer and sets the values of the metadata. \n"});