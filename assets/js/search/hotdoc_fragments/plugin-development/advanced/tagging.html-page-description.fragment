fragment_downloaded_cb({"url": "plugin-development/advanced/tagging.html#page-description", "fragment": "Tags are pieces of information stored in a stream that are not the content itself but they rather describe the content. Most media container formats support tagging in one way or another. Ogg uses VorbisComment for this MP3 uses ID3 AVI and WAV use RIFF s INFO list chunk etc. GStreamer provides a general way for elements to read tags from the stream and expose this to the user. The tags at least the metadata will be part of the stream inside the pipeline. The consequence of this is that transcoding of files from one format to another will automatically preserve tags as long as the input and output format elements both support tagging. \nTags are separated in two categories in GStreamer even though applications won t notice anything of this. The first are called metadata the second are called streaminfo. Metadata are tags that describe the non technical parts of stream content. They can be changed without needing to re encode the stream completely. Examples are author title or album The container format might still need to be re written for the tags to fit in though. Streaminfo on the other hand are tags that describe the stream contents technically. To change them the stream needs to be re encoded. Examples are codec or bitrate Note that some container formats like ID3 store various streaminfo tags as metadata in the file container which means that they can be changed so that they don t match the content in the file any more. Still they are called metadata because technically they can be changed without re encoding the whole stream even though that makes them invalid. Files with such metadata tags will have the same tag twice once as metadata once as streaminfo. \nThere is no special name for tag reading elements in GStreamer. There are specialised elements e.g. id3demux that do nothing besides tag reading but any GStreamer element may extract tags while processing data and most decoders demuxers and parsers do. \nA tag writer is called TagSetter. An element supporting both can be used in a tag editor for quick tag changing note in place tag editing is still poorly supported at the time of writing and usually requires tag extraction stripping and remuxing of the stream with new tags \nThe basic object for tags is a GstTagList. An element that is reading tags from a stream should create an empty taglist and fill this with individual tags. Empty tag lists can be created with gst_tag_list_new Then the element can fill the list using gst_tag_list_add or gst_tag_list_add_values Note that elements often read metadata as strings but the values in the taglist might not necessarily be strings they need to be of the type the tag was registered as the API documentation for each predefined tag should contain the type Be sure to use functions like gst_value_transform to make sure that your data is of the right type. After data reading you can send the tags downstream with the TAG event. When the TAG event reaches the sink it will post the TAG message on the pipeline s GstBus for the application to pick up. \nWe currently require the core to know the GType of tags before they are being used so all tags must be registered first. You can add new tags to the list of known tags using gst_tag_register If you think the tag will be useful in more cases than just your own element it might be a good idea to add it to gsttag.c instead. That s up to you to decide. If you want to do it in your own element it s easiest to register the tag in one of your class init functions preferably _class_init \nTag writers are the opposite of tag readers. Tag writers only take metadata tags into account since that s the only type of tags that have to be written into a stream. Tag writers can receive tags in three ways internal application and pipeline. Internal tags are tags read by the element itself which means that the tag writer is in that case a tag reader too. Application tags are tags provided to the element via the TagSetter interface which is just a layer Pipeline tags are tags provided to the element from within the pipeline. The element receives such tags via the GST_EVENT_TAG event which means that tags writers should implement an event handler. The tag writer is responsible for combining all these three into one list and writing them to the output stream. \nThe example below will receive tags from both application and pipeline combine them and write them to the output stream. It implements the tag setter so applications can set tags and retrieves pipeline tags from incoming events. \nWarning this example is outdated and doesn t work with the version of GStreamer anymore. \nNote that normally elements would not read the full stream before processing tags. Rather they would read from each sinkpad until they ve received data since tags usually come in before the first data buffer and process that. \n"});