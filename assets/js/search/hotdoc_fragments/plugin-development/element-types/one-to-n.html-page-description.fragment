fragment_downloaded_cb({"url": "plugin-development/element-types/one-to-n.html#page-description", "fragment": "Demuxers are the to N elements that need very special care. They are responsible for timestamping raw unparsed data into elementary video or audio streams and there are many things that you can optimize or do wrong. Here several culprits will be mentioned and common solutions will be offered. Parsers are demuxers with only one source pad. Also they only cut the stream into buffers they don t touch the data otherwise. \nAs mentioned previously in Caps negotiation demuxers should use fixed caps since their data type will not change. \nAs discussed in Different scheduling modes demuxer elements can be written in multiple ways \nThey can be the driving force of the pipeline by running their own task. This works particularly well for elements that need random access for example an AVI demuxer. \nThey can also run in push based mode which means that an upstream element drives the pipeline. This works particularly well for streams that may come from network such as Ogg. \nIn addition audio parsers with one output can in theory also be written in random access mode. Although simple playback will mostly work if your element only accepts one mode it may be required to implement multiple modes to work in combination with all sorts of applications such as editing. Also performance may become better if you implement multiple modes. See Different scheduling modes to see how an element can accept multiple scheduling modes. \n"});