fragment_downloaded_cb({"url": "plugin-development/element-types/base-classes.html#writing-a-sink", "fragment": "Writing a sink \nSinks are special elements in GStreamer. This is because sink elements have to take care of preroll which is the process that takes care that elements going into the GST_STATE_PAUSED state will have buffers ready after the state change. The result of this is that such elements can start processing data immediately after going into the GST_STATE_PLAYING state without requiring to take some time to initialize outputs or set up decoders all that is done already before the state change to GST_STATE_PAUSED successfully completes. \nPreroll however is a complex process that would require the same code in many elements. Therefore sink elements can derive from the GstBaseSink base class which does preroll and a few other utility functions automatically. The derived class only needs to implement a bunch of virtual functions and will work automatically. \nThe base class implement much of the synchronization logic that a sink has to perform. \nThe GstBaseSink base class specifies some limitations on elements though \nSink elements can derive from GstBaseSink using the usual GObject convenience macro G_DEFINE_TYPE \nThe advantages of deriving from GstBaseSink are numerous \nDerived implementations barely need to be aware of preroll and do not need to know anything about the technical implementation requirements of preroll. The base class does all the hard work. \nLess code to write in the derived class shared code and thus shared bugfixes \nThere are also specialized base classes for audio and video let s look at those a bit. \n"});