fragment_downloaded_cb({"url": "plugin-development/element-types/manager.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"manager.md\">\n        <h1 id=\"writing-a-manager\">Writing a Manager</h1>\n<p>Managers are elements that add a function or unify the function of\nanother (series of) element(s). Managers are generally a <code>GstBin</code> with\none or more ghostpads. Inside them is/are the actual element(s) that\nmatters. There is several cases where this is useful. For example:</p>\n<ul>\n<li>\n<p>To add support for private events with custom event handling to\nanother element.</p>\n</li>\n<li>\n<p>To add support for custom pad <code>_query ()</code> or <code>_convert ()</code> handling\nto another element.</p>\n</li>\n<li>\n<p>To add custom data handling before or after another element's data\nhandler function (generally its <code>_chain ()</code> function).</p>\n</li>\n<li>\n<p>To embed an element, or a series of elements, into something that\nlooks and works like a simple element to the outside world. This is\nparticular handy for implementing sources and sink elements with\nmultiple pads.</p>\n</li>\n</ul>\n<p>Making a manager is about as simple as it gets. You can derive from a\n<code>GstBin</code>, and in most cases, you can embed the required elements in the\n<code>_init ()</code> already, including setup of ghostpads. If you need any custom\ndata handlers, you can connect signals or embed a second element which\nyou control.</p>\n\n        \n\n    </div>\n\n\n        "});