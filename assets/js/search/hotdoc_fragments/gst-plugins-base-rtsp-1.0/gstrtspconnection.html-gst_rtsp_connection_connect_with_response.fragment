fragment_downloaded_cb({"url": "gst-plugins-base-rtsp-1.0/gstrtspconnection.html#gst_rtsp_connection_connect_with_response", "fragment": "gst_rtsp_connection_connect_with_response \nGstRtsp.RTSPConnection.connect_with_response \nGstRtsp.RTSPConnection.prototype.connect_with_response \nAttempt to connect to the url of conn made with gst_rtsp_connection_create. If timeout is NULL this function can block forever. If timeout contains a valid timeout this function will return GST_RTSP_ETIMEOUT after the timeout expired. If conn is set to tunneled response will contain a response to the tunneling request messages. \nThis function can be cancelled with gst_rtsp_connection_flush. \nParameters \na GstRTSPConnection \na GTimeVal timeout \na GstRTSPMessage \nGST_RTSP_OK when a connection could be made. \nSince \nAttempt to connect to the url of conn made with GstRtsp.rtsp_connection_create. If timeout is None this function can block forever. If timeout contains a valid timeout this function will return GstRtsp.RTSPResult.ETIMEOUT after the timeout expired. If conn is set to tunneled response will contain a response to the tunneling request messages. \nThis function can be cancelled with GstRtsp.RTSPConnection.flush. \nParameters \na GstRtsp.RTSPConnection \na GLib.TimeVal timeout \na GstRtsp.RTSPMessage \nGstRtsp.RTSPResult.OK when a connection could be made. \nSince \nAttempt to connect to the url of conn made with GstRtsp.prototype.rtsp_connection_create. If timeout is null this function can block forever. If timeout contains a valid timeout this function will return GstRtsp.RTSPResult.ETIMEOUT after the timeout expired. If conn is set to tunneled response will contain a response to the tunneling request messages. \nThis function can be cancelled with GstRtsp.RTSPConnection.prototype.flush. \nParameters \na GstRtsp.RTSPConnection \na GLib.TimeVal timeout \na GstRtsp.RTSPMessage \nGstRtsp.RTSPResult.OK when a connection could be made. \nSince \n"});