fragment_downloaded_cb({"url": "gst-plugins-base-rtsp-1.0/python/gstrtspconnection.html#page-description", "fragment": "Clear the list of authentication directives stored in conn. \nAttempt to connect to the url of conn made with GstRtsp.rtsp_connection_create. If timeout is None this function can block forever. If timeout contains a valid timeout this function will return GstRtsp.RTSPResult.etimeout after the timeout expired. If conn is set to tunneled response will contain a response to the tunneling request messages. \nThis function can be cancelled with GstRtsp.RTSPConnection.flush. \nIf conn received the first tunnel connection and conn2 received the second tunnel connection link the two connections together so that conn manages the tunneled connection. \nAfter this call conn2 cannot be used anymore and must be freed with GstRtsp.RTSPConnection.free. \nIf conn2 is None then only the base64 decoding context will be setup for conn. \nGet the file descriptor for reading. \nGets the anchor certificate authorities database that will be used after a server certificate can t be verified with the default certificate database. \nGets a Gio.TlsInteraction object to be used when the connection or certificate database need to interact with the user. This will be used to prompt the user for passwords where necessary. \nGets the TLS validation flags used to verify the peer certificate when a TLS connection is established. \nGet the tunnel session id the connection. \nGet the file descriptor for writing. \nGet the tunneling state of the connection. \nCalculate the next timeout for conn storing the result in timeout. \nReset the timeout of conn. \nSetup conn with authentication directives. This is not necesary for methods GstRtsp.RTSPAuthMethod.none and GstRtsp.RTSPAuthMethod.basic. For GstRtsp.RTSPAuthMethod.digest directives should be taken from the digest challenge in the WWW Authenticate response header and can include realm domain nonce opaque stale algorithm qop as per RFC2617. \nBy setting the HTTP mode to True the message parsing will support HTTP messages in addition to the RTSP messages. It will also disable the automatic handling of setting up an HTTP tunnel. \nSet the proxy host and port. \nConfigure conn to use the specified DSCP value. \nSets if the GstRtsp.RTSPConnection should remember the session id from the last response received and force it onto any further requests. \nThe default value is True \nSets the anchor certificate authorities database. This certificate database will be used to verify the server s certificate in case it can t be verified with the default certificate database first. \nSets a Gio.TlsInteraction object to be used when the connection or certificate database need to interact with the user. This will be used to prompt the user for passwords where necessary. \nSets the TLS validation flags to be used to verify the peer certificate when a TLS connection is established. \nSet the HTTP tunneling state of the connection. This must be configured before the conn is connected. \nGet the maximum amount of bytes and messages that will be queued in watch. See GstRtsp.RTSPWatch.set_send_backlog. \nSet the maximum amount of bytes and messages that will be queued in watch. When the maximum amounts are exceeded GstRtsp.RTSPWatch.write_data and GstRtsp.RTSPWatch.send_message will return GstRtsp.RTSPResult.enomem. \nA value of for bytes or messages means no limits. \nCreate a new GstRtsp.RTSPConnection for handling communication on the existing socket socket. The initial_buffer contains zero terminated data already read from socket which should be used before starting to read new data. \n"});