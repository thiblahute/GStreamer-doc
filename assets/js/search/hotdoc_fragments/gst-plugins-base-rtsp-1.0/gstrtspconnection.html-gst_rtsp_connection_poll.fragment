fragment_downloaded_cb({"url": "gst-plugins-base-rtsp-1.0/gstrtspconnection.html#gst_rtsp_connection_poll", "fragment": "GstRtsp.prototype.poll \nGstRtsp.RTSPConnection.poll \ngst_rtsp_connection_poll \nWait up to the specified timeout for the connection to become available for at least one of the operations specified in events. When the function returns with GstRtsp.RTSPResult.OK revents will contain a bitmask of available operations on conn. \ntimeout can be null in which case this function might block forever. \nThis function can be cancelled with GstRtsp.prototype.flush. \nParameters \na GstRtsp.RTSPConnection \na bitmask of GstRtsp.RTSPEvent flags to check \nlocation for result flags \na timeout \nGstRtsp.RTSPResult.OK on success. \nWait up to the specified timeout for the connection to become available for at least one of the operations specified in events. When the function returns with GstRtsp.RTSPResult.OK revents will contain a bitmask of available operations on conn. \ntimeout can be None in which case this function might block forever. \nThis function can be cancelled with GstRtsp.RTSPConnection.flush. \nParameters \na GstRtsp.RTSPConnection \na bitmask of GstRtsp.RTSPEvent flags to check \nlocation for result flags \na timeout \nGstRtsp.RTSPResult.OK on success. \nWait up to the specified timeout for the connection to become available for at least one of the operations specified in events. When the function returns with GST_RTSP_OK revents will contain a bitmask of available operations on conn. \ntimeout can be NULL in which case this function might block forever. \nThis function can be cancelled with gst_rtsp_connection_flush. \nParameters \na GstRTSPConnection \na bitmask of GstRTSPEvent flags to check \nlocation for result flags \na timeout \nGST_RTSP_OK on success. \n"});