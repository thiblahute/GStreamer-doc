fragment_downloaded_cb({"url": "gst-plugins-base-rtsp-1.0/javascript/gstrtspmessage.html#page-description", "fragment": "Add a header with key field and value to msg. This function takes a copy of value. \nAdd a header with key header and value to msg. This function takes a copy of value. \nAppend the currently configured headers in msg to the GLib.String str suitable for transmission. \nDump the contents of msg to stdout. \nFree the memory used by msg. \nGet the body of msg. data remains valid for as long as msg is valid and unchanged. \nGet the indx header value with key field from msg. The result in value stays valid as long as it remains present in msg. \nGet the index header value with key header from msg. The result in value stays valid as long as it remains present in msg. \nGet the message type of msg. \nInitialize msg. This function is mostly used when msg is allocated on the stack. The reverse operation of this is GstRtsp.RTSPMessage.prototype.unset. \nInitialize a new data GstRtsp.RTSPMessage for channel. \nInitialize msg as a request message with method and uri. To clear msg again use GstRtsp.RTSPMessage.prototype.unset. \nInitialize msg with code and reason. \nWhen reason is null the default reason for code will be used. \nWhen request is not null the relevant headers will be copied to the new response message. \nParses the credentials given in a WWW Authenticate or Authorization header. \nParse the data message msg and store the channel in channel. \nParse the request message msg and store the values method uri and version. The result locations can be null if one is not interested in its value. \nuri remains valid for as long as msg is valid and unchanged. \nParse the response message msg and store the values code reason and version. The result locations can be null if one is not interested in its value. \nreason remains valid for as long as msg is valid and unchanged. \nRemove the indx header with key field from msg. If indx equals all headers will be removed. \nRemove the index header with key header from msg. If index equals all matching headers will be removed. \nSet the body of msg to a copy of data. \nTake the body of msg and store it in data and size. After this method the body and size of msg will be set to null and respectively. \nSet the body of msg to data and size. This method takes ownership of data. \nAdd a header with key field and value to msg. This function takes ownership of value. \nAdd a header with key header and value to msg. This function takes ownership of value but not of header. \nUnset the contents of msg so that it becomes an uninitialized GstRtsp.RTSPMessage again. This function is mostly used in combination with GstRtsp.RTSPMessage.prototype.init_request GstRtsp.RTSPMessage.prototype.init_response and GstRtsp.RTSPMessage.prototype.init_data on stack allocated GstRtsp.RTSPMessage structures. \nCreate a new initialized GstRtsp.RTSPMessage. Free with GstRtsp.RTSPMessage.prototype.free. \nCreate a new data GstRtsp.RTSPMessage with channel and store the result message in msg. Free with GstRtsp.RTSPMessage.prototype.free. \nCreate a new GstRtsp.RTSPMessage with method and uri and store the result request message in msg. Free with GstRtsp.RTSPMessage.prototype.free. \nCreate a new response GstRtsp.RTSPMessage with code and reason and store the result message in msg. Free with GstRtsp.RTSPMessage.prototype.free. \nWhen reason is null the default reason for code will be used. \nWhen request is not null the relevant headers will be copied to the new response message. \nFree a null terminated array of credentials returned from GstRtsp.RTSPMessage.prototype.parse_auth_credentials. \nHTTP response message. \nGstRtsp.RTSPMsgType.prototype.data \n"});