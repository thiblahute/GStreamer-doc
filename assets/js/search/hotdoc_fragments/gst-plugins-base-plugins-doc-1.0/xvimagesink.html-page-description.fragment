fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/xvimagesink.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"xvimagesink\">\n<h1 id=\"xvimagesink\">xvimagesink</h1><p>XvImageSink renders video frames to a drawable (XWindow) on a local display\nusing the XVideo extension. Rendering to a remote display is theoretically\npossible but i doubt that the XVideo extension is actually available when\nconnecting to a remote display. This element can receive a Window ID from the\napplication through the GstVideoOverlay interface and will then render\nvideo frames in this drawable. If no Window ID was provided by the\napplication, the element will create its own internal window and render\ninto it.</p>\n<h2 id=\"scaling\">Scaling</h2>\n<p>The XVideo extension, when it's available, handles hardware accelerated\nscaling of video frames. This means that the element will just accept\nincoming video frames no matter their geometry and will then put them to the\ndrawable scaling them on the fly. Using the <a href=\"xvimagesink.html#GstXvImageSink:force-aspect-ratio\">force-aspect-ratio</a>\nproperty it is possible to enforce scaling with a constant aspect ratio,\nwhich means drawing black borders around the video frame.</p>\n<h2 id=\"events\">Events</h2>\n<p>XvImageSink creates a thread to handle events coming from the drawable. There\nare several kind of events that can be grouped in 2 big categories: input\nevents and window state related events. Input events will be translated to\nnavigation events and pushed upstream for other elements to react on them.\nThis includes events such as pointer moves, key press/release, clicks etc...\nOther events are used to handle the drawable appearance even when the data\nis not flowing (GST_STATE_PAUSED). That means that even when the element is\npaused, it will receive expose events from the drawable and draw the latest\nframe with correct borders/aspect-ratio.</p>\n<h2 id=\"pixel-aspect-ratio\">Pixel aspect ratio</h2>\n<p>When changing state to GST_STATE_READY, XvImageSink will open a connection to\nthe display specified in the <a href=\"xvimagesink.html#GstXvImageSink:display\">display</a> property or the\ndefault display if nothing specified. Once this connection is open it will\ninspect the display configuration including the physical display geometry and\nthen calculate the pixel aspect ratio. When receiving video frames with a\ndifferent pixel aspect ratio, XvImageSink will use hardware scaling to\ndisplay the video frames correctly on display's pixel aspect ratio.\nSometimes the calculated pixel aspect ratio can be wrong, it is\nthen possible to enforce a specific pixel aspect ratio using the\n<a href=\"xvimagesink.html#GstXvImageSink:pixel-aspect-ratio\">pixel-aspect-ratio</a> property.</p>\n<h2 id=\"examples\">Examples</h2>\n<pre><code>gst-launch-1.0 -v videotestsrc ! xvimagesink\n</code></pre>\n<p>A pipeline to test hardware scaling.\nWhen the test video signal appears you can resize the window and see that\nvideo frames are scaled through hardware (no extra CPU cost). By default\nthe image will never be distorted when scaled, instead black borders will\nbe added if needed.</p>\n<pre><code>gst-launch-1.0 -v videotestsrc ! xvimagesink force-aspect-ratio=false\n</code></pre>\n<p>Same pipeline with <a href=\"xvimagesink.html#GstXvImageSink:force-aspect-ratio\">force-aspect-ratio</a> property set to\nfalse. You can observe that no borders are drawn around the scaled image\nnow and it will be distorted to fill the entire frame instead of respecting\nthe aspect ratio.</p>\n<pre><code>gst-launch-1.0 -v videotestsrc ! navigationtest ! xvimagesink\n</code></pre>\n<p>A pipeline to test navigation events.\nWhile moving the mouse pointer over the test signal you will see a black box\nfollowing the mouse pointer. If you press the mouse button somewhere on the\nvideo and release it somewhere else a green box will appear where you pressed\nthe button and a red one where you released it. (The navigationtest element\nis part of gst-plugins-good.) You can observe here that even if the images\nare scaled through hardware the pointer coordinates are converted back to the\noriginal video frame geometry so that the box can be drawn to the correct\nposition. This also handles borders correctly, limiting coordinates to the\nimage area</p>\n<pre><code>gst-launch-1.0 -v videotestsrc ! video/x-raw, pixel-aspect-ratio=4/3 ! xvimagesink\n</code></pre>\n<p>This is faking a 4/3 pixel aspect ratio caps on video frames produced by\nvideotestsrc, in most cases the pixel aspect ratio of the display will be\n1/1. This means that XvImageSink will have to do the scaling to convert\nincoming frames to a size that will match the display pixel aspect ratio\n(from 320x240 to 320x180 in this case).</p>\n<pre><code>gst-launch-1.0 -v videotestsrc ! xvimagesink hue=100 saturation=-100 brightness=100\n</code></pre>\n<p>Demonstrates how to use the colorbalance interface.</p>\n\n</div>\n\n\n"});