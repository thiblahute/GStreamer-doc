fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/element-playbin3.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-playbin3\">\n<h1 id=\"playbin31\">playbin3</h1><p>playbin3 provides a stand-alone everything-in-one abstraction for an\naudio and/or video player. It differs from the previous playbin (playbin2)\nby supporting publication and selection of available streams via the\n<a href=\"../libgstreamer-doc-1.0/c/gststreamcollection.html#GstStreamCollection\">GstStreamCollection</a> message and <a href=\"../libgstreamer-doc-1.0/c/gstevent.html#GST_EVENT_SELECT_STREAMS\">GST_EVENT_SELECT_STREAMS</a> event API.</p>\n<p><emphasis>playbin3 is still experimental API and a technology preview.\nIts behaviour and exposed API is subject to change.</emphasis></p>\n<p>playbin3 can handle both audio and video files and features</p>\n<ul>\n<li>\n<p>automatic file type recognition and based on that automatic\nselection and usage of the right audio/video/subtitle demuxers/decoders</p>\n</li>\n<li>\n<p>auxilliary files - such as external subtitles and audio tracks</p>\n</li>\n<li>\n<p>visualisations for audio files</p>\n</li>\n<li>\n<p>subtitle support for video files. Subtitles can be store in external\nfiles.</p>\n</li>\n<li>\n<p>stream selection between different video/audio/subtitles streams</p>\n</li>\n<li>\n<p>meta info (tag) extraction</p>\n</li>\n<li>\n<p>easy access to the last video sample</p>\n</li>\n<li>\n<p>buffering when playing streams over a network</p>\n</li>\n<li>\n<p>volume control with mute option</p>\n</li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<p>A playbin element can be created just like any other element using\n<a href=\"../libgstreamer-doc-1.0/c/gstelementfactory.html#gst_element_factory_make\">gst_element_factory_make</a>. The file/URI to play should be set via the <a href=\"element-playbin3.html#GstPlayBin3:uri\">uri</a>\nproperty. This must be an absolute URI, relative file paths are not allowed.\nExample URIs are file:///home/joe/movie.avi or http://www.joedoe.com/foo.ogg</p>\n<p>Playbin3 is a <a href=\"../libgstreamer-doc-1.0/c/gstpipeline.html#GstPipeline\">GstPipeline</a>. It will notify the application of everything\nthat's happening (errors, end of stream, tags found, state changes, etc.)\nby posting messages on its <a href=\"../libgstreamer-doc-1.0/c/gstbus.html#GstBus\">GstBus</a>. The application needs to watch the\nbus.</p>\n<p>Playback can be initiated by setting the element to PLAYING state using\n<a href=\"../libgstreamer-doc-1.0/c/gstelement.html#gst_element_set_state\">gst_element_set_state</a>. Note that the state change will take place in\nthe background in a separate thread, when the function returns playback\nis probably not happening yet and any errors might not have occured yet.\nApplications using playbin3 should ideally be written to deal with things\ncompletely asynchroneous.</p>\n<p>When playback has finished (an EOS message has been received on the bus)\nor an error has occured (an ERROR message has been received on the bus) or\nthe user wants to play a different track, playbin3 should be set back to\nREADY or NULL state, then the <a href=\"element-playbin3.html#GstPlayBin3:uri\">uri</a> property should be set to the\nnew location and then playbin3 be set to PLAYING state again.</p>\n<p>Seeking can be done using <a href=\"../libgstreamer-doc-1.0/c/gstelement.html#gst_element_seek_simple\">gst_element_seek_simple</a> or <a href=\"../libgstreamer-doc-1.0/c/gstelement.html#gst_element_seek\">gst_element_seek</a>\non the playbin3 element. Again, the seek will not be executed\ninstantaneously, but will be done in a background thread. When the seek\ncall returns the seek will most likely still be in process. An application\nmay wait for the seek to finish (or fail) using <a href=\"../libgstreamer-doc-1.0/c/gstelement.html#gst_element_get_state\">gst_element_get_state</a> with\n-1 as the timeout, but this will block the user interface and is not\nrecommended at all.</p>\n<p>Applications may query the current position and duration of the stream\nvia <a href=\"../libgstreamer-doc-1.0/c/gstelement.html#gst_element_query_position\">gst_element_query_position</a> and <a href=\"../libgstreamer-doc-1.0/c/gstelement.html#gst_element_query_duration\">gst_element_query_duration</a> and\nsetting the format passed to GST_FORMAT_TIME. If the query was successful,\nthe duration or position will have been returned in units of nanoseconds.</p>\n<h2 id=\"advanced-usage-specifying-the-audio-and-video-sink\">Advanced Usage: specifying the audio and video sink</h2>\n<p>By default, if no audio sink or video sink has been specified via the\n<a href=\"element-playbin3.html#GstPlayBin3:audio-sink\">audio-sink</a> or <a href=\"element-playbin3.html#GstPlayBin3:video-sink\">video-sink</a> property, playbin3 will use the autoaudiosink\nand autovideosink elements to find the first-best available output method.\nThis should work in most cases, but is not always desirable. Often either\nthe user or application might want to specify more explicitly what to use\nfor audio and video output.</p>\n<p>If the application wants more control over how audio or video should be\noutput, it may create the audio/video sink elements itself (for example\nusing <a href=\"../libgstreamer-doc-1.0/c/gstelementfactory.html#gst_element_factory_make\">gst_element_factory_make</a>) and provide them to playbin3 using the\n<a href=\"element-playbin3.html#GstPlayBin3:audio-sink\">audio-sink</a> or <a href=\"element-playbin3.html#GstPlayBin3:video-sink\">video-sink</a> property.</p>\n<p>GNOME-based applications, for example, will usually want to create\ngconfaudiosink and gconfvideosink elements and make playbin3 use those,\nso that output happens to whatever the user has configured in the GNOME\nMultimedia System Selector configuration dialog.</p>\n<p>The sink elements do not necessarily need to be ready-made sinks. It is\npossible to create container elements that look like a sink to playbin3,\nbut in reality contain a number of custom elements linked together. This\ncan be achieved by creating a <a href=\"../libgstreamer-doc-1.0/c/gstbin.html#GstBin\">GstBin</a> and putting elements in there and\nlinking them, and then creating a sink <a href=\"../libgstreamer-doc-1.0/c/gstghostpad.html#GstGhostPad\">GstGhostPad</a> for the bin and pointing\nit to the sink pad of the first element within the bin. This can be used\nfor a number of purposes, for example to force output to a particular\nformat or to modify or observe the data before it is output.</p>\n<p>It is also possible to 'suppress' audio and/or video output by using\n'fakesink' elements (or capture it from there using the fakesink element's\n\"handoff\" signal, which, nota bene, is fired from the streaming thread!).</p>\n<h2 id=\"retrieving-tags-and-other-meta-data\">Retrieving Tags and Other Meta Data</h2>\n<p>Most of the common meta data (artist, title, etc.) can be retrieved by\nwatching for TAG messages on the pipeline's bus (see above).</p>\n<p>Other more specific meta information like width/height/framerate of video\nstreams or samplerate/number of channels of audio streams can be obtained\nfrom the negotiated caps on the sink pads of the sinks.</p>\n<h2 id=\"buffering\">Buffering</h2>\n<p>Playbin3 handles buffering automatically for the most part, but applications\nneed to handle parts of the buffering process as well. Whenever playbin3 is\nbuffering, it will post BUFFERING messages on the bus with a percentage\nvalue that shows the progress of the buffering process. Applications need\nto set playbin3 to PLAYING or PAUSED state in response to these messages.\nThey may also want to convey the buffering progress to the user in some\nway. Here is how to extract the percentage information from the message:</p>\n<pre><code class=\"language-[\"> switch (GST_MESSAGE_TYPE (msg)) {\n   case GST_MESSAGE_BUFFERING: {\n     gint percent = 0;\n     gst_message_parse_buffering (msg, &amp;percent);\n     g_print (\"Buffering (%u percent done)\", percent);\n     break;\n   }\n   ...\n }\n</code></pre>\n<p>Note that applications should keep/set the pipeline in the PAUSED state when\na BUFFERING message is received with a buffer percent value &lt; 100 and set\nthe pipeline back to PLAYING state when a BUFFERING message with a value\nof 100 percent is received (if PLAYING is the desired state, that is).</p>\n<h2 id=\"embedding-the-video-window-in-your-application\">Embedding the video window in your application</h2>\n<p>By default, playbin3 (or rather the video sinks used) will create their own\nwindow. Applications will usually want to force output to a window of their\nown, however. This can be done using the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-gstvideooverlay.html#GstVideoOverlay-struct\">GstVideoOverlay</a> interface, which most\nvideo sinks implement. See the documentation there for more details.</p>\n<h2 id=\"specifying-which-cddvd-device-to-use\">Specifying which CD/DVD device to use</h2>\n<p>The device to use for CDs/DVDs needs to be set on the source element\nplaybin3 creates before it is opened. The most generic way of doing this\nis to connect to playbin3's \"source-setup\" (or \"notify::source\") signal,\nwhich will be emitted by playbin3 when it has created the source element\nfor a particular URI. In the signal callback you can check if the source\nelement has a \"device\" property and set it appropriately. In some cases\nthe device can also be set as part of the URI, but it depends on the\nelements involved if this will work or not. For example, for DVD menu\nplayback, the following syntax might work (if the resindvd plugin is used):\ndvd://[/path/to/device]</p>\n<h2 id=\"handling-redirects\">Handling redirects</h2>\n<p>Some elements may post 'redirect' messages on the bus to tell the\napplication to open another location. These are element messages containing\na structure named 'redirect' along with a 'new-location' field of string\ntype. The new location may be a relative or an absolute URI. Examples\nfor such redirects can be found in many quicktime movie trailers.</p>\n<h2 id=\"examples\">Examples</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v playbin3 uri=file:///path/to/somefile.mp4\n</code></pre>\n<p>This will play back the given AVI video file, given that the video and\naudio decoders required to decode the content are installed. Since no\nspecial audio sink or video sink is supplied (via playbin3's audio-sink or\nvideo-sink properties) playbin3 will try to find a suitable audio and\nvideo sink automatically using the autoaudiosink and autovideosink elements.</p>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v playbin3 uri=cdda://4\n</code></pre>\n<p>This will play back track 4 on an audio CD in your disc drive (assuming\nthe drive is detected automatically by the plugin).</p>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v playbin3 uri=dvd://\n</code></pre>\n<p>This will play back the DVD in your disc drive (assuming\nthe drive is detected automatically by the plugin).</p>\n\n</div>\n\n\n"});