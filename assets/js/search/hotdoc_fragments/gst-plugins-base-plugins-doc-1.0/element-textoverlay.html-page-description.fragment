fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/element-textoverlay.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-textoverlay\">\n<h1 id=\"textoverlay1\">textoverlay</h1><p>This plugin renders text on top of a video stream. This can be either\nstatic text or text from buffers received on the text sink pad, e.g.\nas produced by the subparse element. If the text sink pad is not linked,\nthe text set via the \"text\" property will be rendered. If the text sink\npad is linked, text will be rendered as it is received on that pad,\nhonouring and matching the buffer timestamps of both input streams.</p>\n<p>The text can contain newline characters and text wrapping is enabled by\ndefault.</p>\n<h2 id=\"example-launch-lines\">Example launch lines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v gst-launch-1.0 videotestsrc ! textoverlay text=\"Room A\" valignment=top halignment=left font-desc=\"Sans, 72\" ! autovideosink\n</code></pre>\n<p>Here is a simple pipeline that displays a static text in the top left\ncorner of the video picture</p>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v filesrc location=subtitles.srt ! subparse ! txt.   videotestsrc ! timeoverlay ! textoverlay name=txt shaded-background=yes ! autovideosink\n</code></pre>\n<p>Here is another pipeline that displays subtitles from an .srt subtitle\nfile, centered at the bottom of the picture and with a rectangular shading\naround the text in the background:</p>\n<p>If you do not have such a subtitle file, create one looking like this\nin a text editor:</p>\n<pre><code class=\"language-[\"> 1\n 00:00:03,000 --&gt; 00:00:05,000\n Hello? (3-5s)\n\n 2\n 00:00:08,000 --&gt; 00:00:13,000\n Yes, this is a subtitle. Don&amp;apos;t\n you like it? (8-13s)\n\n 3\n 00:00:18,826 --&gt; 00:01:02,886\n Uh? What are you talking about?\n I don&amp;apos;t understand  (18-62s)\n</code></pre>\n\n</div>\n\n\n"});