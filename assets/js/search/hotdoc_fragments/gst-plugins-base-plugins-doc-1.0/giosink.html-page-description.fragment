fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/giosink.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"giosink\">\n<h1 id=\"giosink1\">giosink</h1><p>This plugin writes incoming data to a local or remote location specified\nby an URI. This location can be specified using any protocol supported by\nthe GIO library or it's VFS backends. Common protocols are 'file', 'ftp',\nor 'smb'.</p>\n<p>If the URI or <a href=\"https://developer.gnome.org/gio/unstable/GFile.html#GFile-struct\">GFile</a> already exists giosink will post a message of\ntype <a href=\"../libgstreamer-doc-1.0/c/gstmessage.html#GST_MESSAGE_ELEMENT\">GST_MESSAGE_ELEMENT</a> with name \"file-exists\" on the bus. The message\nalso contains the <a href=\"https://developer.gnome.org/gio/unstable/GFile.html#GFile-struct\">GFile</a> and the corresponding URI.\nApplications can use the \"file-exists\" message to notify the user about\nthe problem and to set a different target location or to remove the\nexisting file. Note that right after the \"file-exists\" message a normal\nerror message is posted on the bus which should be ignored if \"file-exists\"\nis handled by the application, for example by calling\ngst_bus_set_flushing(bus, TRUE) after the \"file-exists\" message was\nreceived and gst_bus_set_flushing(bus, FALSE) after the problem is\nresolved.</p>\n<p>Similar to the \"file-exist\" message a \"not-mounted\" message is posted\non the bus if the target location is not mounted yet and needs to be\nmounted. This message can be used by application to mount the location\nand retry after the location was mounted successfully.</p>\n<h2 id=\"example-pipelines\">Example pipelines</h2>\n<pre><code>gst-launch-1.0 -v filesrc location=input.xyz ! giosink location=file:///home/joe/out.xyz\n</code></pre>\n<p>The above pipeline will simply copy a local file. Instead of giosink,\nwe could just as well have used the filesink element here.</p>\n<pre><code>gst-launch-1.0 -v uridecodebin uri=file:///path/to/audio.file ! audioconvert ! flacenc ! giosink location=smb://othercomputer/foo.flac\n</code></pre>\n<p>The above pipeline will re-encode an audio file into FLAC format and store\nit on a remote host using the Samba protocol.</p>\n<pre><code>gst-launch-1.0 -v audiotestsrc num-buffers=100 ! vorbisenc ! oggmux ! giosink location=file:///home/foo/bar.ogg\n</code></pre>\n<p>The above pipeline will encode a 440Hz sine wave to Ogg Vorbis and stores\nit in the home directory of user foo.</p>\n\n</div>\n\n\n"});