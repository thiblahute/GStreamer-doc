fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/encodebin.html#encodebin", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"encodebin\">\n\t\t<h3 id=\"encodebin2\">\n\tencodebin\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\n<a title=\"GObject\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct\">GObject</a>\n    <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GInitiallyUnowned\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned\">GInitiallyUnowned</a>\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstBin\" href=\"../libgstreamer-doc-1.0/c/gstbin.html#GstBin\">GstBin</a>\n                    <span class=\"lineart\">\u2570\u2500\u2500</span>encodebin\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>EncodeBin provides a bin for encoding/muxing various streams according to\na specified <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingProfile\">GstEncodingProfile</a>.</p>\n<p>Based on the profile that was set (via the <a href=\"encodebin.html#GstEncodeBin:profile\">profile</a> property),\nEncodeBin will internally select and configure the required elements\n(encoders, muxers, but also audio and video converters) so that you can\nprovide it raw or pre-encoded streams of data in input and have your\nencoded/muxed/converted stream in output.</p>\n<h2 id=\"features1\">Features</h2>\n<ul>\n<li>\n<p>Automatic encoder and muxer selection based on elements available on the\nsystem.</p>\n</li>\n<li>\n<p>Conversion of raw audio/video streams (scaling, framerate conversion,\ncolorspace conversion, samplerate conversion) to conform to the profile\noutput format.</p>\n</li>\n<li>\n<p>Variable number of streams. If the presence property for a stream encoding\nprofile is 0, you can request any number of sink pads for it via the\nstandard request pad gstreamer API or the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base/html/gst-plugins-base-plugins-encodebin.html#GstEncodeBin-request-pad\">GstEncodeBin::request-pad</a> action\nsignal.</p>\n</li>\n<li>\n<p>Avoid reencoding (passthrough). If the input stream is already encoded and is\ncompatible with what the <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingProfile\">GstEncodingProfile</a> expects, then the stream won't\nbe re-encoded but just passed through downstream to the muxer or the output.</p>\n</li>\n<li>\n<p>Mix pre-encoded and raw streams as input. In addition to the passthrough\nfeature above, you can feed both raw audio/video <em>AND</em> already-encoded data\nto a pad. <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base/html/gst-plugins-base-plugins-encodebin.html#GstEncodeBin-struct\">GstEncodeBin</a> will take care of passing through the compatible\nsegments and re-encoding the segments of media that need encoding.</p>\n</li>\n<li>\n<p>Standard behaviour is to use a <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingContainerProfile\">GstEncodingContainerProfile</a> to have both\nencoding and muxing performed. But you can also provide a single stream\nprofile (like <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingAudioProfile\">GstEncodingAudioProfile</a>) to only have the encoding done and\nhandle the encoded output yourself.</p>\n</li>\n<li>\n<p>Audio imperfection corrections. Incoming audio streams can have non perfect\ntimestamps (jitter), like the streams coming from ASF files. <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base/html/gst-plugins-base-plugins-encodebin.html#GstEncodeBin-struct\">GstEncodeBin</a>\nwill automatically fix those imperfections for you. See\n<a href=\"encodebin.html#GstEncodeBin:audio-jitter-tolerance\">audio-jitter-tolerance</a> for more details.</p>\n</li>\n<li>\n<p>Variable or Constant video framerate. If your <a href=\"../gst-plugins-base-pbutils-doc-1.0/c/encoding-profile.html#GstEncodingVideoProfile\">GstEncodingVideoProfile</a> has\nthe variableframerate property deactivated (default), then the incoming\nraw video stream will be retimestampped in order to produce a constant\nframerate.</p>\n</li>\n<li>\n<p>Cross-boundary re-encoding. When feeding compatible pre-encoded streams that\nfall on segment boundaries, and for supported formats (right now only H263),\nthe GOP will be decoded/reencoded when needed to produce an encoded output\nthat fits exactly within the request GstSegment.</p>\n</li>\n<li>\n<p>Missing plugin support. If a <a href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a> is missing to encode/mux to the\nrequest profile formats, a missing-plugin <a href=\"../libgstreamer-doc-1.0/c/gstmessage.html#GstMessage\">GstMessage</a> will be posted on the\n<a href=\"../libgstreamer-doc-1.0/c/gstbus.html#GstBus\">GstBus</a>, allowing systems that support the missing-plugin system to offer the\nuser a way to install the missing element.</p>\n</li>\n</ul>\n\n</div>\n\n</div>\n\n\n"});