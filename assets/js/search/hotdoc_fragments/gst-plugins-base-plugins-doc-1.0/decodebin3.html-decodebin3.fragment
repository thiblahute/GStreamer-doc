fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/decodebin3.html#decodebin3", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"decodebin3\">\n\t\t<h3 id=\"decodebin32\">\n\tdecodebin3\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\n<a title=\"GObject\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct\">GObject</a>\n    <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GInitiallyUnowned\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned\">GInitiallyUnowned</a>\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstBin\" href=\"../libgstreamer-doc-1.0/c/gstbin.html#GstBin\">GstBin</a>\n                    <span class=\"lineart\">\u2570\u2500\u2500</span>decodebin3\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p><a href=\"../libgstreamer-doc-1.0/c/gstbin.html#GstBin\">GstBin</a> that auto-magically constructs a decoding pipeline using available\ndecoders and demuxers via auto-plugging. The output is raw audio, video\nor subtitle streams.</p>\n<p>decodebin3 differs from the previous decodebin (decodebin2) in important ways:</p>\n<ul>\n<li>\n<p>supports publication and selection of stream information via\nGstStreamCollection messages and GST_EVENT_SELECT_STREAM events.</p>\n</li>\n<li>\n<p>dynamically switches stream connections internally, and\nreuses decoder elements when stream selections change, so that in\nthe normal case it maintains 1 decoder of each type (video/audio/subtitle)\nand only creates new elements when streams change and an existing decoder\nis not capable of handling the new format.</p>\n</li>\n<li>\n<p>supports multiple input pads for the parallel decoding of auxilliary streams\nnot muxed with the primary stream.</p>\n</li>\n<li>\n<p>does not handle network stream buffering. decodebin3 expects that network stream\nbuffering is handled upstream, before data is passed to it.</p>\n</li>\n</ul>\n<p><emphasis>decodebin3 is still experimental API and a technology preview.\nIts behaviour and exposed API is subject to change.</emphasis></p>\n\n</div>\n\n</div>\n\n\n"});