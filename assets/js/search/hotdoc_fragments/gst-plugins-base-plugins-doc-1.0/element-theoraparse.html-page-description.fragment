fragment_downloaded_cb({"url": "gst-plugins-base-plugins-doc-1.0/element-theoraparse.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-theoraparse\">\n<h1 id=\"theoraparse1\">theoraparse</h1><p>The theoraparse element will parse the header packets of the Theora\nstream and put them as the streamheader in the caps. This is used in the\nmultifdsink case where you want to stream live theora streams to multiple\nclients, each client has to receive the streamheaders first before they can\nconsume the theora packets.</p>\n<p>This element also makes sure that the buffers that it pushes out are properly\ntimestamped and that their offset and offset_end are set. The buffers that\ntheoraparse outputs have all of the metadata that oggmux expects to receive,\nwhich allows you to (for example) remux an ogg/theora file.</p>\n<p>In addition, this element allows you to fix badly synchronized streams. You\npass in an array of (granule time, buffer time) synchronization points via\nthe synchronization-points GValueArray property, and this element will adjust\nthe granulepos values that it outputs. The adjustment will be made by\noffsetting all buffers that it outputs by a specified amount, and updating\nthat offset from the value array whenever a keyframe is processed.</p>\n<h2 id=\"example-pipelines\">Example pipelines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v filesrc location=video.ogg ! oggdemux ! theoraparse ! fakesink\n</code></pre>\n<p>This pipeline shows that the streamheader is set in the caps, and that each\nbuffer has the timestamp, duration, offset, and offset_end set.</p>\n<pre><code class=\"language-[\"> gst-launch-1.0 filesrc location=video.ogg ! oggdemux ! theoraparse \\\n            ! oggmux ! filesink location=video-remuxed.ogg\n</code></pre>\n<p>This pipeline shows remuxing. video-remuxed.ogg might not be exactly the same\nas video.ogg, but they should produce exactly the same decoded data.</p>\n\n</div>\n\n\n"});