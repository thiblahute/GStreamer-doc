fragment_downloaded_cb({"url": "gst-plugins-bad-gl-1.0/javascript/gstglmemory.html#page-description", "fragment": "Structures \nGstGLVideoAllocationParams \nFunctions \nCopies gl_mem into the texture specfified by tex_id. The format of tex_id is specified by tex_format width and height. \nReads the texture in GstGL.GLMemory into read_pointer if no buffer is bound to GL_PIXEL_PACK_BUFFER. Otherwise read_pointer is the byte offset into the currently bound GL_PIXEL_PACK_BUFFER buffer to store the result of glReadPixels. See the OpenGL specification for glReadPixels for more details. \nSee GstGL.GLMemory.prototype.read_pixels for what read_pointer signifies. \nOpaque GstGL.GLMemoryAllocator struct \nGstGLBaseMemoryAllocatorMapFunction map \nprovide a custom map implementation \nGstGLBaseMemoryAllocatorUnmapFunction unmap \nprovide a custom unmap implementation \ngpointer _padding \ngl_handle is defined by the specific OpenGL handle being wrapped For GstGL.GLMemory and GstGL.GLMemoryPBO it is an OpenGL texture id. Other memory types may define it to require a different type of parameter. \nCopy and set any dynamically allocated resources in dest_vid. Intended for subclass usage only to chain up at the end of a subclass copy function. \nUnset and free any dynamically allocated resources. Intended for subclass usage only to chain up at the end of a subclass free function. \nInitializes the GL Base Texture allocator. It is safe to call this function multiple times. This must be called before any other GstGLMemory operation. \nSince \nGstVideoInfo v_info \nthe GstVideoInfo to allocate \nguint plane \nthe video plane index to allocate \nGstVideoAlignment valign \nthe GstVideoAlignment to align the system representation to may be NULL for the default \nGstGLTextureTarget target \nthe GstGLTextureTarget to allocate \nGstGLFormat tex_format \ngpointer _padding \n"});