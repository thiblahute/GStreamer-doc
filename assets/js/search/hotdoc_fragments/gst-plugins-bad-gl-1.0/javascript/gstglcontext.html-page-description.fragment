fragment_downloaded_cb({"url": "gst-plugins-bad-gl-1.0/javascript/gstglcontext.html#page-description", "fragment": "Opaque GstGL.GLContext object \nWraps an existing OpenGL context into a GstGL.GLContext. \nNote The caller is responsible for ensuring that the OpenGL context represented by handle stays alive while the returned GstGL.GLContext is active. \nA default implementation of the various GetProcAddress functions that looks for name in the OpenGL shared libraries or in the current process. \nSee also GstGL.GLContext.prototype.get_proc_address \nSee also GstGL.GLContext.prototype.activate. \nIf an error occurs major and minor are not modified and GstGL.GLAPI.prototype.none is returned. \nAttempts to use the context_type specific GetProcAddress implementations to retreive name. \nSee also GstGL.GLContext.prototype.get_proc_address. \nDe activate the OpenGL context represented by this context. \nIn OpenGL terms calls eglMakeCurrent or similar with this context and the currently set window. See GstGL.GLContext.prototype.set_window for details. \nNote This will always fail for two wrapped GstGL.GLContext s \nCheck for an OpenGL feature being supported. \nNote Most features require that the context be created before it is possible to determine their existence and so will fail if that is not the case. \nUnbind the current framebuffer \nClear s the currently set shader from the GL state machine. \nNote must be called in the GL thread. \nDestroys an OpenGL context. \nShould only be called after GstGL.GLContext.prototype.create has been successfully called for this context. \nFills context s info version extensions vtable etc from the GL context in the current thread. Typically used with wrapped contexts to allow wrapped contexts to be used as regular GstGL.GLContext s. \nGet the currently enabled OpenGL api. \nThe currently available API may be limited by the GstGL.GLDisplay in use and or the GstGL.GLWindow chosen. \nGets the backing OpenGL context used by context. \nGets the OpenGL platform that used by context. \nGet the version of the OpenGL platform GLX EGL etc used. Only valid after a call to gst_gl_context_create_context. \nReturns the OpenGL version implemented by context. See GstGL.GLContext.prototype.get_gl_api for retreiving the OpenGL api implemented by context. \nGet a function pointer to a specified opengl function name. If the the specific function does not exist NULL is returned instead. \nPlatform specfic functions names starting egl glX wgl etc can also be retrieved using this method. \nNote This function may return valid function pointers that may not be valid to call in context. The caller is responsible for ensuring that the returned function is a valid function to call in context by either checking the OpenGL API and version or for an appropriate OpenGL extension. \nNote On success you need to cast the returned function pointer to the correct type to be able to call it correctly. On bit Windows this will include the GSTGLAPI not introspectable identifier to use the correct calling convention. e.g. void GSTGLAPI PFN_glGetIntegerv GLenum name GLint ret \nWill internally set context as shared with share \nSet s the current window on context to window. The window can only be changed before GstGL.GLContext.prototype.create has been called and the window is not already running. \nExecute func in the OpenGL thread of context with data \nMT safe \ngpointer _reserved \nThe configuration requested is not correct \nGstGL.GLContextError.prototype.wrong_api \nThe OpenGL API requested is not correct \nGstGL.GLContextError.prototype.old_libs \nglXCreateContext or similar failed \nGstGL.GLContextError.prototype.resource_unavailable \nA resource is not available \n"});