fragment_downloaded_cb({"url": "gst-plugins-bad-base-1.0/python/gstaggregator.html#GstAggregatorClass", "fragment": "GstAggregatorClass.sinkpads_type \nOptional. The type of the pads that should be created when GstElement.request_new_pad is called. \nGstAggregatorClass.flush \nOptional. Called after a succesful flushing seek once all the flush stops have been received. Flush pad specific data in GstBadBase.AggregatorPad flush. \nGstAggregatorClass.aggregate \nMandatory. Called when buffers are queued on all sinkpads. Classes should iterate the GstElement sinkpads and peek or steal buffers from the GstBadBase.AggregatorPad. If the subclass returns GST_FLOW_EOS sending of the eos event will be taken care of. Once if a buffer has been constructed from the aggregated buffers the subclass should call _finish_buffer. \nGstAggregatorClass.create_new_pad not introspectable \nGstAggregatorClass.update_src_caps \nLets subclasses update the Gst.Caps representing the src pad caps before usage. The result should end up in ret. Return GST_AGGREGATOR_FLOW_NEED_DATA not introspectable to indicate that the element needs more information caps a buffer etc to choose the correct caps. Should return ANY caps if the stream has not caps at all. \nGstAggregatorClass.fixate_src_caps \nOptional. Fixate and return the src pad caps provided. The function takes ownership of caps and returns a fixated version of caps. caps is not guaranteed to be writable. \nGstAggregatorClass.negotiated_src_caps \nOptional. Notifies subclasses what caps format has been negotiated \nGstAggregatorClass.decide_allocation \nOptional. Allows the subclass to influence the allocation choices. Setup the allocation parameters for allocating output buffers. The passed in query contains the result of the downstream allocation query. \nGstAggregatorClass.propose_allocation \nGstAggregatorClass._gst_reserved \n"});