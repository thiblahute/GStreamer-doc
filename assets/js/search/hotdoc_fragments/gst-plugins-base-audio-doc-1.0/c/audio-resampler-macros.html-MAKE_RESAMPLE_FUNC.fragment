fragment_downloaded_cb({"url": "gst-plugins-base-audio-doc-1.0/c/audio-resampler-macros.html#MAKE_RESAMPLE_FUNC", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"MAKE_RESAMPLE_FUNC\">\n\t\t<h3 id=\"make_resample_func\">\n\t<span><code>MAKE_RESAMPLE_FUNC</code></span>\n</h3>\n\n\t\t<pre class=\"raw_code\">\n#define MAKE_RESAMPLE_FUNC(type,inter,channels,arch)            \\\nDECL_RESAMPLE_FUNC (type, inter, channels, arch)                \\\n{                                                               \\\n  gint c, di = 0;                                               \\\n  gint n_taps = resampler-&gt;n_taps;                              \\\n  gint blocks = resampler-&gt;blocks;                              \\\n  gint ostride = resampler-&gt;ostride;                            \\\n  gint taps_stride = resampler-&gt;taps_stride;                    \\\n  gint samp_index = 0;                                          \\\n  gint samp_phase = 0;                                          \\\n                                                                \\\n  for (c = 0; c &lt; blocks; c++) {                                \\\n    type *ip = in[c];                                           \\\n    type *op = ostride == 1 ? out[c] : (type *)out[0] + c;      \\\n                                                                \\\n    samp_index = resampler-&gt;samp_index;                         \\\n    samp_phase = resampler-&gt;samp_phase;                         \\\n                                                                \\\n    for (di = 0; di &lt; out_len; di++) {                          \\\n      type *ipp, icoeff[4], *taps;                              \\\n                                                                \\\n      ipp = &amp;ip[samp_index * channels];                         \\\n                                                                \\\n      taps = get_taps_ ##type##_##inter                         \\\n              (resampler, &amp;samp_index, &amp;samp_phase, icoeff);    \\\n      inner_product_ ##type##_##inter##_##channels##_##arch     \\\n              (op, ipp, taps, n_taps, icoeff, taps_stride);     \\\n      op += ostride;                                            \\\n    }                                                           \\\n    if (in_len &gt; samp_index)                                    \\\n      memmove (ip, &amp;ip[samp_index * channels],                  \\\n          (in_len - samp_index) * sizeof(type) * channels);     \\\n  }                                                             \\\n  *consumed = samp_index - resampler-&gt;samp_index;               \\\n                                                                \\\n  resampler-&gt;samp_index = 0;                                    \\\n  resampler-&gt;samp_phase = samp_phase;                           \\\n}\n</pre>\n\n\n\n\n\n\n</div>\n\n\n\n"});