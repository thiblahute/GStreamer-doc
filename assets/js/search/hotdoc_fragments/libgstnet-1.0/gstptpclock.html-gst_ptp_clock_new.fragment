fragment_downloaded_cb({"url": "libgstnet-1.0/gstptpclock.html#gst_ptp_clock_new", "fragment": "gst_ptp_clock_new \nGstNet.PtpClock.new \nGstNet.PtpClock.prototype.new \nCreates a new PTP clock instance that exports the PTP time of the master clock in domain. This clock can be slaved to other clocks as needed. \nIf gst_ptp_init was not called before this will call gst_ptp_init with default parameters. \nThis clock only returns valid timestamps after it received the first times from the PTP master clock on the network. Once this happens the GstPtpClock internal clock property will become non NULL. You can check this with gst_clock_wait_for_sync the GstClock synced signal and gst_clock_is_synced. \nParameters \nName of the clock \nPTP domain \nA new GstClock \nSince \nCreates a new PTP clock instance that exports the PTP time of the master clock in domain. This clock can be slaved to other clocks as needed. \nIf GstNet.ptp_init was not called before this will call GstNet.ptp_init with default parameters. \nThis clock only returns valid timestamps after it received the first times from the PTP master clock on the network. Once this happens the GstPtpClock internal clock property will become non NULL. You can check this with Gst.Clock.wait_for_sync the GstClock synced signal and Gst.Clock.is_synced. \nParameters \nName of the clock \nPTP domain \nA new Gst.Clock \nSince \nCreates a new PTP clock instance that exports the PTP time of the master clock in domain. This clock can be slaved to other clocks as needed. \nIf GstNet.prototype.ptp_init was not called before this will call GstNet.prototype.ptp_init with default parameters. \nThis clock only returns valid timestamps after it received the first times from the PTP master clock on the network. Once this happens the GstPtpClock internal clock property will become non NULL. You can check this with Gst.Clock.prototype.wait_for_sync the GstClock synced signal and Gst.Clock.prototype.is_synced. \nParameters \nName of the clock \nPTP domain \nA new Gst.Clock \nSince \n"});