fragment_downloaded_cb({"url": "gst-editing-services-doc-1.0/c/index.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"index.md\">\n<h1 id=\"gstreamer-editing-services\">GStreamer Editing Services</h1>\n<p>The \"GStreamer Editing Services\" is a library to simplify the creation\nof multimedia editing applications. Based on the GStreamer multimedia framework\nand the GNonLin set of plugins, its goals are to suit all types of editing-related\napplications.</p>\n<p>The GStreamer Editing Services are cross-platform and work on most UNIX-like\nplatform as well as Windows. It is released under the GNU Library General Public License\n(GNU LGPL).</p>\n<h2 id=\"goals-of-gstreamer-editing-services\">Goals of GStreamer Editing Services</h2>\n<p>The GStreamer multimedia framework and the accompanying GNonLin set of\nplugins for non-linear editing offer all the building blocks for:</p>\n<ul>\n<li>\n<p>Decoding and encoding to a wide variety of formats, through all the\navailable GStreamer plugins.</p>\n</li>\n<li>\n<p>Easily choosing segments of streams and arranging them through time\nthrough the GNonLin set of plugins.</p>\n</li>\n</ul>\n<p>But all those building blocks only offer stream-level access, which\nresults in developers who want to write non-linear editors to write a\nconsequent amount of code to get to the level of <em>non-linear editing</em>\nnotions which are closer and more meaningful for the end-user (and\ntherefore the application).</p>\n<p>The GStreamer Editing Services (hereafter GES) aims to fill the gap\nbetween GStreamer/GNonLin and the application developer by offering a\nseries of classes to simplify the creation of many kind of\nediting-related applications.</p>\n<h2 id=\"architecture\">Architecture</h2>\n<h3 id=\"timeline-and-timelinepipeline\">Timeline and TimelinePipeline</h3>\n<p>The most top-level object encapsulating every other object is the\n<a href=\"../../gst-editing-services-doc-1.0/ges-timeline.html#GESTimeline\">GESTimeline</a>. It is the central object for any editing project.</p>\n<p>The <code>GESTimeline</code> is a <code>GstElement</code>. It can therefore be used in any\nGStreamer pipeline like any other object.</p>\n<h3 id=\"tracks-and-layers\">Tracks and Layers</h3>\n<p>The GESTimeline can contain two types of objects (seen in\n\"Layers and Tracks\"):</p>\n<ul>\n<li>\n<p>Layers - Corresponds to the user-visible arrangement of clips, and\nwhat you primarily interact with as an application developer. A\nminimalistic timeline would only have one layer, but a more complex\nediting application could use as many as needed.</p>\n</li>\n<li>\n<p>Tracks - Corresponds to the output streams in GStreamer. A typical\nGESTimeline, aimed at a video editing application, would have an\naudio track and a video track. A GESTimeline for an audio editing\napplication would only require an audio track. Multiple layers can\nbe related to each track.</p>\n</li>\n</ul>\n<p><img src=\"images/layer_track_overview.png\" alt=\"Layers and Tracks\" id=\"layers-and-tracks\"></p>\n<p>In order to reduce even more the amount of GStreamer interaction the\napplication developer has to deal with, a convenience GstPipeline has\nbeen made available specifically for Timelines : <a href=\"../../gst-editing-services-doc-1.0/ges-pipeline.html#GESPipeline\">GESPipeline</a>.</p>\n\n</div>\n\n\n\t"});