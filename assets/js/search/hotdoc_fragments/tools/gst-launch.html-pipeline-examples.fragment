fragment_downloaded_cb({"url": "tools/gst-launch.html#pipeline-examples", "fragment": "Pipeline Examples \nThe examples below assume that you have the correct plug ins available. In general osssink can be substituted with another audio output plug in such as directsoundsink esdsink alsasink osxaudiosink or artsdsink Likewise xvimagesink can be substituted with d3dvideosink ximagesink sdlvideosink osxvideosink or aasink Keep in mind though that different sinks might accept different formats and even the same sink might accept different formats on different machines so you might need to add converter elements like audioconvert and audioresample for audio or videoconvert for video in front of the sink to make things work. \nAudio playback \ngst launch filesrc location music.mp3 mad audioconvert audioresample osssink Play the mp3 music file music.mp3 using a libmad based plug in and output to an OSS device \ngst launch filesrc location music.ogg oggdemux vorbisdec audioconvert audioresample osssink Play an Ogg Vorbis format file \ngst launch gnomevfssrc location music.mp3 mad osssink gst launch gnomevfssrc location http domain.com music.mp3 mad audioconvert audioresample osssink Play an mp3 file or an http stream using GNOME VFS \ngst launch gnomevfssrc location smb computer music.mp3 mad audioconvert audioresample osssink Use GNOME VFS to play an mp3 file located on an SMB server \nFormat conversion \ngst launch filesrc location music.mp3 mad audioconvert vorbisenc oggmux filesink location music.ogg Convert an mp3 music file to an Ogg Vorbis file \ngst launch filesrc location music.mp3 mad audioconvert flacenc filesink location test.flac Convert to the FLAC format \nOther \ngst launch filesrc location music.wav wavparse audioconvert audioresample osssink Plays a WAV file that contains raw audio data PCM \ngst launch filesrc location music.wav wavparse audioconvert vorbisenc oggmux filesink location music.ogg gst launch filesrc location music.wav wavparse audioconvert lame filesink location music.mp3 Convert a WAV file containing raw audio data into an Ogg Vorbis or mp3 file \ngst launch cdparanoiasrc mode continuous audioconvert lame id3v2mux filesink location cd.mp3 rips all tracks from compact disc and convert them into a single mp3 file \ngst launch cdparanoiasrc track audioconvert lame id3v2mux filesink location track5.mp3 rips track from the CD and converts it into a single mp3 file \nUsing gst inspect it is possible to discover settings like the above for cdparanoiasrc that will tell it to rip the entire cd or only tracks of it. Alternatively you can use an URI and gst launch will find an element such as cdparanoia that supports that protocol for you e.g. gst launch cdda lame vbr new vbr quality filesink location track5.mp3 \ngst launch osssrc audioconvert vorbisenc oggmux filesink location input.ogg records sound from your audio input and encodes it into an ogg file \nVideo \ngst launch filesrc location JB _FF9 _TheGravityOfLove.mpg dvddemux mpeg2dec xvimagesink Display only the video portion of an MPEG video file outputting to an X display window \ngst launch filesrc location flflfj.vob dvddemux mpeg2dec sdlvideosink Display the video portion of a vob file used on DVDs outputting to an SDL window \ngst launch filesrc location movie.mpg dvddemux name demuxer demuxer. queue mpeg2dec sdlvideosink demuxer. queue mad audioconvert audioresample osssink Play both video and audio portions of an MPEG movie \ngst launch filesrc location movie.mpg mpegdemux name demuxer demuxer. queue mpeg2dec videoconvert sdlvideosink demuxer. queue mad audioconvert audioresample osssink Play an AVI movie with an external text subtitle stream \nThis example also shows how to refer to specific pads by name if an element here textoverlay has multiple sink or source pads. \ngst launch textoverlay name overlay videoconvert videoscale autovideosink filesrc location movie.avi decodebin2 videoconvert overlay.video _sink filesrc location movie.srt subparse overlay.text _sink \nPlay an AVI movie with an external text subtitle stream using playbin \ngst launch playbin uri file path to movie.avi suburi file path to movie.srt \nNetwork streaming \nStream video using RTP and network elements. \ngst launch v4l2src video x raw yuv width height format fourcc UYVY videoconvert ffenc _h263 video x h263 rtph263ppay pt udpsink host port sync false Use this command on the receiver \ngst launch udpsrc port application x rtp clock rate payload rtph263pdepay queue delay ffdec _h263 xvimagesink This command would be run on the transmitter \nDiagnostic \ngst launch v fakesrc num buffers fakesink Generate a null stream and ignore it and print out details \ngst launch audiotestsrc audioconvert audioresample osssink Generate a pure sine tone to test the audio output \ngst launch videotestsrc xvimagesink gst launch videotestsrc ximagesink Generate a familiar test pattern to test the video output \nAutomatic linking \nYou can use the decodebin element to automatically select the right elements to get a working pipeline. \ngst launch filesrc location musicfile decodebin audioconvert audioresample osssink Play any supported audio format \ngst launch filesrc location videofile decodebin name decoder decoder. queue audioconvert audioresample osssink decoder. videoconvert xvimagesink Play any supported video format with video and audio output. Threads are used automatically. To make this even easier you can use the playbin element \ngst launch playbin uri file home joe foo.avi \nFiltered connections \nThese examples show you how to use filtered caps. \ngst launch videotestsrc video x raw yuv format fourcc YUY2 video x raw yuv format fourcc YV12 xvimagesink Show a test image and use the YUY2 or YV12 video format for this. \ngst launch osssrc audio x raw int rate width depth signed boolean true wavenc filesink location recording.wav record audio and write it to a wav file. Force usage of signed to bit samples and a sample rate between kHz and KHz. \n"});