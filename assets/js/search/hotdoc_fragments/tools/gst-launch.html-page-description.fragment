fragment_downloaded_cb({"url": "tools/gst-launch.html#page-description", "fragment": "This is the Linux man page for the gst inspect tool. As such it is very Linux centric regarding path specification and plugin names. Please be patient while it is rewritten to be more generic. \ngst launch build and run a GStreamer pipeline \ngst launch OPTION... PIPELINE DESCRIPTION \ngst launch is a tool that builds and runs basic GStreamer pipelines. \nIn simple form a PIPELINE DESCRIPTION is a list of elements separated by exclamation marks Properties may be appended to elements in the formproperty value. \nFor a complete description of possible PIPELINE DESCRIPTIONS see the sectionpipeline description below or consult the GStreamer documentation. \nPlease note that gst launch is primarily a debugging tool for developers and users. You should not build applications on top of it. For applications use the gst_parse_launch function of the GStreamer API as an easy way to construct pipelines from pipeline descriptions. \ngst launch accepts the following options \nhelp \nPrint help synopsis and available FLAGS \nv verbose \nOutput status information and property notifications \nq quiet \nDo not print any progress information \nm messages \nOutput messages posted on the pipeline s bus \nt tags \nOutput tags also known as metadata \no FILE output FILE \nSave XML representation of pipeline to FILE and exit \nf no_fault \nDo not install a fault handler \nT trace \nPrint memory allocation traces. The feature must be enabled at compile time to work. \n\ngst launch also accepts the following options that are common to all GStreamer applications \nA pipeline consists elements and links. Elements can be put into bins of different sorts. Elements links and bins can be specified in a pipeline description in any order. \nElements \nELEMENTTYPE PROPERTY1 \nCreates an element of type ELEMENTTYPE and sets the PROPERTIES. \nProperties \nPROPERTY VALUE \nSets the property to the specified value. You can use gst inspect to find out about properties and allowed values of different elements. Enumeration properties can be set by name nick or value. \nBins \nBINTYPE. PROPERTY1 PIPELINE DESCRIPTION \nSpecifies that a bin of type BINTYPE is created and the given properties are set. Every element between the braces is put into the bin. Please note the dot that has to be used after the BINTYPE. You will almost never need this functionality it is only really useful for applications using the gst_launch_parse API with bin as bintype. That way it is possible to build partial pipelines instead of a full fledged top level pipeline. \nLinks \nSRCELEMENT PAD1 SINKELEMENT PAD1 SRCELEMENT PAD1 CAPS SINKELEMENT PAD1 \nLinks the element with name SRCELEMENT to the element with name SINKELEMENT using the caps specified in CAPS as a filter. Names can be set on elements with the name property. If the name is omitted the element that was specified directly in front of or after the link is used. This works across bins. If a padname is given the link is done with these pads. If no pad names are given all possibilities are tried and a matching pad is used. If multiple padnames are given both sides must have the same number of pads specified and multiple links are done in the given order. So the simplest link is a simple exclamation mark that links the element to the left of it to the element right of it. \nCaps \nMIMETYPE PROPERTY PROPERTY CAPS CAPS \nCreates a capability with the given mimetype and optionally with given properties. The mimetype can be escaped using or If you want to chain caps you can add more caps in the same format afterwards. \nProperties \nNAME TYPE VALUE in lists and ranges TYPE VALUE \nSets the requested property in capabilities. The name is an alphanumeric value and the type can have the following case insensitive values i or int for integer values or ranges f or float for float values or ranges or fourcc for FOURCC values b bool or boolean for boolean values s str or string for strings fraction for fractions framerate pixel aspect ratio l or list for lists If no type was given the following order is tried integer float boolean string. Integer values must be parsable by strtol floats by strtod FOURCC values may either be integers or strings. Boolean values are case insensitive yes no true or false and may like strings be escaped with or Ranges are in this format VALUE VALUE Lists use this format VALUE VALUE \nA pipeline can be controlled by signals. SIGUSR2 will stop the pipeline GST_STATE_NULL SIGUSR1 will put it back to play GST_STATE_PLAYING By default the pipeline will start in the playing state. There are currently no signals defined to go into the ready or pause GST_STATE_READY and GST_STATE_PAUSED state explicitely. \nThe examples below assume that you have the correct plug ins available. In general osssink can be substituted with another audio output plug in such as directsoundsink esdsink alsasink osxaudiosink or artsdsink Likewise xvimagesink can be substituted with d3dvideosink ximagesink sdlvideosink osxvideosink or aasink Keep in mind though that different sinks might accept different formats and even the same sink might accept different formats on different machines so you might need to add converter elements like audioconvert and audioresample for audio or videoconvert for video in front of the sink to make things work. \nAudio playback \ngst launch filesrc location music.mp3 mad audioconvert audioresample osssink Play the mp3 music file music.mp3 using a libmad based plug in and output to an OSS device \ngst launch filesrc location music.ogg oggdemux vorbisdec audioconvert audioresample osssink Play an Ogg Vorbis format file \ngst launch gnomevfssrc location music.mp3 mad osssink gst launch gnomevfssrc location http domain.com music.mp3 mad audioconvert audioresample osssink Play an mp3 file or an http stream using GNOME VFS \ngst launch gnomevfssrc location smb computer music.mp3 mad audioconvert audioresample osssink Use GNOME VFS to play an mp3 file located on an SMB server \nFormat conversion \ngst launch filesrc location music.mp3 mad audioconvert vorbisenc oggmux filesink location music.ogg Convert an mp3 music file to an Ogg Vorbis file \ngst launch filesrc location music.mp3 mad audioconvert flacenc filesink location test.flac Convert to the FLAC format \nOther \ngst launch filesrc location music.wav wavparse audioconvert audioresample osssink Plays a WAV file that contains raw audio data PCM \ngst launch filesrc location music.wav wavparse audioconvert vorbisenc oggmux filesink location music.ogg gst launch filesrc location music.wav wavparse audioconvert lame filesink location music.mp3 Convert a WAV file containing raw audio data into an Ogg Vorbis or mp3 file \ngst launch cdparanoiasrc mode continuous audioconvert lame id3v2mux filesink location cd.mp3 rips all tracks from compact disc and convert them into a single mp3 file \ngst launch cdparanoiasrc track audioconvert lame id3v2mux filesink location track5.mp3 rips track from the CD and converts it into a single mp3 file \nUsing gst inspect it is possible to discover settings like the above for cdparanoiasrc that will tell it to rip the entire cd or only tracks of it. Alternatively you can use an URI and gst launch will find an element such as cdparanoia that supports that protocol for you e.g. gst launch cdda lame vbr new vbr quality filesink location track5.mp3 \ngst launch osssrc audioconvert vorbisenc oggmux filesink location input.ogg records sound from your audio input and encodes it into an ogg file \nVideo \ngst launch filesrc location JB _FF9 _TheGravityOfLove.mpg dvddemux mpeg2dec xvimagesink Display only the video portion of an MPEG video file outputting to an X display window \ngst launch filesrc location flflfj.vob dvddemux mpeg2dec sdlvideosink Display the video portion of a vob file used on DVDs outputting to an SDL window \ngst launch filesrc location movie.mpg dvddemux name demuxer demuxer. queue mpeg2dec sdlvideosink demuxer. queue mad audioconvert audioresample osssink Play both video and audio portions of an MPEG movie \ngst launch filesrc location movie.mpg mpegdemux name demuxer demuxer. queue mpeg2dec videoconvert sdlvideosink demuxer. queue mad audioconvert audioresample osssink Play an AVI movie with an external text subtitle stream \nThis example also shows how to refer to specific pads by name if an element here textoverlay has multiple sink or source pads. \ngst launch textoverlay name overlay videoconvert videoscale autovideosink filesrc location movie.avi decodebin2 videoconvert overlay.video _sink filesrc location movie.srt subparse overlay.text _sink \nPlay an AVI movie with an external text subtitle stream using playbin \ngst launch playbin uri file path to movie.avi suburi file path to movie.srt \nNetwork streaming \nStream video using RTP and network elements. \ngst launch v4l2src video x raw yuv width height format fourcc UYVY videoconvert ffenc _h263 video x h263 rtph263ppay pt udpsink host port sync false Use this command on the receiver \ngst launch udpsrc port application x rtp clock rate payload rtph263pdepay queue delay ffdec _h263 xvimagesink This command would be run on the transmitter \nDiagnostic \ngst launch v fakesrc num buffers fakesink Generate a null stream and ignore it and print out details \ngst launch audiotestsrc audioconvert audioresample osssink Generate a pure sine tone to test the audio output \ngst launch videotestsrc xvimagesink gst launch videotestsrc ximagesink Generate a familiar test pattern to test the video output \nAutomatic linking \nYou can use the decodebin element to automatically select the right elements to get a working pipeline. \ngst launch filesrc location musicfile decodebin audioconvert audioresample osssink Play any supported audio format \ngst launch filesrc location videofile decodebin name decoder decoder. queue audioconvert audioresample osssink decoder. videoconvert xvimagesink Play any supported video format with video and audio output. Threads are used automatically. To make this even easier you can use the playbin element \ngst launch playbin uri file home joe foo.avi \nFiltered connections \nThese examples show you how to use filtered caps. \ngst launch videotestsrc video x raw yuv format fourcc YUY2 video x raw yuv format fourcc YV12 xvimagesink Show a test image and use the YUY2 or YV12 video format for this. \ngst launch osssrc audio x raw int rate width depth signed boolean true wavenc filesink location recording.wav record audio and write it to a wav file. Force usage of signed to bit samples and a sample rate between kHz and KHz. \nGST _DEBUG Comma separated list of debug categories and levels e.g. GST_DEBUG totem typefind \nGST _DEBUG _NO _COLOR When this environment variable is set coloured debug output is disabled. \nGST _DEBUG _DUMP _DOT _DIR When set to a filesystem path store dot files of pipeline graphs there. \nGST _REGISTRY Path of the plugin registry file. Default is gstreamer registry CPU.xml where CPU is the machine cpu type GStreamer was compiled for e.g. i486 i686 x86 ppc etc. check the output of uname i and uname m for details \nGST _REGISTRY _UPDATE Set to no to force GStreamer to assume that no plugins have changed been added or been removed. This will make GStreamer skip the initial check whether a rebuild of the registry cache is required or not. This may be useful in embedded environments where the installed plugins never change. Do not use this option in any other setup. \nGST _PLUGIN _PATH Specifies a list of directories to scan for additional plugins. These take precedence over the system plugins. \nGST _PLUGIN _SYSTEM _PATH Specifies a list of plugins that are always loaded by default. If not set this defaults to the system installed path and the plugins installed in the user s home directory \nOIL _CPU _FLAGS Useful liboil environment variable. Set OIL_CPU_FLAGS when valgrind or other debugging tools trip over liboil s CPU detection quite a few important GStreamer plugins like videotestsrc audioconvert or audioresample use liboil \nG _DEBUG Useful GLib environment variable. Set G_DEBUG fatal_warnings to make GStreamer programs abort when a critical warning such as an assertion failure occurs. This is useful if you want to find out which part of the code caused that warning to be triggered and under what circumstances. Simply set G_DEBUG as mentioned above and run the program in gdb or let it core dump Then get a stack trace in the usual way \n"});