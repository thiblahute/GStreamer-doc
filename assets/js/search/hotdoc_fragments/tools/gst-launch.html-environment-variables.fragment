fragment_downloaded_cb({"url": "tools/gst-launch.html#environment-variables", "fragment": "ENVIRONMENT VARIABLES \nGST_DEBUG \nComma separated list of debug categories and levels e.g. GST_DEBUG totem typefind is allowed as a wildcard as part of debug category names e.g. GST_DEBUG sink audio Since it is also possible to specify the log level by name ERROR WARN FIXME INFO DEBUG LOG TRACE MEMDUMP e.g. GST_DEBUG audio LOG \nGST_DEBUG_NO_COLOR \nWhen this environment variable is set coloured debug output is disabled. \nGST_DEBUG_DUMP_DOT_DIR \nWhen set to a filesystem path store dot files of pipeline graphs there. These can then later be converted into an image using the dot utility from the graphviz set of tools like this dot foo.dot Tsvg o foo.svg png or jpg are also possible as output format There is also a utility called xdot which allows you to view the dot file directly without converting it first. \nGST_REGISTRY \nPath of the plugin registry file. Default is cache gstreamer registry CPU.bin where CPU is the machine cpu type GStreamer was compiled for e.g. i486 i686 x86 ppc etc. check the output of uname i and uname m for details \nGST_REGISTRY_UPDATE \nSet to no to force GStreamer to assume that no plugins have changed been added or been removed. This will make GStreamer skip the initial check whether a rebuild of the registry cache is required or not. This may be useful in embedded environments where the installed plugins never change. Do not use this option in any other setup. \nGST_PLUGIN_PATH \nSpecifies a list of directories to scan for additional plugins. These take precedence over the system plugins. \nGST_PLUGIN_SYSTEM_PATH \nSpecifies a list of plugins that are always loaded by default. If not set this defaults to the system installed path and the plugins installed in the user s home directory \nGST_DEBUG_FILE \nSet this variable to a file path to redirect all GStreamer debug messages to this file. If left unset debug messages with be output unto the standard error. \nORC_CODE \nUseful Orc environment variable. Set ORC_CODE debug to enable debuggers such as gdb to create useful backtraces from Orc generated code. Set ORC_CODE backup or ORC_CODE emulate if you suspect Orc s SIMD code generator is producing incorrect code. Quite a few important GStreamer plugins like videotestsrc audioconvert or audioresample use Orc \nG_DEBUG \nUseful GLib environment variable. Set G_DEBUG fatal_warnings to make GStreamer programs abort when a critical warning such as an assertion failure occurs. This is useful if you want to find out which part of the code caused that warning to be triggered and under what circumstances. Simply set G_DEBUG as mentioned above and run the program in gdb or let it core dump Then get a stack trace in the usual way. \n\n"});