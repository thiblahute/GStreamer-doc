fragment_downloaded_cb({"url": "gst-plugins-ugly-1.0/element-x264enc.html#x264enc1", "fragment": "x264enc \nThis element encodes raw video into H264 compressed data also otherwise known as MPEG AVC Advanced Video Codec \nThe pass property controls the type of encoding. In case of Constant Bitrate Encoding actually ABR the bitrate will determine the quality of the encoding. This will similarly be the case if this target bitrate is to obtained in multiple or pass encoding. Alternatively one may choose to perform Constant Quantizer or Quality encoding in which case the quantizer property controls much of the outcome in that case bitrate is the maximum bitrate. \nThe H264 profile that is eventually used depends on a few settings. If dct8x8 is enabled then High profile is used. Otherwise if cabac entropy coding is enabled or bframes are allowed then Main Profile is in effect and otherwise Baseline profile applies. The high profile is imposed by default which is fine for most software players and settings but in some cases e.g. hardware platforms a more restricted profile level may be necessary. The recommended way to set a profile is to set it in the downstream caps. \nIf a preset tuning are specified then these will define the default values and the property defaults will be ignored. After this the option string property is applied followed by the user set properties fast first pass restrictions and finally the profile restrictions. \nSome settings including the default settings may lead to quite some latency i.e. frame buffering in the encoder. This may cause problems with pipeline stalling in non trivial pipelines because the encoder latency is often considerably higher than the default size of a simple queue element. Such problems are caused by one of the queues in the other non x264enc streams branches filling up and blocking upstream. They can be fixed by relaxing the default time size buffer limits on the queue elements in the non x264 branches or using a single multiqueue element for all branches. Also see the last example below. You can also work around this problem by setting the tune zerolatency property but this will affect overall encoding quality so may not be appropriate for your use case. \n"});