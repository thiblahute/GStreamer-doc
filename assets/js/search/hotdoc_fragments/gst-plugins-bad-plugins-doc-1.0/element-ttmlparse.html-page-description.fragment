fragment_downloaded_cb({"url": "gst-plugins-bad-plugins-doc-1.0/element-ttmlparse.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-ttmlparse\">\n<h1 id=\"ttmlparse1\">ttmlparse</h1><p>Parses timed text subtitle files described using Timed Text Markup Language\n(TTML). Currently, only the EBU-TT-D profile of TTML, designed for\ndistribution of subtitles over IP, is supported.</p>\n<p>The parser outputs a <a href=\"../libgstreamer-doc-1.0/c/gstbuffer.html#GstBuffer\">GstBuffer</a> for each scene in the input TTML file, a\nscene being a period of time during which a static set of subtitles should\nbe visible. The parser places each text element within a scene into its own\n<a href=\"../libgstreamer-doc-1.0/c/gstmemory.html#GstMemory\">GstMemory</a> within the scene's buffer, and attaches metadata to the buffer\ndescribing the styling and layout associated with all the contained text\nelements. A downstream renderer element uses this information to correctly\nrender the text on top of video frames.</p>\n<h2 id=\"example-launch-lines\">Example launch lines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 filesrc location=&lt;media file location&gt; ! video/quicktime ! qtdemux name=q ttmlrender name=r q. ! queue ! h264parse ! avdec_h264 ! autovideoconvert ! r.video_sink filesrc location=&lt;subtitle file location&gt; blocksize=16777216 ! queue ! ttmlparse ! r.text_sink r. ! ximagesink q. ! queue ! aacparse ! avdec_aac ! audioconvert ! alsasink\n ]| Parse and render TTML subtitles contained in a single XML file over an\n MP4 stream containing H.264 video and AAC audio.\n</code></pre>\n\n</div>\n\n\n"});