fragment_downloaded_cb({"url": "gst-plugins-bad-plugins-doc-1.0/srtpenc.html#srtpenc", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"srtpenc\">\n\t\t<h3 id=\"srtpenc2\">\n\tsrtpenc\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\n<a title=\"GObject\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct\">GObject</a>\n    <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GInitiallyUnowned\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned\">GInitiallyUnowned</a>\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span>srtpenc\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>gstrtpenc acts as an encoder that adds security to RTP and RTCP\npackets in the form of encryption and authentication. It outs SRTP\nand SRTCP.</p>\n<p>An application can request multiple RTP and RTCP pads to protect,\nbut every sink pad requested must receive packets from the same\nsource (identical SSRC). If a packet received contains a different\nSSRC, a warning is emited and the valid SSRC is forced on the packet.</p>\n<p>This element uses libsrtp library. When receiving the first packet,\nthe library is initialized with a new stream (based on the SSRC). It\nuses the default RTP and RTCP encryption and authentication mechanisms,\nunless the user has set the relevant properties first. It also uses\na master key that MUST be set by property (key) at the beginning. The\nmaster key must be of a maximum length of 46 characters (14 characters\nfor the salt plus the key). The encryption and authentication mecanisms\navailable are :</p>\n<p>Encryption (properties rtp-cipher and rtcp-cipher)</p>\n<ul>\n<li>AES_ICM 256 bits (maximum security)</li>\n<li>AES_ICM 128 bits (default)</li>\n<li>NULL</li>\n</ul>\n<p>Authentication (properties rtp-auth and rtcp-auth)</p>\n<ul>\n<li>HMAC_SHA1 80 bits (default, maximum protection)</li>\n<li>HMAC_SHA1 32 bits</li>\n<li>NULL</li>\n</ul>\n<p>Note that for SRTP protection, authentication is mandatory (non-null)\nif encryption is used (non-null).</p>\n<p>When requested to create a sink pad, a linked source pad is created.\nEach packet received is first analysed (checked for valid SSRC) then\nits buffer is protected with libsrtp, then pushed on the source pad.\nIf protection failed or the stream could not be created, the buffer\nis dropped and a warning is emitted. The packets pushed on the source\npad are of type 'application/x-srtp' or 'application/x-srtcp'.</p>\n<p>When the maximum usage of the master key is reached, a soft-limit\nsignal is sent to the user. The user must then set a new master key\nby property. If the hard limit is reached, a flag is set and every\nsubsequent packet is dropped, until a new key is set and the stream\nhas been updated.</p>\n<p>If a stream is to be shared between multiple clients it is also\npossible to request the internal SRTP rollover counter for a given\nSSRC. The rollover counter should be then transmitted and used by the\nclients to authenticate and decrypt the packets. Failing to do that\nthe clients will start with a rollover counter of 0 which will\nprobably be incorrect if the stream has been transmitted for a\nwhile to other clients.</p>\n\n</div>\n\n</div>\n\n\n"});