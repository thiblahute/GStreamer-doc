fragment_downloaded_cb({"url": "gst-plugins-bad-plugins-doc-1.0/element-id3mux.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-id3mux\">\n<h1 id=\"id3mux1\">id3mux</h1><p>This element adds ID3v2 tags to the beginning of a stream, and ID3v1 tags\nto the end.</p>\n<p>It defaults to writing ID3 version 2.3.0 tags (since those are the most\nwidely supported), but can optionally write version 2.4.0 tags.</p>\n<p>Applications can set the tags to write using the <a href=\"../libgstreamer-doc-1.0/c/gsttagsetter.html#GstTagSetter\">GstTagSetter</a> interface.\nTags sent by upstream elements will be picked up automatically (and merged\naccording to the merge mode set via the tag setter interface).</p>\n<h2 id=\"example-pipelines\">Example pipelines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v filesrc location=foo.ogg ! decodebin ! audioconvert ! id3mux ! filesink location=foo.mp3\n ]| A pipeline that transcodes a file from Ogg/Vorbis to mp3 format with\n ID3 tags that contain the same metadata as the the Ogg/Vorbis file.\n Make sure the Ogg/Vorbis file actually has comments to preserve.\n |[\n gst-launch-1.0 -m filesrc location=foo.mp3 ! id3demux ! fakesink silent=TRUE\n ]| Verify that tags have been written.\n</code></pre>\n\n</div>\n\n\n"});