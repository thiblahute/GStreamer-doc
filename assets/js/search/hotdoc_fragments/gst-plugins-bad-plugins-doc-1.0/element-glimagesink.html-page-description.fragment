fragment_downloaded_cb({"url": "gst-plugins-bad-plugins-doc-1.0/element-glimagesink.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-glimagesink\">\n<h1 id=\"glimagesink1\">glimagesink</h1><p>glimagesink renders video frames to a drawable on a local or remote\ndisplay using OpenGL. This element can receive a Window ID from the\napplication through the VideoOverlay interface and will then render video\nframes in this drawable.\nIf no Window ID was provided by the application, the element will\ncreate its own internal window and render into it.</p>\n<p>See the <a href=\"../gst-plugins-bad-gl-doc-1.0/gstgldisplay.html#GstGLDisplay\">GstGLDisplay</a> documentation for a list of environment variables that\ncan override window/platform detection.</p>\n<h2 id=\"scaling\">Scaling</h2>\n<p>Depends on the driver, OpenGL handles hardware accelerated\nscaling of video frames. This means that the element will just accept\nincoming video frames no matter their geometry and will then put them to the\ndrawable scaling them on the fly. Using the <a href=\"element-glimagesinkelement.html#GstGLImageSink:force-aspect-ratio\">force-aspect-ratio</a>\nproperty it is possible to enforce scaling with a constant aspect ratio,\nwhich means drawing black borders around the video frame.</p>\n<h2 id=\"events\">Events</h2>\n<p>Through the gl thread, glimagesink handle some events coming from the drawable\nto manage its appearance even when the data is not flowing (GST_STATE_PAUSED).\nThat means that even when the element is paused, it will receive expose events\nfrom the drawable and draw the latest frame with correct borders/aspect-ratio.</p>\n<h2 id=\"examples\">Examples</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v videotestsrc ! video/x-raw ! glimagesink\n ]| A pipeline to test hardware scaling.\n No special opengl extension is used in this pipeline, that's why it should work\n with OpenGL &gt;= 1.1. That's the case if you are using the MESA3D driver v1.3.\n |[\n gst-launch-1.0 -v videotestsrc ! video/x-raw,format=I420 ! glimagesink\n ]| A pipeline to test hardware scaling and hardware colorspace conversion.\n When your driver supports GLSL (OpenGL Shading Language needs OpenGL &gt;= 2.1),\n the 4 following format YUY2, UYVY, I420, YV12 and AYUV are converted to RGB32\n through some fragment shaders and using one framebuffer (FBO extension OpenGL &gt;= 1.4).\n If your driver does not support GLSL but supports MESA_YCbCr extension then\n the you can use YUY2 and UYVY. In this case the colorspace conversion is automatically\n made when loading the texture and therefore no framebuffer is used.\n |[\n gst-launch-1.0 -v gltestsrc ! glimagesink\n ]| A pipeline 100% OpenGL.\n No special opengl extension is used in this pipeline, that's why it should work\n with OpenGL &gt;= 1.1. That's the case if you are using the MESA3D driver v1.3.\n |[\n gst-plugins-bas/tests/examples/gl/generic/cube\n ]| The graphic FPS scene can be greater than the input video FPS.\n The graphic scene can be written from a client code through the\n two glfilterapp properties.\n</code></pre>\n\n</div>\n\n\n"});