fragment_downloaded_cb({"url": "gst-plugins-base-rtp-1.0/javascript/gstrtcpbuffer.html#page-description", "fragment": "Add a new packet of type to rtcp. packet will point to the newly created packet. \nInitialize a new GstRtp.RTCPPacket pointer that points to the first packet in rtcp. \nGet the number of RTCP packets in rtcp. \nFinish rtcp after being constructed. This function is usually called after GstRtp.prototype.rtcp_buffer_map and after adding the RTCP items to the new buffer. \nThe function adjusts the size of rtcp with the total length of all the added packets. \nAdd a new report block to packet with the given values. \nGet the application dependent data attached to a RTPFB or PSFB packet. \nGet the length of the application dependent data attached to an APP packet. \nGet the name field of the APP packet. \nGet the SSRC CSRC field of the APP packet. \nGet the subtype field of the APP packet. \nSet the length of the application dependent data attached to an APP packet. \nSet the name field of the APP packet. \nSet the SSRC CSRC field of the APP packet. \nSet the subtype field of the APP packet. \nAdd ssrc to the BYE packet. \nAdds len SSRCs in ssrc to BYE packet. \nGet the nth SSRC of the BYE packet. \nGet the reason in packet. \nGet the length of the reason string. \nGet the number of SSRC fields in packet. \nSet the reason string to reason in packet. \nThe profile specific extension data is copied into a new allocated memory area data. This must be freed with GLib.prototype.free after usage. \nGet the Feedback Control Information attached to a RTPFB or PSFB packet. \nGet the length of the Feedback Control Information attached to a RTPFB or PSFB packet. \nGet the media SSRC field of the RTPFB or PSFB packet. \nGet the sender SSRC field of the RTPFB or PSFB packet. \nGet the feedback message type of the FB packet. \nSet the length of the Feedback Control Information attached to a RTPFB or PSFB packet. \nSet the media SSRC field of the RTPFB or PSFB packet. \nSet the sender SSRC field of the RTPFB or PSFB packet. \nSet the feedback message type of the FB packet. \nGet the count field in packet. \nGet the length field of packet. This is the length of the packet in bit words minus one. \nGet the packet padding of the packet pointed to by packet. \nParse the values of the nth report block in packet and store the result in the values. \nGet the number of report blocks in packet. \nGet the packet type of the packet pointed to by packet. \nMove the packet pointer packet to the next packet in the payload. Use GstRtp.RTCPBuffer.prototype.get_first_packet to initialize packet. \nRemoves the packet pointed to by packet and moves pointer to the next one \nGet the ssrc field of the RR packet. \nSet the ssrc field of the RR packet. \nAdd a new SDES entry to the current item in packet. \nAdd a new SDES item for ssrc to packet. \nThis function is like GstRtp.RTCPPacket.prototype.sdes_get_entry but it returns a null terminated copy of the data instead. use GLib.prototype.free after usage. \nMove to the first SDES entry in the current item. \nMove to the first SDES item in packet. \nGet the data of the current SDES item entry. type when not NULL will contain the type of the entry. data when not NULL will point to len bytes. \nWhen type refers to a text item data will point to a UTF8 string. Note that this UTF8 string is NOT null terminated. Use GstRtp.RTCPPacket.prototype.sdes_copy_entry to get a null terminated copy of the entry. \nGet the number of items in the SDES packet packet. \nGet the SSRC of the current SDES item. \nMove to the next SDES entry in the current item. \nMove to the next SDES item in packet. \nSet the nth new report block in packet with the given values. \nNote Not implemented. \nParse the SR sender info and store the values. \nSet the given values in the SR packet packet. \nOpen buffer for reading or writing depending on flags. The resulting RTCP buffer state is stored in rtcp. \nCreate a new buffer for constructing RTCP packets. The packet will have a maximum size of mtu. \nCreate a new buffer and set the data to a copy of len bytes of data and the size to len. The data will be freed when the buffer is freed. \nCreate a new buffer and set the data and size of the buffer to data and len respectively. data will be freed when the buffer is unreffed so this function transfers ownership of data to the new buffer. \nCheck if the data pointed to by buffer is a valid RTCP packet using GstRtp.prototype.rtcp_buffer_validate_data. \nCheck if the data and size point to the data of a valid compound non reduced size RTCP packet. Use this function to validate a packet before using the other functions in this module. \nCheck if the data and size point to the data of a valid RTCP packet. Use this function to validate a packet before using the other functions in this module. \nThis function is updated to support reduced size rtcp packets according to RFC and will validate full compound RTCP packets as well as reduced size RTCP packets. \nCheck if the data pointed to by buffer is a valid RTCP packet using GstRtp.prototype.rtcp_buffer_validate_reduced. \nConverts an NTP time to UNIX nanoseconds. ntptime can typically be the NTP time of an SR RTCP message and contains in the upper bits the number of seconds since and in the lower bits the fractional seconds. The resulting value will be the number of nanoseconds since \nConvert name into a GstRTCPSDESType. name is typically a key in a Gst.Structure containing SDES items. \nConverts type to the string equivalent. The string is typically used as a key in a Gst.Structure containing SDES items. \nConverts a UNIX timestamp in nanoseconds to an NTP time. The caller should pass a value with nanoseconds since The NTP time will in the upper bits contain the number of seconds since and in the lower bits the fractional seconds. The resulting value can be used as an ntptime for constructing SR RTCP packets. \nRequest an SR packet for early synchronization \nGstRtp.RTCPFBType.prototype.psfb_type_pli \nThe maximum amount of SDES items. \nMask for version padding bit and packet type pair allowing reduced size packets basically it accepts other types than RR and SR \n"});