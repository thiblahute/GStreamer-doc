fragment_downloaded_cb({"url": "gst-plugins-base-rtp-1.0/gstrtpbuffer.html#gst_rtp_buffer_new_allocate", "fragment": "Gst.Rtp.Global.RtpBufferNewAllocate \nGst.Rtp.Global.RtpBufferNewAllocate \nGst.Rtp.Global.RtpBufferNewAllocate \nGst.Rtp.Global.RtpBufferNewAllocate \nAllocate a new Gst.Buffer with enough data to hold an RTP packet with csrc_count CSRCs a payload length of payload_len and padding of pad_len. All other RTP header fields will be set to FALSE. \nParameters \nthe length of the payload \nthe amount of padding \nthe number of CSRC entries \nA newly allocated buffer that can hold an RTP packet with given parameters. \nAllocate a new Gst.Buffer with enough data to hold an RTP packet with csrc_count CSRCs a payload length of payload_len and padding of pad_len. All other RTP header fields will be set to FALSE. \nParameters \nthe length of the payload \nthe amount of padding \nthe number of CSRC entries \nA newly allocated buffer that can hold an RTP packet with given parameters. \nAllocate a new Gst.Buffer with enough data to hold an RTP packet with csrc_count CSRCs a payload length of payload_len and padding of pad_len. All other RTP header fields will be set to FALSE. \nParameters \nthe length of the payload \nthe amount of padding \nthe number of CSRC entries \nA newly allocated buffer that can hold an RTP packet with given parameters. \nAllocate a new Gst.Buffer with enough data to hold an RTP packet with csrc_count CSRCs a payload length of payload_len and padding of pad_len. All other RTP header fields will be set to FALSE. \nParameters \nthe length of the payload \nthe amount of padding \nthe number of CSRC entries \nA newly allocated buffer that can hold an RTP packet with given parameters. \n"});