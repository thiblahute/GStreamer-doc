fragment_downloaded_cb({"url": "gst-plugins-base-rtp-1.0/gstrtpbaseaudiopayload.html#gst_rtp_base_audio_payload_flush", "fragment": "Gst.Rtp.RTPBaseAudioPayload.Flush \nGst.Rtp.RTPBaseAudioPayload.Flush \nGst.Rtp.RTPBaseAudioPayload.Flush \nGst.Rtp.RTPBaseAudioPayload.Flush \nCreate an RTP buffer and store payload_len bytes of the adapter as the payload. Set the timestamp on the new buffer to timestamp before pushing the buffer downstream. \nIf payload_len is all pending bytes will be flushed. If timestamp is the timestamp will be calculated automatically. \nParameters \na Gst.Rtp.RTPBasePayload \nlength of payload \na Gst.ClockTime \na Gst.FlowReturn \nCreate an RTP buffer and store payload_len bytes of the adapter as the payload. Set the timestamp on the new buffer to timestamp before pushing the buffer downstream. \nIf payload_len is all pending bytes will be flushed. If timestamp is the timestamp will be calculated automatically. \nParameters \na Gst.Rtp.RTPBasePayload \nlength of payload \na Gst.ClockTime \na Gst.FlowReturn \nCreate an RTP buffer and store payload_len bytes of the adapter as the payload. Set the timestamp on the new buffer to timestamp before pushing the buffer downstream. \nIf payload_len is all pending bytes will be flushed. If timestamp is the timestamp will be calculated automatically. \nParameters \nlength of payload \na Gst.ClockTime \na Gst.FlowReturn \nCreate an RTP buffer and store payload_len bytes of the adapter as the payload. Set the timestamp on the new buffer to timestamp before pushing the buffer downstream. \nIf payload_len is all pending bytes will be flushed. If timestamp is the timestamp will be calculated automatically. \nParameters \na Gst.Rtp.RTPBasePayload \nlength of payload \na Gst.ClockTime \na Gst.FlowReturn \n"});