fragment_downloaded_cb({"url": "frequently-asked-questions/general.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"general.md\">\n<h1 id=\"general\">General</h1>\n<h2 id=\"is-gstreamer-a-media-player-\">Is GStreamer a media player ?</h2>\n<p>No, GStreamer is a development framework for creating applications like\nmedia players, video editors, streaming media broadcasters and so on.\nThat said, very good media players can easily be built on top of GStreamer\nespecially when using the high-level APIs we provide such as <code>GstPlayer</code> or\nthe <code>playbin</code> and <code>playbin3</code> elements.</p>\n<h2 id=\"why-is-gstreamer-written-in-c-why-not-cobjectivec-\">Why is GStreamer written in C ? Why not C++/Objective-C/... ?</h2>\n<p>We like C. Aside from \"personal preference\", there are a number\nof technical reasons why C is nice in this project:</p>\n<ul>\n<li>\n<p>C is extremely portable.</p>\n</li>\n<li>\n<p>C is fast.</p>\n</li>\n<li>\n<p>It is easy to make language bindings for libraries written in C.</p>\n</li>\n<li>\n<p>The GObject object system provided by GLib implements objects in C,\nin a portable, powerful way. This library provides for introspection\nand runtime dynamic typing. It is a full OO system, but without the\nsyntactic sugar. If you want sugar, take a look at\n<a href=\"http://live.gnome.org/Vala\">Vala</a>.</p>\n</li>\n<li>\n<p>Use of C integrates nicely with Gtk+ and GNOME. Some people like\nthis a lot, but neither Gtk+ nor GNOME are required by GStreamer.</p>\n</li>\n</ul>\n<p>There are also historical reasons: When GStreamer was started, C++ and\nfree and open source C++ compilers were not as stable and mature as they\nare today, and there was the desire to provide a certain degree of\nAPI and ABI stability.</p>\n<p>So, in closing, we like C. If you don't, that's fine; if you still want\nto help out on GStreamer, we always need more language binding people.\nAnd if not, don't bother us; we're working :-)</p>\n<h2 id=\"what-kind-of-applications-have-been-written-in-gstreamer\">What kind of applications have been written in GStreamer?</h2>\n<p>GStreamer has been designed from the start to be a general-purpose multimedia\nframework that can be used to write all kinds of multimedia applications.</p>\n<p>There are a huge number of media playback applications of course, but also\naudio and video capture applications that record to file or live stream the\ncaptured content. Audio CD and DVD backup applications. Media format conversion\nand transcoding tools. Streaming servers, both for small embedded devices where\nresource usage needs to be tightly controlled, and for servers where scalability\nis key. And of course audio and video editing applications.</p>\n<p>For a list of projects, look at the <a href=\"http://gstreamer.freedesktop.org/apps/\">application\nlist</a> on the GStreamer project\nwebsite.</p>\n<h2 id=\"does-gstreamer-support-the-format-of-my-media-files\">Does GStreamer support the format of my media files?</h2>\n<p>GStreamer is plugin based and was designed to be extensible from the start,\nso it can pretty much support any media format provided suitable plugins\nare available.</p>\n<p>It features demuxers, parsers and decoders for all common media formats and\nhundreds of uncommon ones. If you have trouble playing back a file please\nfirst make sure you have all the required plug-ins installed.</p>\n<p>GStreamer aims to support every format imaginable, but that\ndoesn't mean the developers have managed to achieve that aim yet. If a\nGStreamer enabled application doesn't play back your files, you can help\nus solve that problem by <a href=\"http://bugzilla.gnome.org\">filing an enhancement request\nbug</a> for that format. If you have it, please\nprovide:</p>\n<ul>\n<li>\n<p>links to other players, preferably Open Source and working on Unix</p>\n</li>\n<li>\n<p>links to explanations of the format.</p>\n</li>\n<li>\n<p>ways to obtain mediafiles in that format to test.</p>\n</li>\n</ul>\n<h2 id=\"what-are-the-exact-licensing-terms-for-gstreamer-and-its-plugins\">What are the exact licensing terms for GStreamer and its plugins?</h2>\n<p>All of GStreamer, including our own plugin code, is licensed\nunder the <a href=\"http://www.gnu.org/licenses/lgpl-2.1.html\">GNU LGPL 2.1</a>\nlicense. Some of the libraries we use for some of the plugins are\nhowever under the GPL, which means that those plugins can not be used by\na non-GPL-compatible application. Those are few and far between though\nand there are usually non-GPL alternatives available for those GPL libraries.</p>\n<p>As part of the GStreamer source download you find a file called\nLICENSE_readme in gst-plugins package. That file contains information\nin the exact licensing terms of the libraries we use. As a general rule,\nGStreamer aims at using only LGPL or BSD licensed libraries if available\nand only use GPL or proprietary libraries where no good LGPL or BSD\nalternatives are available.</p>\n<p>You can see the effective license of a plugin as license field in\n<code>gst-inspect-1.0</code>. In the future we might have the application enforce a\nstricter policy (much like tainting in the kernel).</p>\n<h2 id=\"is-gstreamer-a-sound-server-\">Is GStreamer a sound server ?</h2>\n<p>No, GStreamer is not a soundserver. GStreamer does however have\nplugins supporting most of the major soundservers available today,\nincluding pulseaudio, Jack and others.</p>\n<h2 id=\"is-gstreamer-available-for-platforms-other-than-linux\">Is GStreamer available for platforms other than Linux?</h2>\n<p>Yes, GStreamer is a cross-platform multimedia framework that\nworks on all major operating systems, including but not limited to\nLinux, Android, iOS, macOS, Windows, and *BSD, and there are official\nSDK binary packages for Android, iOS, macOS and Windows made available\nwith every GStreamer release.</p>\n<h2 id=\"what-is-gstreamers-relationship-with-the-gnome-community-\">What is GStreamer's relationship with the GNOME community ?</h2>\n<p>GStreamer is an independent project, but we do traditionally have\na close relationship with the GNOME community. Many of our hackers\nconsider themselves also to be members of the GNOME community. GStreamer\nis officially bundled with the GNOME desktop, as lots of GNOME applications\nare using it. This does not exclude use of GStreamer by other communities\nat all, of course.</p>\n<h2 id=\"what-is-gstreamers-relationship-with-the-kde-community-\">What is GStreamer's relationship with the KDE community ?</h2>\n<p>The GStreamer community wants to have as good a relationship as\npossible with KDE, and we hope that someday KDE decides to adopt\nGStreamer as their multimedia platform. There have been contacts\nfrom time to time between the GStreamer community and KDE and\nGStreamer is used by various KDE and Qt multimedia APIs. Also,\nsome of the KDE hackers have created Qt bindings of GStreamer, made a\nsimple video player and using it in some audio players (JuK and AmaroK).</p>\n<h2 id=\"im-considering-adding-gstreamer-output-to-my-application\">I'm considering adding GStreamer output to my application...</h2>\n<p>That doesn't really make sense. GStreamer is not a sound server,\nso you don't output directly to GStreamer, and it's not an intermediate\nAPI between audio data and different kinds of audio sinks. It is a\nfundamental design decision to use GStreamer in your application; there are\nno easy ways of somehow 'transfering' data from your app to GStreamer (well,\nthere are of course, but they would be reserved for special use cases).\nInstead, your application would have to use or implement a number of GStreamer\nelements, string them together, and tell them to run. In that manner the\ndata would all be internal to the GStreamer pipeline.</p>\n<p>That said, it is possible to write a plugin specific to your app that\ncan get at the audio or video data.</p>\n\n</div>\n\n\n        "});