fragment_downloaded_cb({"url": "frequently-asked-questions/troubleshooting.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"troubleshooting.md\">\n<h1 id=\"troubleshooting-gstreamer\">Troubleshooting GStreamer</h1>\n<h2 id=\"some-application-is-telling-me-that-i-am-missing-a-plugin-what-do-i-do-\">Some application is telling me that I am missing a plug-in. What do I do ?</h2>\n<p>Well, start by checking if you really are missing the plug-in.</p>\n<pre><code>gst-inspect-1.0 (plug-in)\n  \n</code></pre>\n<p>and replace (plug-in) with the plug-in you think is missing. If this\ndoesn't return any result, then you either don't have it or it can't be\nfound (which can easily happen if you have installed things from source).</p>\n<p>If you're not sure either way, then chances are good that you don't have\nit. You should get the plug-in and restart the application. How\nto get the plug-in depends on your distribution. Many applications\nand distributions nowadays support automatic plugin installation of\nmissing plugins. Mayb also try playing your file with a different application\nif your application does not support installation of missing plugins.</p>\n<ul>\n<li>\n<p>if you run GStreamer using packages for your distribution, you\nshould check what packages are available for your distribution and\nsee if any of the available packages contains the plug-in. Make sure\nyou have the common plugin packages installed, such as gst-plugins-base,\ngst-plugins-good, gst-plugins-ugly, gst-plugins-bad, and gst-libav.</p>\n</li>\n<li>\n<p>if you run GStreamer from a source install, there's a good chance\nthe plug-in didn't get built because you are missing an external\nlibrary. When you ran configure, you should have gotten output of\nwhat plug-ins are going to be built. You can re-run configure to see\nif it's there. If it isn't, there is a good reason why it is not\ngetting built. The most likely is that you're missing the library\nyou need for it. Check the README file in gst-plugins to see what\nlibrary you need. Make sure to remember to re-run configure after\ninstalling the supporting library !</p>\n</li>\n<li>\n<p>if you run GStreamer from git, the same logic applies as for a\nsource install. Go over the reasons why the plug-in didn't get\nconfigured for build. Check output of config.log for a clue as to\nwhy it doesn't get built if you're sure you have the library needed\ninstalled in a sane place.</p>\n</li>\n</ul>\n<h2 id=\"the-gstreamer-application-i-used-stops-with-a-segmentation-fault-what-can-i-do-\">The GStreamer application I used stops with a segmentation fault. What can I do ?</h2>\n<p>The first point of contact for any problems with a GStreamer application\nshould be the developers of that application. They will be able to investigate\nwhether the problem lies with the application or with GStreamer, and will pass\non any issues to GStreamer developers if needed.</p>\n<p>There are two things you can do. If you compiled GStreamer with\nspecific optimization compilation flags, you should try recompiling\nGStreamer, the application and the plug-ins without any optimization\nflags. This allows you to verify if the problem is due to optimization\nor due to bad code. Second, it will also allow you to provide a\nreasonable backtrace in case the segmentation fault still occurs.</p>\n<p>The second thing you can do is look at the backtrace to get an idea of\nwhere things are going wrong, or give us an idea of what is going wrong.\nTo provide a backtrace, you should</p>\n<ol>\n<li>\n<p>run the application in gdb by starting it with</p>\n<pre><code>    gdb (gst-application)\n  \n</code></pre>\n<p>(If the application is in a source tree instead of installed on the\nsystem, you might want to put \"libtool\" before \"gdb\")</p>\n</li>\n<li>\n<p>Pass on the command line arguments to the application by typing</p>\n<pre><code>    set args (the arguments to the application)\n  \n</code></pre>\n<p>at the (gdb) prompt</p>\n</li>\n<li>\n<p>Type \"run\" at the (gdb) prompt and wait for the application to\nsegfault. The application will run a lot slower, however.</p>\n</li>\n<li>\n<p>After the segfault, type \"bt\" to get a backtrace. This is a stack of\nfunction calls detailing the path from main () to where the code is\ncurrently at.</p>\n</li>\n<li>\n<p>If the application you're trying to debug contains threads, it is\nalso useful to do</p>\n<pre><code>    info threads\n  \n</code></pre>\n<p>and get backtraces of all of the threads involved, by switching to a\ndifferent thread using \"thread (number)\" and then again requesting a\nbacktrace using \"bt\".</p>\n</li>\n<li>\n<p>If you can't or don't want to work out the problem yourself, a copy\nand paste of all this information should be included in your <a href=\"../#using-bugs-where\">bug\nreport</a>.</p>\n</li>\n</ol>\n\n</div>\n\n\n\t"});