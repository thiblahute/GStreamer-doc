fragment_downloaded_cb({"url": "frequently-asked-questions/using.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"using.md\">\n        <h1 id=\"using-gstreamer\">Using GStreamer</h1>\n<h2 id=\"ok-ive-installed-gstreamer-what-can-i-do-next-\">Ok, I've installed GStreamer. What can I do next ?</h2>\n<p>First of all, verify that you have a working installation and that\nyou can inspect plugins by typing</p>\n<pre><code>$ gst-inspect-1.0 fakesrc\n</code></pre>\n<p>This should print out a bunch of information about this particular\nelement. If this tells you that there is \"no such element or plugin\",\nyou haven't installed GStreamer correctly. Please check <a href=\"../#chapter-getting\">how to get\nGStreamer</a> If this fails with any other message, we\nwould appreciate a <a href=\"../#using-bugs-where\">bug report</a>.</p>\n<p>It's time to try out a few things. Start with gst-launch and two\nplug-ins that you really should have : fakesrc and fakesink. They do\nnothing except pass empty buffers. Type this at the command-line\n:</p>\n<pre><code>$ gst-launch-1.0 -v fakesrc silent=false num-buffers=3 ! fakesink silent=false\n</code></pre>\n<p>This will print out output that looks similar to this :</p>\n<pre><code>RUNNING pipeline ...\nfakesrc0: last-message = \"get      ******* (fakesrc0:src)gt; (0 bytes, 0) 0x8057510\"\nfakesink0: last-message = \"chain   ******* (fakesink0:sink)lt; (0 bytes, 0) 0x8057510\"\nfakesrc0: last-message = \"get      ******* (fakesrc0:src)gt; (0 bytes, 1) 0x8057510\"\nfakesink0: last-message = \"chain   ******* (fakesink0:sink)lt; (0 bytes, 1) 0x8057510\"\nfakesrc0: last-message = \"get      ******* (fakesrc0:src)gt; (0 bytes, 2) 0x8057510\"\nfakesink0: last-message = \"chain   ******* (fakesink0:sink)lt; (0 bytes, 2) 0x8057510\"\nexecution ended after 5 iterations (sum 301479000 ns, average 60295800 ns, min 3000 ns, max 105482000 ns)\n</code></pre>\n<p>(Some parts of output have been removed for clarity) If it looks\nsimilar, then GStreamer itself is running correctly.</p>\n<p>To get a test video displayed, try:</p>\n<pre><code>$ gst-launch-1.0 videotestsrc ! videoconvert ! autovideosink\n</code></pre>\n<p>If <code>autovideosink</code> doesn't work, try an element that's specific for your\noperating system and windowing system, such as <code>ximagesink</code> or <code>glimagesink</code>\nor (on windows) <code>d3dvideosink</code>.</p>\n<h2 id=\"can-my-system-play-sound-through-gstreamer-\">Can my system play sound through GStreamer ?</h2>\n<p>You can test this by trying to play a sine tone. For this, you\nneed to link the audiotestsrc element to an output element that matches\nyour hardware. A (non-complete) list of output plug-ins for audio is</p>\n<ul>\n<li>\n<p><code>pulsesink</code> for Pulseaudio output</p>\n</li>\n<li>\n<p><code>alsasink</code> for ALSA output</p>\n</li>\n<li>\n<p><code>osssink</code> and <code>oss4sink</code> for OSS/OSSv4 output</p>\n</li>\n<li>\n<p><code>jackaudiosink</code> for JACK output</p>\n</li>\n<li>\n<p><code>autoaudiosink</code> for automatic audio output selection</p>\n</li>\n</ul>\n<p>First of all, run gst-inspect-1.0 on the output plug-in you want to use\nto make sure you have it installed. For example, if you use Pulseaudio,\nrun</p>\n<pre><code>$ gst-inspect-1.0 pulsesink\n</code></pre>\n<p>and see if that prints out a bunch of properties for the plug-in.</p>\n<p>Then try to play the sine tone by\nrunning</p>\n<pre><code>$ gst-launch-1.0 audiotestsrc ! audioconvert ! audioresample ! pulsesink\n</code></pre>\n<p>and see if you hear something. Make sure your volume is turned up, but\nalso make sure it is not too loud and you are not wearing your\nheadphones.</p>\n<h2 id=\"how-can-i-see-what-gstreamer-plugins-i-have-on-my-system-\">How can I see what GStreamer plugins I have on my system ?</h2>\n<p>To do this you use the gst-inspect command-line tool, which comes\nstandard with GStreamer. Invoked without any arguments,</p>\n<pre><code>$ gst-inspect-1.0\n</code></pre>\n<p>will print out a listing of installed plugins. To learn more about a\nparticular plugin, pass its name on the command line. For example,</p>\n<pre><code>$ gst-inspect-1.0 volume\n</code></pre>\n<p>will give you information about the volume plugin.</p>\n<h2 id=\"where-should-i-report-bugs-\">Where should I report bugs ?</h2>\n<p>Bugs are tracked in GNOME's Bugzilla at <a href=\"http://bugzilla.gnome.org\">http://bugzilla.gnome.org</a>, under\nthe product GStreamer. Using bugzilla you can view past bug history, report\nnew bugs, submit patches etc. Bugzilla requires you to create an account there,\nwhich might seem cumbersome, but allows us to at least have a chance at\ncontacting you for further information, as we will often have to do.</p>\n<h2 id=\"how-should-i-report-bugs-\">How should I report bugs ?</h2>\n<p>When doing a bug report, you should at least describe</p>\n<ul>\n<li>\n<p>your distribution, distribution version and GStreamer version</p>\n</li>\n<li>\n<p>how you installed GStreamer (from git, source, packages, which ?)</p>\n</li>\n<li>\n<p>if you installed GStreamer before</p>\n</li>\n</ul>\n<p>If the application you are having problems with is segfaulting, then\nprovide us with the necessary gdb output. See\n<a href=\"../#troubleshooting-segfault\">???</a></p>\n<h2 id=\"how-do-i-use-the-gstreamer-command-line-interface-\">How do I use the GStreamer command line interface ?</h2>\n<p>You access the GStreamer command line interface using the command\n<code>gst-launch-1.0</code>. To play a file you could just use</p>\n<pre><code>gst-play-1.0 song.mp3\n</code></pre>\n<p>or</p>\n<pre><code>gst-launch-1.0 playbin uri=file:///path/to/song.mp3\n</code></pre>\n<p>To decode an mp3 audio file and play it through Pulseaudio, you could also use</p>\n<pre><code>gst-launch-1.0 filesrc location=thesong.mp3 ! decodebin ! audioconvert ! pulsesink\n</code></pre>\n<p>or</p>\n<pre><code>gst-launch-1.0 filesrc location=thesong.mp3 ! mpegaudioparse ! mpg123audiodec ! audioconvert ! pulsesink\n</code></pre>\n<p>. More examples can be found in the gst-launch man page.</p>\n<p>To automatically detect the right codec in a pipeline,\ntry</p>\n<pre><code>gst-launch-1.0 filesrc location=my-random-media-file.mpeg ! decodebin !\n pulsesink\n</code></pre>\n<p>.\nor</p>\n<pre><code>gst-launch-1.0 filesrc location=my-random-media-file.mpeg ! decodebin !\n videoconvert ! xvimagesink\n</code></pre>\n<p>Something more\ncomplicated:</p>\n<pre><code>gst-launch-1.0 filesrc location=my-random-media-file.mpeg ! decodebin name=decoder\n   decoder. ! queue ! videoconvert ! xvimagesink\n   decoder. ! queue ! audioconvert ! pulsesink\n</code></pre>\n<p>We also have a basic media playing plugin that will take care of most\nthings for you. This plugin is called playbin. Try\nthis:</p>\n<pre><code>gst-launch-1.0 playbin uri=file:///home/joe/my-random-media-file.mpeg\n</code></pre>\n<p>This should play the file if the format is supported, ie. you have all\nthe necessary demuxing and decoding and some output plugins installed.</p>\n\n        \n\n    </div>\n\n\n        "});