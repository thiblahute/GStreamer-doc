fragment_downloaded_cb({"url": "frequently-asked-questions/developing.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"developing.md\">\n        <h1 id=\"developing-applications-with-gstreamer\">Developing applications with GStreamer</h1>\n<h2 id=\"how-do-i-compile-programs-that-use-gstreamer-\">How do I compile programs that use GStreamer ?</h2>\n<!-- FIXME: update for windows, macOS, and meson build, get rid of libtool things -->\n<p>This depends all a bit on what your development environment and target\noperating systems is. The following is mostly aimed at Linux/unix setups.</p>\n<p>GStreamer uses the <code>pkg-config</code> utility to provide applications with the right\ncompiler and linker flags. <code>pkg-config</code> is a standard build tool that is widely\nused unix systems to locate libraries and retrieve build settings, so if you're\nfamiliar with using it already then you're basically set.</p>\n<p>If you're not familiar with <code>pkg-config</code> to compile and link a small\none-file program, pass the <code>--cflags</code> and <code>--libs</code> arguments to <code>pkg-config</code>.\nFor\nexample:</p>\n<pre><code>$ libtool --mode=link gcc `pkg-config --cflags --libs gstreamer-1.0` -o myprog myprog.c\n</code></pre>\n<p>would be sufficient for a gstreamer-only program. If (for example) your\napplication also used GTK+ 3.0, you could use</p>\n<pre><code>$ libtool --mode=link gcc `pkg-config --cflags --libs gstreamer-1.0 gtk+-3.0` -o myprog myprog.c\n</code></pre>\n<p>Those are back-ticks (on the same key with the tilde on US keyboards),\nnot single quotes.</p>\n<p>For bigger projects, you should integrate pkg-config use in your\nMakefile, or integrate with autoconf using the pkg.m4 macro (providing\n<code>PKG_CONFIG_CHECK</code>).</p>\n<h2 id=\"how-do-i-develop-against-an-uninstalled-gstreamer-copy-\">How do I develop against an uninstalled GStreamer copy ?</h2>\n<p>It is possible to develop and compile against an uninstalled copy\nof gstreamer and gst-plugins-* (for example, against git checkouts).\nThis allows you to develop against and test the latest GStreamer version\nwithout having to install it and without interfering with your\nsystem-wide GStreamer setup.</p>\n<p>There are two ways to achieve such a setup:</p>\n<ol>\n<li>\n<p><a href=\"https://cgit.freedesktop.org/gstreamer/gst-build/\"><code>gst-build</code></a> is our new meta-build module based on the\n<a href=\"http://mesonbuild.com\">Meson build system</a>. This is the shiny new thing. It's fast and\nsimple to get started with, but you will need a recent version of Meson\ninstalled. Just check out the git repository and run the <code>setup.py</code> script.\nOnce the initial meson configure stage has passed, you can enter an\nuninstalled environment by running <code>ninja uninstalled</code> in the build\ndirectory. This will make sure tools and plugin from the uninstalled build\ntree will be used. Any problems, let us know.</p>\n</li>\n<li>\n<p><a href=\"http://cgit.freedesktop.org/gstreamer/gstreamer/tree/scripts/gst-uninstalled\"><code>gst-uninstalled</code></a> is our traditional autotools-\nand libtool-based build setup. The easiest way too create such a setup\nis using the <a href=\"http://cgit.freedesktop.org/gstreamer/gstreamer/tree/scripts/create-uninstalled-setup.sh\">latest version of the <code>create-uninstalled-setup.sh</code>\nscript</a>. This setup makes use of the <a href=\"http://cgit.freedesktop.org/gstreamer/gstreamer/tree/scripts/gst-uninstalled\">latest version of\nthe <code>gst-uninstalled</code> script</a>. Running this script, you'll\nbe in an environment where the uninstalled tools and plugins will be used by\ndefault. Also, <code>pkg-config</code> will detect the uninstalled copies before (and\nprefer them to) any installed copies.</p>\n</li>\n</ol>\n<p>Multiple uninstalled setups can be used in parallel, e.g. one for the\nlatest stable branch and one for git master. Have a look at the\n<a href=\"http://cgit.freedesktop.org/gstreamer/gstreamer/tree/scripts/gst-uninstalled\">gst-uninstalled</a> script to see how it determines which\nenvironment is used.</p>\n<h2 id=\"how-can-i-use-gconf-to-get-the-systemwide-defaults-\">How can I use GConf to get the system-wide defaults ?</h2>\n<p>For GNOME applications it's a good idea to use GConf to find the\ndefault ways of outputting audio and video. You can do this by using the\n'gconfaudiosink' and 'gconfvideosink' elements for audio and video\noutput. They will take care of everything GConf-related for you and\nautomatically use the outputs that the user configured. If you are using\ngconfaudiosink, your application should set the 'profile' property.</p>\n<h2 id=\"how-do-i-debug-these-funny-shell-scripts-that-libtool-makes-\">How do I debug these funny shell scripts that libtool makes ?</h2>\n<p>When you link a program against uninstalled GStreamer using\nlibtool, funny shell scripts are made to modify your shared object\nsearch path and then run your program. For instance, to debug\ngst-launch, try</p>\n<pre><code>libtool --mode=execute gdb /path/to/gst-launch\n</code></pre>\n<p>. If this does not work, you're probably using a broken version of\nlibtool.</p>\n<p>If you build GStreamer using the Meson build system, libtool will not\nbe used and this is not a problem. You can run <code>gdb</code>, <code>valgrind</code> or any\ndebugging tools directly on the binaries Meson creates in the build\ndirectory.</p>\n<h2 id=\"why-is-mail-traffic-so-low-on-gstreamerdevel-\">Why is mail traffic so low on gstreamer-devel ?</h2>\n<p>Our main arena for coordination and discussion are IRC and bugzilla, not\nmailing lists. Join us in <a href=\"irc://irc.freenode.net/#gstreamer\"><code>#gstreamer</code></a> on irc.freenode.net.\nThere is also a <a href=\"https://webchat.freenode.net\">webchat interface</a>. For larger picture\nquestions or getting more input from more people, a mail to the gstreamer-devel\nmailing list is never a bad idea, however.</p>\n<h2 id=\"what-kind-of-versioning-scheme-does-gstreamer-use-\">What kind of versioning scheme does GStreamer use ?</h2>\n<p>For public releases, GStreamer uses a standard MAJOR.MINOR.MICRO\nversion scheme. If the release consists of mostly bug fixes or\nincremental changes, the MICRO version is incremented. If the release\ncontains big changes, the MINOR version is incremented. A change in the\nMAJOR version indicates incompatible API or ABI changes, which happens\nvery rarely (the last one dates back to 2012). This is also known as\n<a href=\"http://semver.org\">semantic versioning</a>.</p>\n<p>Even MINOR numbers indicate <em>stable releases</em>: 1.0.x, 1.2.x, 1.4.x, 1.6.x,\n1.8.x, and 1.10.x are our stable release series. Odd MINOR numbers are used\nfor <em>unstable development releases</em> and <em>prereleases</em> which should only be\nused temporarily for testing; your help in testing these tarballs and packages\nis very much appreciated!</p>\n<p>During the development cycle, GStreamer also uses a fourth or NANO\nnumber. If this number is 1, then it's a git development version. Any\ntarball or package that has a nano number of 1 is made from git and thus\nnot supported. Additionally, if you didn't get this package or tarball\nfrom the GStreamer team, don't have high hopes on it doing whatever you\nwant it to do.</p>\n<h2 id=\"what-is-the-coding-style-for-gstreamer-code\">What is the coding style for GStreamer code?</h2>\n<p>The core and almost all plugin modules are basically coded in\nK&amp;R with 2-space indenting. Just follow what's already there and you'll\nbe fine.</p>\n<p>Individual plugins in gst-plugins-* or plugins that you want considered\nfor addition to one of the gst-plugins-* modules should be coded in the\nsame style. It's easier if everything is consistent. Consistency is, of\ncourse, the goal.</p>\n<p>Simply run your code (only the *.c files, not the header files) through</p>\n<pre><code>indent \\\n  --braces-on-if-line \\\n  --case-brace-indentation0 \\\n  --case-indentation2 \\\n  --braces-after-struct-decl-line \\\n  --line-length80 \\\n  --no-tabs \\\n  --cuddle-else \\\n  --dont-line-up-parentheses \\\n  --continuation-indentation4 \\\n  --honour-newlines \\\n  --tab-size8 \\\n  --indent-level2\n</code></pre>\n<p>before submitting a patch. (This is using GNU indent.) There is also a\n<code>gst-indent</code> script in the GStreamer core source tree in the tools\ndirectory which wraps this and contains the latest option. The easiest\nway to get the indenting right is probably to develop against a git\ncheckout. The local git commit hook will ensure correct indentation. We\nonly require code files to be indented, header files may be indented\nmanually for better readability (however, please use spaces for\nindenting, not tabs, even in header files).</p>\n<p>Comments should be in <code>/* ANSI C comment style */</code> and code should generally\nbe compatible with ANSI C89, so please declare all variables at the beginning\nof the block etc.</p>\n<p>Patches should ideally be made against git master or a recent release and\nshould be created using <code>git format-patch</code> format. They should then be\nattached individually to a bug report or feature request in\n<a href=\"http://bugzilla.gnome.org\">bugzilla</a>. Please don't send patches to the\nmailing list, they will likely get lost there.</p>\n<p>See <a href=\"../contribute/index.html#how-to-submit-patches\">How to submit patches</a> for more details.</p>\n<h2 id=\"i-have-translated-one-of-the-module-po-files-into-a-new-language-how-do-i-get-it-included\">I have translated one of the module .po files into a new language. How do I get it included?</h2>\n<p>GStreamer translations are uniformly managed through the\n<a href=\"http://translationproject.org\">Translation Project</a>. There are some\ninstructions on how to join the Translation Project team and submit new\ntranslations at http://translationproject.org/html/translators.html.</p>\n<p>New translations submitted via the Translation Project are merged\nperiodically into git by the maintainers by running <code>make download-po</code>\nin the various modules when preparing a new release.</p>\n<p>We won't merge new translations or translation fixes directly, everything\nmust go via the Translation Project.</p>\n\n        \n\n    </div>\n\n\n        "});