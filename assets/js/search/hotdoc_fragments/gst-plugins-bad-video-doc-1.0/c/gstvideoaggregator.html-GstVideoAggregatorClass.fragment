fragment_downloaded_cb({"url": "gst-plugins-bad-video-doc-1.0/c/gstvideoaggregator.html#GstVideoAggregatorClass", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GstVideoAggregatorClass\">\n\t\t<h3 id=\"struct-gstvideoaggregatorclass\">\n\t\tstruct GstVideoAggregatorClass\n\t</h3>\n\n\t\t\n<div class=\"member_details\">\n\t<h4 id=\"fields\">Fields</h4>\n\t<div class=\"member_container\">\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.parent_class\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"GstAggregatorClass\" href=\"../../gst-plugins-bad-base-doc-1.0/gstaggregator.html#GstAggregatorClass\">GstAggregatorClass</a> <em><code>parent_class</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.update_caps\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>update_caps</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nLets subclasses update the <a href=\"../../libgstreamer-doc-1.0/gstcaps.html#GstCaps\">GstCaps</a> representing\nthe src pad caps before usage.  Return <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#NULL:CAPS\">NULL</a> to indicate failure.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.fixate_caps\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>fixate_caps</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Fixate and return the src pad caps provided.  The function takes\nownership of <em>caps</em> and returns a fixated version of\n<em>caps</em>. <em>caps</em> is not guaranteed to be writable.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.aggregate_frames\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>aggregate_frames</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Lets subclasses aggregate frames that are ready. Subclasses\nshould iterate the GstElement.sinkpads and use the already\nmapped <a href=\"../../gst-plugins-base-video-doc-1.0/video-frame.html#GstVideoFrame\">GstVideoFrame</a> from GstVideoAggregatorPad.aggregated_frame\nor directly use the <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GstBuffer\">GstBuffer</a> from GstVideoAggregatorPad.buffer\nif it needs to map the buffer in a special way. The result of the\naggregation should land in <em>outbuffer</em>.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.get_output_buffer\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>get_output_buffer</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nLets subclasses provide a <a href=\"../../libgstreamer-doc-1.0/gstbuffer.html#GstBuffer\">GstBuffer</a> to be used as <em>outbuffer</em> of\nthe aggregate_frames vmethod.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.negotiated_caps\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>negotiated_caps</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nNotifies subclasses what caps format has been negotiated</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.find_best_format\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>find_best_format</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>Optional.\nLets subclasses decide of the best common format to use.</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass.sink_non_alpha_caps\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><a title=\"GstCaps\" href=\"../../libgstreamer-doc-1.0/gstcaps.html#GstCaps\">GstCaps</a> * <em><code>sink_non_alpha_caps</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"GstVideoAggregatorClass._gst_reserved\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>gpointer <em><code>_gst_reserved</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n</div>\n\n\n</div>\n\n\n"});