fragment_downloaded_cb({"url": "gstreamer-libs-doc-1.0/c/base/gstbasesrc.html#_GstBaseSrcClass", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"_GstBaseSrcClass\">\n\t\t<h3 id=\"struct-_gstbasesrcclass\">\n\t\tstruct _GstBaseSrcClass\n\t</h3>\n\n\t\t<pre class=\"raw_code\">\nstruct _GstBaseSrcClass {\n  /* virtual methods for subclasses */\n\n  /* get caps from subclass */\n  GstCaps*      (*get_caps)     (GstBaseSrc *src, GstCaps *filter);\n  /* decide on caps */\n  gboolean      (*negotiate)    (GstBaseSrc *src);\n  /* called if, in negotiation, caps need fixating */\n  GstCaps *     (*fixate)       (GstBaseSrc *src, GstCaps *caps);\n  /* notify the subclass of new caps */\n  gboolean      (*set_caps)     (GstBaseSrc *src, GstCaps *caps);\n\n  /* setup allocation query */\n  gboolean      (*decide_allocation)   (GstBaseSrc *src, GstQuery *query);\n\n  /* start and stop processing, ideal for opening/closing the resource */\n  gboolean      (*start)        (GstBaseSrc *src);\n  gboolean      (*stop)         (GstBaseSrc *src);\n\n  /* given a buffer, return start and stop time when it should be pushed\n   * out. The base class will sync on the clock using these times. */\n  void          (*get_times)    (GstBaseSrc *src, GstBuffer *buffer,\n                                 GstClockTime *start, GstClockTime *end);\n\n  /* get the total size of the resource in the format set by\n   * gst_base_src_set_format() */\n  gboolean      (*get_size)     (GstBaseSrc *src, guint64 *size);\n\n  /* check if the resource is seekable */\n  gboolean      (*is_seekable)  (GstBaseSrc *src);\n\n  /* Prepare the segment on which to perform do_seek(), converting to the\n   * current basesrc format. */\n  gboolean      (*prepare_seek_segment) (GstBaseSrc *src, GstEvent *seek,\n                                         GstSegment *segment);\n  /* notify subclasses of a seek */\n  gboolean      (*do_seek)      (GstBaseSrc *src, GstSegment *segment);\n\n  /* unlock any pending access to the resource. subclasses should unlock\n   * any function ASAP. */\n  gboolean      (*unlock)       (GstBaseSrc *src);\n  /* Clear any pending unlock request, as we succeeded in unlocking */\n  gboolean      (*unlock_stop)  (GstBaseSrc *src);\n\n  /* notify subclasses of a query */\n  gboolean      (*query)        (GstBaseSrc *src, GstQuery *query);\n\n  /* notify subclasses of an event */\n  gboolean      (*event)        (GstBaseSrc *src, GstEvent *event);\n\n  /* ask the subclass to create a buffer with offset and size, the default\n   * implementation will call alloc and fill. */\n  GstFlowReturn (*create)       (GstBaseSrc *src, guint64 offset, guint size,\n                                 GstBuffer **buf);\n  /* ask the subclass to allocate an output buffer. The default implementation\n   * will use the negotiated allocator. */\n  GstFlowReturn (*alloc)        (GstBaseSrc *src, guint64 offset, guint size,\n                                 GstBuffer **buf);\n  /* ask the subclass to fill the buffer with data from offset and size */\n  GstFlowReturn (*fill)         (GstBaseSrc *src, guint64 offset, guint size,\n                                 GstBuffer *buf);\n\n};\n</pre>\n\n\n<div class=\"member_details\">\n\t<h4 id=\"fields1\">Fields</h4>\n\t<div class=\"member_container\">\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t<tr id=\"_GstBaseSrcClass.get_caps\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>get_caps</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"_GstBaseSrcClass.gboolean\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>int (int *)  <em><code>gboolean</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"_GstBaseSrcClass.fixate\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>fixate</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"_GstBaseSrcClass.get_times\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code><em><code>get_times</code></em>():</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t<tr id=\"_GstBaseSrcClass.GstFlowReturn\">\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>int (int *)  <em><code>GstFlowReturn</code></em>:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td></td>\n</tr>\n\n\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n</div>\n\n\n</div>\n\n\n"});