fragment_downloaded_cb({"url": "gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstbaseparse.h\">\n<h1 id=\"gstbaseparse\">GstBaseParse</h1><p>This base class is for parser elements that process data and splits it\ninto separate audio/video/whatever frames.</p>\n<p>It provides for:</p>\n<ul>\n<li>provides one sink pad and one source pad</li>\n<li>handles state changes</li>\n<li>can operate in pull mode or push mode</li>\n<li>handles seeking in both modes</li>\n<li>handles events (SEGMENT/EOS/FLUSH)</li>\n<li>handles queries (POSITION/DURATION/SEEKING/FORMAT/CONVERT)</li>\n<li>handles flushing</li>\n</ul>\n<p>The purpose of this base class is to provide the basic functionality of\na parser and share a lot of rather complex code.</p>\n<h1 id=\"description-of-the-parsing-mechanism\">Description of the parsing mechanism:</h1>\n<h2 id=\"setup-phase\">Set-up phase</h2>\n<ul>\n<li>\n<p><a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> calls <em>start</em> to inform subclass that data processing is\nabout to start now.</p>\n</li>\n<li>\n<p><a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> class calls <em>set_sink_caps</em> to inform the subclass about\nincoming sinkpad caps. Subclass could already set the srcpad caps\naccordingly, but this might be delayed until calling\n<a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_finish_frame\">GstBase.BaseParse.prototype.finish_frame</a> with a non-queued frame.</p>\n</li>\n<li>\n<p>At least at this point subclass needs to tell the <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> class\nhow big data chunks it wants to receive (min_frame_size). It can do\nthis with <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_min_frame_size\">GstBase.BaseParse.prototype.set_min_frame_size</a>.</p>\n</li>\n<li>\n<p><a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> class sets up appropriate data passing mode (pull/push)\nand starts to process the data.</p>\n</li>\n</ul>\n<h2 id=\"parsing-phase\">Parsing phase</h2>\n<ul>\n<li>\n<p><a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> gathers at least min_frame_size bytes of data either\nby pulling it from upstream or collecting buffers in an internal\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstAdapter.html#GstAdapter-struct\">GstBase.Adapter</a>.</p>\n</li>\n<li>\n<p>A buffer of (at least) min_frame_size bytes is passed to subclass with\n<em>handle_frame</em>. Subclass checks the contents and can optionally\nreturn GST_FLOW_OK along with an amount of data to be skipped to find\na valid frame (which will result in a subsequent DISCONT).\nIf, otherwise, the buffer does not hold a complete frame,\n<em>handle_frame</em> can merely return and will be called again when additional\ndata is available.  In push mode this amounts to an\nadditional input buffer (thus minimal additional latency), in pull mode\nthis amounts to some arbitrary reasonable buffer size increase.\nOf course, <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_min_frame_size\">GstBase.BaseParse.prototype.set_min_frame_size</a> could also be used if a\nvery specific known amount of additional data is required.\nIf, however, the buffer holds a complete valid frame, it can pass\nthe size of this frame to <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_finish_frame\">GstBase.BaseParse.prototype.finish_frame</a>.\nIf acting as a converter, it can also merely indicate consumed input data\nwhile simultaneously providing custom output data.\nNote that baseclass performs some processing (such as tracking\noverall consumed data rate versus duration) for each finished frame,\nbut other state is only updated upon each call to <em>handle_frame</em>\n(such as tracking upstream input timestamp).</p>\n<p>Subclass is also responsible for setting the buffer metadata\n(e.g. buffer timestamp and duration, or keyframe if applicable).\n(although the latter can also be done by <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> if it is\nappropriately configured, see below).  Frame is provided with\ntimestamp derived from upstream (as much as generally possible),\nduration obtained from configuration (see below), and offset\nif meaningful (in pull mode).</p>\n<p>Note that <em>check_valid_frame</em> might receive any small\namount of input data when leftover data is being drained (e.g. at EOS).</p>\n</li>\n<li>\n<p>As part of finish frame processing,\njust prior to actually pushing the buffer in question,\nit is passed to <em>pre_push_frame</em> which gives subclass yet one\nlast chance to examine buffer metadata, or to send some custom (tag)\nevents, or to perform custom (segment) filtering.</p>\n</li>\n<li>\n<p>During the parsing process <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParseClass\">GstBase.BaseParseClass</a> will handle both srcpad\nand sinkpad events. They will be passed to subclass if <em>event</em> or\n<em>src_event</em> callbacks have been provided.</p>\n</li>\n</ul>\n<h2 id=\"shutdown-phase\">Shutdown phase</h2>\n<ul>\n<li><a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> class calls <em>stop</em> to inform the subclass that data\nparsing will be stopped.</li>\n</ul>\n<p>Subclass is responsible for providing pad template caps for\nsource and sink pads. The pads need to be named \"sink\" and \"src\". It also\nneeds to set the fixed caps on srcpad, when the format is ensured (e.g.\nwhen base class calls subclass' <em>set_sink_caps</em> function).</p>\n<p>This base class uses <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-GstFormat.html#GST-FORMAT-DEFAULT:CAPS\">Gst.Format.prototype.default</a> as a meaning of frames. So,\nsubclass conversion routine needs to know that conversion from\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-GstFormat.html#GST-FORMAT-TIME:CAPS\">Gst.Format.prototype.time</a> to <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-GstFormat.html#GST-FORMAT-DEFAULT:CAPS\">Gst.Format.prototype.default</a> must return the\nframe number that can be found from the given byte position.</p>\n<p><a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> uses subclasses conversion methods also for seeking (or\notherwise uses its own default one, see also below).</p>\n<p>Subclass <em>start</em> and <em>stop</em> functions will be called to inform the beginning\nand end of data processing.</p>\n<p>Things that subclass need to take care of:</p>\n<ul>\n<li>\n<p>Provide pad templates</p>\n</li>\n<li>\n<p>Fixate the source pad caps when appropriate</p>\n</li>\n<li>\n<p>Inform base class how big data chunks should be retrieved. This is\ndone with <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_min_frame_size\">GstBase.BaseParse.prototype.set_min_frame_size</a> function.</p>\n</li>\n<li>\n<p>Examine data chunks passed to subclass with <em>handle_frame</em> and pass\nproper frame(s) to <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_finish_frame\">GstBase.BaseParse.prototype.finish_frame</a>, and setting src pad\ncaps and timestamps on frame.</p>\n</li>\n<li>\n<p>Provide conversion functions</p>\n</li>\n<li>\n<p>Update the duration information with <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_duration\">GstBase.BaseParse.prototype.set_duration</a></p>\n</li>\n<li>\n<p>Optionally passthrough using <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_passthrough\">GstBase.BaseParse.prototype.set_passthrough</a></p>\n</li>\n<li>\n<p>Configure various baseparse parameters using\n<a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_average_bitrate\">GstBase.BaseParse.prototype.set_average_bitrate</a>, <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_syncable\">GstBase.BaseParse.prototype.set_syncable</a>\nand <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#gst_base_parse_set_frame_rate\">GstBase.BaseParse.prototype.set_frame_rate</a>.</p>\n</li>\n<li>\n<p>In particular, if subclass is unable to determine a duration, but\nparsing (or specs) yields a frames per seconds rate, then this can be\nprovided to <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> to enable it to cater for\nbuffer time metadata (which will be taken from upstream as much as\npossible). Internally keeping track of frame durations and respective\nsizes that have been pushed provides <a href=\"../../../gstreamer-libs-doc-1.0/javascript/base/gstbaseparse.html#GstBaseParse\">GstBase.BaseParse</a> with an estimated\nbitrate. A default <em>convert</em> (used if not overridden) will then use these\nrates to perform obvious conversions.  These rates are also used to\nupdate (estimated) duration at regular frame intervals.</p>\n</li>\n</ul>\n\n</div>\n\n\n"});