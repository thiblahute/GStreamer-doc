fragment_downloaded_cb({"url": "gstreamer-libs-doc-1.0/javascript/check/gstharness.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstharness.h\">\n<h1 id=\"gstharness\">GstHarness</h1><p><a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#GstHarness\">GstHarness (not introspectable)</a> is meant to make writing unit test for GStreamer much easier.\nIt can be thought of as a way of treating a <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstElement.html#GstElement-struct\">Gst.Element</a> as a black box,\ndeterministically feeding it data, and controlling what data it outputs.</p>\n<p>The basic structure of <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#GstHarness\">GstHarness (not introspectable)</a> is two \"floating\" GstPads that connect\nto the harnessed <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstElement.html#GstElement-struct\">Gst.Element</a> src and sink GstPads like so:</p>\n<pre><code>          __________________________\n _____   |  _____            _____  |   _____\n|     |  | |     |          |     | |  |     |\n| src |--+-| sink|  Element | src |-+--| sink|\n|_____|  | |_____|          |_____| |  |_____|\n         |__________________________|\n\n</code></pre>\n<p>With this, you can now simulate any environment the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstElement.html#GstElement-struct\">Gst.Element</a> might find\nitself in. By specifying the <a href=\"../../../gstreamer-libs-doc-1.0/c/base/gsttypefindhelper.html#GstCaps\">Gst.Caps</a> of the harness GstPads, using\nfunctions like <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_set_src_caps\">gst_harness_set_src_caps (not introspectable)</a> or <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_set_sink_caps_str\">gst_harness_set_sink_caps_str (not introspectable)</a>,\nyou can test how the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstElement.html#GstElement-struct\">Gst.Element</a> interacts with different caps sets.</p>\n<p>Your harnessed <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstElement.html#GstElement-struct\">Gst.Element</a> can of course also be a bin, and using\n<a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_new_parse\">gst_harness_new_parse (not introspectable)</a> supporting standard gst-launch syntax, you can\neasily test a whole pipeline instead of just one element.</p>\n<p>You can then go on to push GstBuffers and GstEvents on to the srcpad,\nusing functions like <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_push\">gst_harness_push (not introspectable)</a> and <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_push_event\">gst_harness_push_event (not introspectable)</a>, and\nthen pull them out to examine them with <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_pull\">gst_harness_pull (not introspectable)</a> and\n<a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_pull_event\">gst_harness_pull_event (not introspectable)</a>.</p>\n<h2 id=\"a-simple-bufferin-bufferout-example\">A simple buffer-in buffer-out example</h2>\n<pre><code class=\"language-c\">  #include &lt;gst/gst.h&gt;\n  #include &lt;gst/check/gstharness.h&gt;\n  GstHarness *h;\n  GstBuffer *in_buf;\n  GstBuffer *out_buf;\n\n  // attach the harness to the src and sink pad of GstQueue\n  h = gst_harness_new (\"queue\");\n\n  // we must specify a caps before pushing buffers\n  gst_harness_set_src_caps_str (h, \"mycaps\");\n\n  // create a buffer of size 42\n  in_buf = gst_harness_create_buffer (h, 42);\n\n  // push the buffer into the queue\n  gst_harness_push (h, in_buf);\n\n  // pull the buffer from the queue\n  out_buf = gst_harness_pull (h);\n\n  // validate the buffer in is the same as buffer out\n  fail_unless (in_buf == out_buf);\n\n  // cleanup\n  gst_buffer_unref (out_buf);\n  gst_harness_teardown (h);\n\n</code></pre>\n<p>Another main feature of the <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#GstHarness\">GstHarness (not introspectable)</a> is its integration with the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstTestClock.html#GstTestClock-struct\">GstTestClock (not introspectable)</a>. Operating the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstTestClock.html#GstTestClock-struct\">GstTestClock (not introspectable)</a> can be very challenging, but\n<a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#GstHarness\">GstHarness (not introspectable)</a> simplifies some of the most desired actions a lot, like wanting\nto manually advance the clock while at the same time releasing a <a href=\"../../../gstreamer-core-doc-1.0/c/gstclock.html#GstClockID\">Gst.ClockID</a>\nthat is waiting, with functions like <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_crank_single_clock_wait\">gst_harness_crank_single_clock_wait (not introspectable)</a>.</p>\n<p><a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#GstHarness\">GstHarness (not introspectable)</a> also supports sub-harnesses, as a way of generating and\nvalidating data. A sub-harness is another <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#GstHarness\">GstHarness (not introspectable)</a> that is managed by\nthe \"parent\" harness, and can either be created by using the standard\ngst_harness_new type functions directly on the (GstHarness *)-&gt;src_harness,\nor using the much more convenient <a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_add_src\">gst_harness_add_src (not introspectable)</a> or\n<a href=\"../../../gstreamer-libs-doc-1.0/c/check/gstharness.html#gst_harness_add_sink_parse\">gst_harness_add_sink_parse (not introspectable)</a>. If you have a decoder-element you want to test,\n(like vp8dec) it can be very useful to add a src-harness with both a\nsrc-element (videotestsrc) and an encoder (vp8enc) to feed the decoder data\nwith different configurations, by simply doing:</p>\n<pre><code class=\"language-c\">  GstHarness * h = gst_harness_new (h, \"vp8dec\");\n  gst_harness_add_src_parse (h, \"videotestsrc is-live=1 ! vp8enc\", TRUE);\n</code></pre>\n<p>and then feeding it data with:</p>\n<pre><code class=\"language-c\">gst_harness_push_from_src (h);\n</code></pre>\n\n</div>\n\n\n"});