fragment_downloaded_cb({"url": "gst-plugins-base-app-1.0/python/gstappsrc.html#gstappsrc", "fragment": "GstAppSrc \nGstAppSrc \nThe appsrc element can be used by applications to insert data into a GStreamer pipeline. Unlike most GStreamer elements appsrc provides external API functions. \nappsrc can be used by linking with the libgstapp library to access the methods directly or by using the appsrc action signals. \nBefore operating appsrc the caps property must be set to fixed caps describing the format of the data that will be pushed with appsrc. An exception to this is when pushing buffers with unknown caps in which case no caps should be set. This is typically true of file like sources that push raw byte buffers. If you don t want to explicitly set the caps you can use gst_app_src_push_sample. This method gets the caps associated with the sample and sets them on the appsrc replacing any previously set caps if different from sample s caps \nThe main way of handing data to the appsrc element is by calling the GstApp.AppSrc.push_buffer method or by emitting the push buffer action signal. This will put the buffer onto a queue from which appsrc will read from in its streaming thread. It is important to note that data transport will not happen from the thread that performed the push buffer call. \nThe max bytes property controls how much data can be queued in appsrc before appsrc considers the queue full. A filled internal queue will always signal the enough data signal which signals the application that it should stop pushing data into appsrc. The block property will cause appsrc to block the push buffer method until free data becomes available again. \nWhen the internal queue is running out of data the need data signal is emitted which signals the application that it should start pushing more data into appsrc. \nIn addition to the need data and enough data signals appsrc can emit the seek data signal when the stream mode property is set to seekable or random access The signal argument will contain the new desired position in the stream expressed in the unit set with the format property. After receiving the seek data signal the application should push buffers from the new position. \nThese signals allow the application to operate the appsrc in two different ways \nThe push mode in which the application repeatedly calls the push buffer push sample method with a new buffer sample. Optionally the queue size in the appsrc can be controlled with the enough data and need data signals by respectively stopping starting the push buffer push sample calls. This is a typical mode of operation for the stream type stream and seekable Use this mode when implementing various network protocols or hardware devices. \nThe pull mode in which the need data signal triggers the next push buffer call. This mode is typically used in the random access stream type. Use this mode for file access or other randomly accessable sources. In this mode a buffer of exactly the amount of bytes given by the need data signal should be pushed into appsrc. \nIn all modes the size property on appsrc should contain the total stream size in bytes. Setting this property is mandatory in the random access mode. For the stream and seekable modes setting this property is optional but recommended. \nWhen the application has finished pushing data into appsrc it should call GstApp.AppSrc.end_of_stream or emit the end of stream action signal. After this call no more buffers can be pushed into appsrc until a flushing seek occurs or the state of the appsrc has gone through READY. \n"});