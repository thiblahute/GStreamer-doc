fragment_downloaded_cb({"url": "gst-plugins-ugly-doc-1.0/element-x264enc.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-x264enc\">\n<h1 id=\"x264enc1\">x264enc</h1><p>This element encodes raw video into H264 compressed data,\nalso otherwise known as MPEG-4 AVC (Advanced Video Codec).</p>\n<p>The <a href=\"element-x264enc.html#GstX264Enc:pass\">pass</a> property controls the type of encoding.  In case of Constant\nBitrate Encoding (actually ABR), the <a href=\"element-x264enc.html#GstX264Enc:bitrate\">bitrate</a> will determine the quality\nof the encoding.  This will similarly be the case if this target bitrate\nis to obtained in multiple (2 or 3) pass encoding.\nAlternatively, one may choose to perform Constant Quantizer or Quality encoding,\nin which case the <a href=\"element-x264enc.html#GstX264Enc:quantizer\">quantizer</a> property controls much of the outcome, in that case <a href=\"element-x264enc.html#GstX264Enc:bitrate\">bitrate</a> is the maximum bitrate.</p>\n<p>The H264 profile that is eventually used depends on a few settings.\nIf <a href=\"element-x264enc.html#GstX264Enc:dct8x8\">dct8x8</a> is enabled, then High profile is used.\nOtherwise, if <a href=\"element-x264enc.html#GstX264Enc:cabac\">cabac</a> entropy coding is enabled or <a href=\"element-x264enc.html#GstX264Enc:bframes\">bframes</a>\nare allowed, then Main Profile is in effect, and otherwise Baseline profile\napplies.  The high profile is imposed by default,\nwhich is fine for most software players and settings,\nbut in some cases (e.g. hardware platforms) a more restricted profile/level\nmay be necessary. The recommended way to set a profile is to set it in the\ndownstream caps.</p>\n<p>If a preset/tuning are specified then these will define the default values and\nthe property defaults will be ignored. After this the option-string property is\napplied, followed by the user-set properties, fast first pass restrictions and\nfinally the profile restrictions.</p>\n<blockquote>\n<p>Some settings, including the default settings, may lead to quite\nsome latency (i.e. frame buffering) in the encoder. This may cause problems\nwith pipeline stalling in non-trivial pipelines, because the encoder latency\nis often considerably higher than the default size of a simple queue\nelement. Such problems are caused by one of the queues in the other\nnon-x264enc streams/branches filling up and blocking upstream. They can\nbe fixed by relaxing the default time/size/buffer limits on the queue\nelements in the non-x264 branches, or using a (single) multiqueue element\nfor all branches. Also see the last example below. You can also work around\nthis problem by setting the tune=zerolatency property, but this will affect\noverall encoding quality so may not be appropriate for your use case.</p>\n</blockquote>\n<h2 id=\"example-pipeline\">Example pipeline</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -v videotestsrc num-buffers=1000 ! x264enc qp-min=18 ! \\\n   avimux ! filesink location=videotestsrc.avi\n ]| This example pipeline will encode a test video source to H264 muxed in an\n AVI container, while ensuring a sane minimum quantization factor to avoid\n some (excessive) waste. You should ideally never put H264 into an AVI\n container (or really anything else, for that matter) - use Matroska or\n MP4/QuickTime or MPEG-TS instead.\n |[\n gst-launch-1.0 -v videotestsrc num-buffers=1000 ! x264enc pass=quant ! \\\n   matroskamux ! filesink location=videotestsrc.mkv\n ]| This example pipeline will encode a test video source to H264 using fixed\n quantization, and muxes it in a Matroska container.\n |[\n gst-launch-1.0 -v videotestsrc num-buffers=1000 ! x264enc pass=5 quantizer=25 speed-preset=6 ! video/x-h264, profile=baseline ! \\\n   qtmux ! filesink location=videotestsrc.mov\n ]| This example pipeline will encode a test video source to H264 using\n constant quality at around Q25 using the 'medium' speed/quality preset and\n restricting the options used so that the output is H.264 Baseline Profile\n compliant and finally multiplexing the output in Quicktime mov format.\n |[\n gst-launch-1.0 -v videotestsrc num-buffers=1000 ! tee name=t ! queue ! videoconvert ! autovideosink \\\n   t. ! queue ! x264enc rc-lookahead=5 ! fakesink\n ]| This example pipeline will encode a test video source to H264 while\n displaying the input material at the same time.  As mentioned above,\n specific settings are needed in this case to avoid pipeline stalling.\n Depending on goals and context, other approaches are possible, e.g.\n tune=zerolatency might be configured, or queue sizes increased.\n</code></pre>\n\n</div>\n\n\n"});