fragment_downloaded_cb({"url": "gst-plugins-ugly-doc-1.0/cdiocddasrc.html#cdiocddasrc", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"cdiocddasrc\">\n\t\t<h3 id=\"cdiocddasrc2\">\n\tcdiocddasrc\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\n<a title=\"GObject\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GObject-struct\">GObject</a>\n    <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GInitiallyUnowned\" href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#GInitiallyUnowned\">GInitiallyUnowned</a>\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstBaseSrc\" href=\"../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a>\n                    <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstPushSrc\" href=\"../libgstbase-doc-1.0/c/gstpushsrc.html#GstPushSrc\">GstPushSrc</a>\n                        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstAudioCdSrc\" href=\"../gst-plugins-base-audio-doc-1.0/c/gstaudiocdsrc.html#GstAudioCdSrc\">GstAudioCdSrc</a>\n                            <span class=\"lineart\">\u2570\u2500\u2500</span>cdiocddasrc\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>cdiocddasrc reads and extracts raw audio from Audio CDs. It can operate\nin one of two modes:</p>\n<ul>\n<li>\n<p>treat each track as a separate stream, counting time from the start\nof the track to the end of the track and posting EOS at the end of\na track, or</p>\n</li>\n<li>\n<p>treat the entire disc as one stream, counting time from the start of\nthe first track to the end of the last track, posting EOS only at\nthe end of the last track.</p>\n</li>\n</ul>\n<p>With a recent-enough version of libcdio, the element will extract\nCD-TEXT if this is supported by the CD-drive and CD-TEXT information\nis available on the CD. The information will be posted on the bus in\nform of a tag message.</p>\n<p>When opened, the element will also calculate a CDDB disc ID and a\nMusicBrainz disc ID, which applications can use to query online\ndatabases for artist/title information. These disc IDs will also be\nposted on the bus as part of the tag messages.</p>\n<p>cdiocddasrc supports the GstUriHandler interface, so applications can use\nplaybin with cdda://<track-number> URIs for playback (they will have\nto connect to playbin's notify::source signal and set the device on the\ncd source in the notify callback if they want to set the device property).\nApplications should use seeks in \"track\" format to switch between different\ntracks of the same CD (passing a new cdda:// URI to playbin involves opening\nand closing the CD device, which is much slower).</track-number></p>\n<h2 id=\"example-launch-line1\">Example launch line</h2>\n<pre><code>gst-launch-1.0 cdiocddasrc track=5 device=/dev/cdrom ! audioconvert ! vorbisenc ! oggmux ! filesink location=track5.ogg\n</code></pre>\n<p>This pipeline extracts track 5 of the audio CD and encodes it into an\nOgg/Vorbis file.</p>\n\n</div>\n\n</div>\n\n\n"});