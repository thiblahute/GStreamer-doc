fragment_downloaded_cb({"url": "gst-plugins-base-video-1.0/javascript/video-frame.html#page-description", "fragment": "Copy the contents from src to dest. \nCopy the plane with index plane from src to dest. \nUse info and buffer to fill in the values of frame. frame is usually allocated on the stack and you will pass the address to the GstVideo.VideoFrame structure allocated on the stack GstVideo.VideoFrame.prototype.map will then fill in the structures with the various video specific information you need to access the pixels of the video buffer. You can then use accessor macros such as GST_VIDEO_FRAME_COMP_DATA not introspectable GST_VIDEO_FRAME_PLANE_DATA not introspectable GST_VIDEO_FRAME_COMP_STRIDE not introspectable GST_VIDEO_FRAME_PLANE_STRIDE not introspectable etc. to get to the pixels. \nAll video planes of buffer will be mapped and the pointers will be set in frame data. \nThe purpose of this function is to make it easy for you to get to the video pixels in a generic way without you having to worry too much about details such as whether the video data is allocated in one contiguous memory chunk or multiple memory chunks e.g. one for each plane or if custom strides and custom plane offsets are used or not as signalled by GstVideoMeta on each buffer This function will just fill the GstVideo.VideoFrame structure with the right values and if you use the accessor macros everything will just work and you can access the data easily. It also maps the underlying memory chunks for you. \nUse info and buffer to fill in the values of frame with the video frame information of frame id. \nWhen id is the default frame is mapped. When id this function will return false when there is no GstVideoMeta with that id. \nAll video planes of buffer will be mapped and the pointers will be set in frame data. \nUnmap the memory previously mapped with gst_video_frame_map. \nIf the Gst.Buffer is interlaced. In mixed interlace mode this flags specifies if the frame is interlaced or progressive. \nGstVideo.VideoBufferFlags.prototype.tff \nIf the Gst.Buffer is interlaced then only the first field as defined by the GST_VIDEO_BUFFER_TFF flag setting is to be displayed. \nGstVideo.VideoBufferFlags.prototype.multiple_view \nThe Gst.Buffer contains one or more specific views such as left or right eye view. This flags is set on any buffer that contains non mono content even for streams that contain only a single viewpoint. In mixed mono non mono streams the absense of the flag marks mono buffers. \nGstVideo.VideoBufferFlags.prototype.first_in_bundle \nWhen conveying stereo multiview content with frame by frame methods this flag marks the first buffer in a bundle of frames that belong together. \nGstVideo.VideoBufferFlags.prototype.last \nThe video frame is interlaced. In mixed interlace mode this flag specifies if the frame is interlaced or progressive. \nGstVideo.VideoFrameFlags.prototype.tff \nThe video contains one or more non mono views \nGstVideo.VideoFrameFlags.prototype.first_in_bundle \nThe video frame is the first in a set of corresponding views provided as sequential frames. \nAdditional mapping flags for GstVideo.VideoFrame.prototype.map. \nDon t take another reference of the buffer and store it in the GstVideoFrame. This makes sure that the buffer stays writable while the frame is mapped but requires that the buffer reference stays valid until the frame is unmapped again. \nGstVideo.VideoFrameMapFlags.prototype.last \n"});