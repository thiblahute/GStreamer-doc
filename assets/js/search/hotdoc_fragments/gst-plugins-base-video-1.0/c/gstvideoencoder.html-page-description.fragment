fragment_downloaded_cb({"url": "gst-plugins-base-video-1.0/c/gstvideoencoder.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstvideoencoder.h\">\n<h1 id=\"gstvideoencoder\">GstVideoEncoder</h1><p>This base class is for video encoders turning raw video into\nencoded video data.</p>\n<p>GstVideoEncoder and subclass should cooperate as follows.</p>\n<h2 id=\"configuration\">Configuration</h2>\n<ul>\n<li>Initially, GstVideoEncoder calls <em>start</em> when the encoder element\nis activated, which allows subclass to perform any global setup.</li>\n<li>GstVideoEncoder calls <em>set_format</em> to inform subclass of the format\nof input video data that it is about to receive.  Subclass should\nsetup for encoding and configure base class as appropriate\n(e.g. latency). While unlikely, it might be called more than once,\nif changing input parameters require reconfiguration.  Baseclass\nwill ensure that processing of current configuration is finished.</li>\n<li>GstVideoEncoder calls <em>stop</em> at end of all processing.</li>\n</ul>\n<h2 id=\"data-processing\">Data processing</h2>\n<pre><code> * Base class collects input data and metadata into a frame and hands\n   this to subclass' @handle_frame.\n\n * If codec processing results in encoded data, subclass should call\n   @gst_video_encoder_finish_frame to have encoded data pushed\n   downstream.\n\n * If implemented, baseclass calls subclass @pre_push just prior to\n   pushing to allow subclasses to modify some metadata on the buffer.\n   If it returns GST_FLOW_OK, the buffer is pushed downstream.\n\n * GstVideoEncoderClass will handle both srcpad and sinkpad events.\n   Sink events will be passed to subclass if @event callback has been\n   provided.\n</code></pre>\n<h2 id=\"shutdown-phase\">Shutdown phase</h2>\n<ul>\n<li>GstVideoEncoder class calls <em>stop</em> to inform the subclass that data\nparsing will be stopped.</li>\n</ul>\n<p>Subclass is responsible for providing pad template caps for\nsource and sink pads. The pads need to be named \"sink\" and \"src\". It should\nalso be able to provide fixed src pad caps in <em>getcaps</em> by the time it calls\n<em>gst_video_encoder_finish_frame</em>.</p>\n<p>Things that subclass need to take care of:</p>\n<ul>\n<li>Provide pad templates</li>\n<li>Provide source pad caps before pushing the first buffer</li>\n<li>Accept data in <em>handle_frame</em> and provide encoded results to\n<em>gst_video_encoder_finish_frame</em>.</li>\n</ul>\n\n</div>\n\n\n\n"});