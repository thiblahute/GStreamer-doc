fragment_downloaded_cb({"url": "gst-plugins-base-video-1.0/c/gstvideodecoder.html#page-description", "fragment": "Virtual Methods \nThe opaque GstVideoDecoder data structure. \nGstVideoDecoderPrivate priv \nRemoves next n_bytes of input data and adds it to currently parsed frame. \nHelper function that allocates a buffer to hold a video frame for decoder s current GstVideoCodecState. \nYou should use gst_video_decoder_allocate_output_frame instead of this function if possible at all. \nHelper function that allocates a buffer to hold a video frame for decoder s current GstVideoCodecState. Subclass should already have configured video state and set src pad caps. \nThe buffer allocated here is owned by the frame and you should only keep references to the frame not the buffer. \nSame as gst_video_decoder_allocate_output_frame except it allows passing GstBufferPoolAcquireParams to the sub call gst_buffer_pool_acquire_buffer. \nframe should have a valid decoded data buffer whose metadata fields are then appropriately set according to frame data and pushed downstream. If no output data is provided frame is considered skipped. In any case the frame is considered finished and released. \nAfter calling this function the output buffer of the frame is to be considered read only. This function will also change the metadata of the buffer. \nLets GstVideoDecoder sub classes to know the memory allocator used by the base class and its params. \nUnref the allocator after use it. \nQuery the configured decoder latency. Results will be returned via min_latency and max_latency. \nDetermines maximum possible decoding time for frame that will allow it to decode and arrive in time as determined by QoS events In particular a negative result means decoding in time is no longer possible and should therefore occur as soon skippy as possible. \nQueries decoder required format handling. \nGet the oldest pending unfinished GstVideoCodecFrame \nGet the GstVideoCodecState currently describing the output stream. \nQueries whether input data is considered packetized or not by the base class. \nReturns the number of bytes previously added to the current frame by calling gst_video_decoder_add_to_frame. \nReturns caps that express caps or sink template caps if caps NULL restricted to resolution format combinations supported by downstream elements. \nSimilar to gst_video_decoder_drop_frame but simply releases frame without any processing other than removing it from list of pending frames after which it is considered finished and released. \nAllows baseclass to perform byte to time estimated conversion. \nLets GstVideoDecoder sub classes tell the baseclass what the decoder latency is. Will also post a LATENCY message on the bus so the pipeline can reconfigure its global latency. \nSets numbers of tolerated decoder errors where a tolerated one is then only warned about but more than tolerated will lead to fatal error. You can set for never returning fatal errors. Default is set to GST_VIDEO_DECODER_MAX_ERRORS. \nThe option was added in \nConfigures decoder format needs. If enabled subclass needs to be negotiated with format caps before it can process any data. It will then never be handed any data before it has been configured. Otherwise it might be handed data without having been configured and is then expected being able to do so either by default or based on the input data. \nCreates a new GstVideoCodecState with the specified fmt width and height as the output state for the decoder. Any previously set output state on decoder will be replaced by the newly created one. \nIf the subclass wishes to copy over existing fields like pixel aspec ratio or framerate from an existing GstVideoCodecState it can be provided as a reference. \nIf the subclass wishes to override some fields from the output state like pixel aspect ratio or framerate it can do so on the returned GstVideoCodecState. \nThe new output state will only take effect set on pads and buffers starting from the next call to gst_video_decoder_finish_frame \nAllows baseclass to consider input data as packetized or not. If the input is packetized then the parse method will not be called. \nLets GstVideoDecoder sub classes decide if they want the sink pad to use the default pad query handler to reply to accept caps queries. \nBy setting this to true it is possible to further customize the default handler with GST_PAD_SET_ACCEPT_INTERSECT and GST_PAD_SET_ACCEPT_TEMPLATE \nvoid padding \nGives the segment of the element. \nGives the segment of the element. \nRelease the lock that protects the decoder function from concurrent access. \nReturned while parsing to indicate more data is needed. \n"});