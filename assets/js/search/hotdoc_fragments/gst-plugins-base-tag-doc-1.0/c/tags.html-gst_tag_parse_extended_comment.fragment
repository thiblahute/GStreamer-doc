fragment_downloaded_cb({"url": "gst-plugins-base-tag-doc-1.0/c/tags.html#gst_tag_parse_extended_comment", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"gst_tag_parse_extended_comment\">\n\t\t<h3 id=\"gst_tag_parse_extended_comment1\">\n\t<span><code>gst_tag_parse_extended_comment</code></span>\n</h3>\n\n\t\t\n\n<pre class=\"prototype\">\ngboolean\ngst_tag_parse_extended_comment (const gchar* ext_comment,\n                                gchar** key,\n                                gchar** lang,\n                                gchar** value,\n                                gboolean fail_if_no_key)</pre>\n\n<p>Convenience function to parse a GST_TAG_EXTENDED_COMMENT string and\nseparate it into its components.</p>\n<p>If successful, <em>key</em>, <em>lang</em> and/or <em>value</em> will be set to newly allocated\nstrings that you need to free with <a href=\"https://developer.gnome.org/glib/unstable/glib-Memory-Allocation.html#g-free\">g_free</a> when done. <em>key</em> and <em>lang</em>\nmay also be set to NULL by this function if there is no key or no language\ncode in the extended comment string.</p>\n\n\t<div class=\"parameter_container\">\n\t\t<h4 id=\"parameters2\">Parameters</h4>\n\t\t<table>\n\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>ext_comment:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>an extended comment string, see <a href=\"../../libgstreamer-doc-1.0/gsttaglist.html#GST_TAG_EXTENDED_COMMENT\">GST_TAG_EXTENDED_COMMENT</a></p>\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>key:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>return location for the comment description key, or NULL</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>lang:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>return location for the comment ISO-639 language code, or NULL</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>value:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>return location for the actual comment string, or NULL</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t<td>\n\t\t<p>\n\t\t<i><em><code>fail_if_no_key:</code></em></i>\n\t\t</p>\n\t</td>\n\t\t<td><p>whether to fail if strings are not in key=value form</p>\n</td>\n</tr>\n\n\t\t\t\t\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\n\t<div class=\"multi_return_value_container\">\n\t\t\t<h4 id=\"returns2\">Returns:</h4>\n\t\t<table>\n\t\t<colgroup>\n\t\t\t<col>\n\t\t\t<col>\n\t\t\t<col>\n\t\t</colgroup>\n\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t<td>\n\t\t<p>\n\t\t\t\t</p>\n\t</td>\n\t<td>\n\t\t<p>TRUE if the string could be parsed, otherwise FALSE</p>\n\n\t</td>\n\t<td>\n\t\tgboolean\n\t</td>\n\t</tr>\n\n\t\t\t\t\t</tbody>\n\t</table>\n</div>\n\n\n\n\n</div>\n\n\n\n"});