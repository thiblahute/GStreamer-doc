fragment_downloaded_cb({"url": "gst-plugins-bad-codecparsers-1.0/javascript/gsth264parser.html#gsth264parser", "fragment": "GstH264Parser \nIt offers bitstream parsing in both AVC length prefixed and Annex B x000001 start code prefix format. To identify a NAL unit in a bitstream and parse its headers first call \nGstCodecParsers.prototype.h264_parser_identify_nalu to identify a NAL unit in an Annex B type bitstream \nGstCodecParsers.prototype.h264_parser_identify_nalu_avc to identify a NAL unit in an AVC type bitstream \nThe following functions are then available for parsing the structure of the GstCodecParsers.H264NalUnit depending on the GstCodecParsers.H264NalUnitType \nFrom GstCodecParsers.H264NalUnitType to GstCodecParsers.H264NalUnitType GstCodecParsers.prototype.h264_parser_parse_slice_hdr \nGstCodecParsers.H264NalUnitType gst_h264_parser_parse_sei not introspectable \nGstCodecParsers.H264NalUnitType GstCodecParsers.prototype.h264_parser_parse_sps \nGstCodecParsers.H264NalUnitType GstCodecParsers.prototype.h264_parser_parse_pps \nAny other GstCodecParsers.prototype.h264_parser_parse_nal \nOne of these functions must be called on every NAL unit in the bitstream in order to keep the internal structures of the GstCodecParsers.H264NalParser up to date. It is legal to call GstCodecParsers.prototype.h264_parser_parse_nal on NAL units of any type if no special parsing of the current NAL unit is required by the application. \nFor more details about the structures look at the ITU T H.264 and ISO IEC MPEG Part specifications available at \nITU T H.264 http www.itu.int rec T REC H.264 \nISO IEC http www.iso.org iso iso_catalogue catalogue_tc catalogue_detail.htm csnumber \n"});