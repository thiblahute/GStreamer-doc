fragment_downloaded_cb({"url": "gstreamer-core-doc-1.0/python/gst.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gst.h\">\n<h1 id=\"gstreamer\">GStreamer</h1><p>GStreamer is a framework for constructing graphs of various filters\n(termed elements here) that will handle streaming media.  Any discrete\n(packetizable) media type is supported, with provisions for automatically\ndetermining source type.  Formatting/framing information is provided with\na powerful negotiation framework.  Plugins are heavily used to provide for\nall elements, allowing one to construct plugins outside of the GST\nlibrary, even released binary-only if license require (please don't).\nGStreamer covers a wide range of use cases including: playback, recording,\nediting, serving streams, voice over ip and video calls.</p>\n<p>The <application>GStreamer</application> library should be initialized with\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-Gst.html#gst-init\">Gst.init</a> before it can be used. You should pass pointers to the main argc\nand argv variables so that GStreamer can process its own command line\noptions, as shown in the following example.</p>\n<h2 id=\"initializing-the-gstreamer-library\">Initializing the gstreamer library</h2>\n<pre><code class=\"language-c\">int\nmain (int argc, char *argv[])\n{\n  // initialize the GStreamer library\n  gst_init (&amp;amp;argc, &amp;amp;argv);\n  ...\n}\n</code></pre>\n<p>It's allowed to pass two <a href=\"https://docs.python.org/2/library/constants.html#None\">None</a> pointers to <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-Gst.html#gst-init\">Gst.init</a> in case you don't want\nto pass the command line args to GStreamer.</p>\n<p>You can also use GOption to initialize your own parameters as shown in\nthe next code fragment:</p>\n<h2 id=\"initializing-own-parameters-when-initializing-gstreamer\">Initializing own parameters when initializing gstreamer</h2>\n<pre><code class=\"language-c\">static gboolean stats = FALSE;\n...\nint\nmain (int argc, char *argv[])\n{\n GOptionEntry options[] = {\n  {\"tags\", 't', 0, G_OPTION_ARG_NONE, &amp;amp;tags,\n      N_(\"Output tags (also known as metadata)\"), NULL},\n  {NULL}\n };\n ctx = g_option_context_new (\"[ADDITIONAL ARGUMENTS]\");\n g_option_context_add_main_entries (ctx, options, GETTEXT_PACKAGE);\n g_option_context_add_group (ctx, gst_init_get_option_group ());\n if (!g_option_context_parse (ctx, &amp;amp;argc, &amp;amp;argv, &amp;amp;err)) {\n   g_print (\"Error initializing: &amp;percnt;s\\n\", GST_STR_NULL (err-&gt;message));\n   exit (1);\n }\n g_option_context_free (ctx);\n...\n}\n</code></pre>\n<p>Use <a href=\"../../gstreamer-core-doc-1.0/python/gst.html#gst_version\">Gst.version</a> to query the library version at runtime or use the\nGST_VERSION_* macros to find the version at compile time. Optionally\n<a href=\"../../gstreamer-core-doc-1.0/python/gst.html#gst_version_string\">Gst.version_string</a> returns a printable string.</p>\n<p>The <a href=\"../../gstreamer-core-doc-1.0/python/gst.html#gst_deinit\">Gst.deinit</a> call is used to clean up all internal resources used\nby GStreamer. It is mostly used in unit tests to check for leaks.</p>\n\n</div>\n\n\n"});