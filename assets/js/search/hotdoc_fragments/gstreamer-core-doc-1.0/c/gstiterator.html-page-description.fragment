fragment_downloaded_cb({"url": "gstreamer-core-doc-1.0/c/gstiterator.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstiterator.h\">\n<h1 id=\"gstiterator\">GstIterator</h1><p>A GstIterator is used to retrieve multiple objects from another object in\na threadsafe way.</p>\n<p>Various GStreamer objects provide access to their internal structures using\nan iterator.</p>\n<p>Note that if calling a GstIterator function results in your code receiving\na refcounted object (with, say, <a href=\"https://developer.gnome.org/gobject/unstable/gobject-Standard-Parameter-and-Value-Types.html#g-value-get-object\">g_value_get_object</a>), the refcount for that\nobject will not be increased. Your code is responsible for taking a reference\nif it wants to continue using it later.</p>\n<p>The basic use pattern of an iterator is as follows:</p>\n<pre><code class=\"language-c\">  GstIterator *it = _get_iterator(object);\n  GValue item = G_VALUE_INIT;\n  done = FALSE;\n  while (!done) {\n    switch (gst_iterator_next (it, &amp;amp;item)) {\n      case GST_ITERATOR_OK:\n        ...get/use/change item here...\n        g_value_reset (&amp;amp;item);\n        break;\n      case GST_ITERATOR_RESYNC:\n        ...rollback changes to items...\n        gst_iterator_resync (it);\n        break;\n      case GST_ITERATOR_ERROR:\n        ...wrong parameters were given...\n        done = TRUE;\n        break;\n      case GST_ITERATOR_DONE:\n        done = TRUE;\n        break;\n    }\n  }\n  g_value_unset (&amp;amp;item);\n  gst_iterator_free (it);\n</code></pre>\n\n</div>\n\n\n"});