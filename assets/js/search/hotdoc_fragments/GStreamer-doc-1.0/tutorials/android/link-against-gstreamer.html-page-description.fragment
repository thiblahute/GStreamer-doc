fragment_downloaded_cb({"url": "GStreamer-doc-1.0/tutorials/android/link-against-gstreamer.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"link-against-gstreamer.md\">\n<h1 id=\"android-tutorial-1-link-against-gstreamer\">Android tutorial 1: Link against GStreamer</h1>\n<h2 id=\"goal\">Goal!</h2>\n<p><img src=\"images/tutorials/android-link-against-gstreamer-screenshot.png\" alt=\"screenshot\" id=\"screenshot\"></p>\n<p>This first Android tutorial is extremely simple: it just retrieves the\nGStreamer version and displays it on the screen. It exemplifies how to\naccess GStreamer C code from Java and verifies that there have been no\nlinkage problems.</p>\n<h2 id=\"hello-gstreamer-java-code\">Hello GStreamer [Java code]</h2>\n<p>The tutorial code is in the <a href=\"https://cgit.freedesktop.org/gstreamer/gst-docs/\">gst-docs</a> in the <code>tutorials/android-tutorial-1</code> subdirectory. This directories contains the usual Android NDK structure: a <code>src</code> folder for the Java code,\na <code>jni</code> folder for the C code and a <code>res</code> folder for UI resources.</p>\n<p>We recommend that you open this project in Eclipse (as explained\nin <a href=\"../../installing/for-android-development.html\">Installing for Android development</a>) so you can\neasily see how all the pieces fit together.</p>\n<p>Let\u2019s first introduce the Java code, then the C code and finally the\nmakefile that allows GStreamer integration.</p>\n<p><strong>src/org/freedesktop/gstreamer/tutorials/tutorial_1/Tutorial1.java</strong></p>\n<pre><code class=\"language-java\">package org.freedesktop.gstreamer.tutorials.tutorial_1;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.freedesktop.gstreamer.GStreamer;\n\npublic class Tutorial1 extends Activity {\n    private native String nativeGetGStreamerInfo();\n\n    // Called when the activity is first created.\n    @Override\n    public void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n\n        try {\n            GStreamer.init(this);\n        } catch (Exception e) {\n            Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();\n            finish();\n            return;\n        }\n\n        setContentView(R.layout.main);\n\n        TextView tv = (TextView)findViewById(R.id.textview_info);\n        tv.setText(\"Welcome to \" + nativeGetGStreamerInfo() + \" !\");\n    }\n\n    static {\n        System.loadLibrary(\"gstreamer_android\");\n        System.loadLibrary(\"tutorial-1\");\n    }\n\n}\n</code></pre>\n<p>Calls from Java to C happen through native methods, like the one\ndeclared here:</p>\n<pre><code class=\"language-java\">private native String nativeGetGStreamerInfo();\n</code></pre>\n<p>This tells Java that there exists a method with this signature somewhere\nso it compiles happily. It is your responsibility to ensure that, <strong>at\nruntime</strong>, this method is accessible. This is accomplished by the C code\nshown later.</p>\n<p>The first bit of code that gets actually executed is the static\ninitializer of the class:</p>\n<pre><code class=\"language-java\">static {\n    System.loadLibrary(\"gstreamer_android\");\n    System.loadLibrary(\"tutorial-1\");\n}\n</code></pre>\n<p>It loads <code>libgstreamer_android.so</code>, which contains all GStreamer\nmethods, and <code>libtutorial-1.so</code>, which contains the C part of this\ntutorial, explained below.</p>\n<p>Upon loading, each of these libraries\u2019 <code>JNI_OnLoad()</code> method is\nexecuted. It basically registers the native methods that these libraries\nexpose. The GStreamer library only exposes a <code>init()</code> method, which\ninitializes GStreamer and registers all plugins (The tutorial library is\nexplained later below).</p>\n<pre><code class=\"language-java\">try {\n    GStreamer.init(this);\n} catch (Exception e) {\n    Toast.makeText(this, e.getMessage(), Toast.LENGTH_LONG).show();\n    finish();\n    return;\n}\n</code></pre>\n<p>Next, in the <code>OnCreate()</code> method of the\n<a href=\"http://developer.android.com/reference/android/app/Activity.html\">Activity</a>\nwe actually initialize GStreamer by calling <code>GStreamer.init()</code>. This\nmethod requires a\n<a href=\"http://developer.android.com/reference/android/content/Context.html\">Context</a>\nso it cannot be called from the static initializer, but there is no\ndanger in calling it multiple times, as all but the first time the calls\nwill be ignored.</p>\n<p>Should initialization fail, the <code>init()</code> method would throw an\n<a href=\"http://developer.android.com/reference/java/lang/Exception.html\">Exception</a>\nwith the details provided by the GStreamer library.</p>\n<pre><code class=\"language-java\">TextView tv = (TextView)findViewById(R.id.textview_info);\ntv.setText(\"Welcome to \" + nativeGetGStreamerInfo() + \" !\");\n</code></pre>\n<p>Then, the native method <code>nativeGetGStreamerInfo()</code> is called and a\nstring is retrieved, which is used to format the content of the\n<a href=\"http://developer.android.com/reference/android/widget/TextView.html\">TextView</a>\nin the UI.</p>\n<p>This finishes the UI part of this tutorial. Let\u2019s take a look at the C\ncode:</p>\n<h2 id=\"hello-gstreamer-c-code\">Hello GStreamer [C code]</h2>\n<p><strong>jni/tutorial-1.c</strong></p>\n<pre><code class=\"language-c\">#include &lt;string.h&gt;\n#include &lt;jni.h&gt;\n#include &lt;android/log.h&gt;\n#include &lt;gst/gst.h&gt;\n\n/*\n * Java Bindings\n */\nstatic jstring gst_native_get_gstreamer_info (JNIEnv* env, jobject thiz) {\n  char *version_utf8 = gst_version_string();\n  jstring *version_jstring = (*env)-&gt;NewStringUTF(env, version_utf8);\n  g_free (version_utf8);\n  return version_jstring;\n}\n\nstatic JNINativeMethod native_methods[] = {\n  { \"nativeGetGStreamerInfo\", \"()Ljava/lang/String;\", (void *) gst_native_get_gstreamer_info}\n};\n\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n  JNIEnv *env = NULL;\n\n  if ((*vm)-&gt;GetEnv(vm, (void**) &amp;env, JNI_VERSION_1_4) != JNI_OK) {\n    __android_log_print (ANDROID_LOG_ERROR, \"tutorial-1\", \"Could not retrieve JNIEnv\");\n    return 0;\n  }\n  jclass klass = (*env)-&gt;FindClass (env, \"org/freedesktop/gstreamer/tutorials/tutorial_1/Tutorial1\");\n  (*env)-&gt;RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n\n  return JNI_VERSION_1_4;\n}\n</code></pre>\n<p>The <code>JNI_OnLoad()</code> method is executed every time the Java Virtual\nMachine (VM) loads a library.</p>\n<p>Here, we retrieve the JNI environment needed to make calls that interact\nwith Java:</p>\n<pre><code class=\"language-c\">JNIEnv *env = NULL;\n\nif ((*vm)-&gt;GetEnv(vm, (void**) &amp;env, JNI_VERSION_1_4) != JNI_OK) {\n  __android_log_print (ANDROID_LOG_ERROR, \"tutorial-1\", \"Could not retrieve JNIEnv\");\n  return 0;\n}\n</code></pre>\n<p>And then locate the class containing the UI part of this tutorial using\n<code>FindClass()</code>:</p>\n<pre><code class=\"language-c\">jclass klass = (*env)-&gt;FindClass (env, \"org/freedesktop/gstreamer/tutorials/tutorial_1/Tutorial1\");\n</code></pre>\n<p>Finally, we register our native methods with <code>RegisterNatives()</code>, this\nis, we provide the code for the methods we advertised in Java using the\n<strong><code>native</code></strong>\nkeyword:</p>\n<pre><code class=\"language-c\">(*env)-&gt;RegisterNatives (env, klass, native_methods, G_N_ELEMENTS(native_methods));\n</code></pre>\n<p>The <code>native_methods</code> array describes each one of the methods to register\n(only one in this tutorial).  For each method, it provides its Java\nname, its <a href=\"http://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/types.html#wp276\">type\nsignature</a>\nand a pointer to the C function implementing it:</p>\n<pre><code class=\"language-c\">static JNINativeMethod native_methods[] = {\n  { \"nativeGetGStreamerInfo\", \"()Ljava/lang/String;\", (void *) gst_native_get_gstreamer_info}\n};\n</code></pre>\n<p>The only native method used in this tutorial\nis <code>nativeGetGStreamerInfo()</code>:</p>\n<pre><code class=\"language-c\">jstring gst_native_get_gstreamer_info (JNIEnv* env, jobject thiz) {\n  char *version_utf8 = gst_version_string();\n  jstring *version_jstring = (*env)-&gt;NewStringUTF(env, version_utf8);\n  g_free (version_utf8);\n  return version_jstring;\n}\n</code></pre>\n<p>It simply calls <code>gst_version_string()</code> to obtain a string describing\nthis version of GStreamer. This <a href=\"http://en.wikipedia.org/wiki/UTF-8#Modified_UTF-8\">Modified\nUTF8</a> string is then\nconverted to <a href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF16</a> by <code>NewStringUTF()</code> as required by Java and returned. Java will be\nresponsible for freeing the memory used by the new UTF16 String, but we\nmust free the <code>char *</code> returned by <code>gst_version_string()</code>.</p>\n<h2 id=\"hello-gstreamer-androidmk\">Hello GStreamer [Android.mk]</h2>\n<p><strong>jni/Android.mk</strong></p>\n<pre><code class=\"language-ruby\">LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := tutorial-1\nLOCAL_SRC_FILES := tutorial-1.c\nLOCAL_SHARED_LIBRARIES := gstreamer_android\nLOCAL_LDLIBS := -llog\ninclude $(BUILD_SHARED_LIBRARY)\n\nifndef GSTREAMER_ROOT\nifndef GSTREAMER_ROOT_ANDROID\n$(error GSTREAMER_ROOT_ANDROID is not defined!)\nendif\nGSTREAMER_ROOT        := $(GSTREAMER_ROOT_ANDROID)\nendif\nGSTREAMER_NDK_BUILD_PATH  := $(GSTREAMER_ROOT)/share/gst-android/ndk-build/\nGSTREAMER_PLUGINS         := coreelements\ninclude $(GSTREAMER_NDK_BUILD_PATH)/gstreamer-1.0.mk\n</code></pre>\n<p>This is a barebones makefile for a project with GStreamer support. It\nsimply states that it depends on the <code>libgstreamer_android.so</code> library\n(line 7), and requires the <code>coreelements</code> plugin (line 18). More complex\napplications will probably add more libraries and plugins\nto <code>Android.mk</code></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This ends the first Android tutorial. It has shown that, besides the\ninterconnection between Java and C (which abides to the standard JNI\nprocedure), adding GStreamer support to an Android application is not\nany more complicated than adding it to a desktop application.</p>\n<p>The following tutorials detail the few places in which care has to be\ntaken when developing specifically for the Android platform.</p>\n<p>As usual, it has been a pleasure having you here, and see you soon!</p>\n\n</div>\n\n\n\t"});