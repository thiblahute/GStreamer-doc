fragment_downloaded_cb({"url": "GStreamer-doc-1.0/tutorials/basic/platform-specific-elements.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"platform-specific-elements.md\">\n<h1 id=\"basic-tutorial-16-platformspecific-elements\">Basic tutorial 16: Platform-specific elements</h1>\n<h2 id=\"goal\">Goal</h2>\n<p>Even though GStreamer is a multiplatform framework, not all the elements\nare available on all platforms. For example, the video sinks\ndepend heavily on the underlying windowing system, and a different one\nneeds to be selected depending on the platform. You normally do not need\nto worry about this when using elements like <code>playbin</code> or\n<code>autovideosink</code>, but, for those cases when you need to use one of the\nsinks that are only available on specific platforms, this tutorial hints\nyou some of their peculiarities.</p>\n<h2 id=\"cross-platform\">Cross Platform</h2>\n<h3 id=\"glimagesink\"><code>glimagesink</code></h3>\n<p>This video sink is based on\n<a href=\"http://en.wikipedia.org/wiki/OpenGL\">OpenGL</a> or <a href=\"https://en.wikipedia.org/wiki/OpenGL_ES\">OpenGL ES</a>. It supports rescaling\nand filtering of the scaled image to alleviate aliasing. It implements\nthe VideoOverlay interface, so the video window can be re-parented\n(embedded inside other windows). This is the video sink recommended on\nmost platforms. In particular, on Android and iOS, it is the only\navailable video sink. It can be decomposed into\n<code>glupload ! glcolorconvert ! glimagesinkelement</code> to insert further OpenGL\nhardware accelerated processing into the pipeline.</p>\n<h2 id=\"linux\">Linux</h2>\n<h3 id=\"ximagesink\"><code>ximagesink</code></h3>\n<p>A standard RGB only X-based video sink. It implements the VideoOverlay\ninterface, so the video window can be re-parented (embedded inside\nother windows). It does not support scaling or color formats other\nthan RGB; it has to be performed by different means (using the\n<code>videoscale</code> element, for example).</p>\n<h3 id=\"xvimagesink\"><code>xvimagesink</code></h3>\n<p>An X-based video sink, using the <a href=\"http://en.wikipedia.org/wiki/X_video_extension\">X Video\nExtension</a> (Xv). It\nimplements the VideoOverlay interface, so the video window can be\nre-parented (embedded inside other windows). It can perform scaling\nefficiently, on the GPU. It is only available if the hardware and\ncorresponding drivers support the Xv extension.</p>\n<h3 id=\"alsasink\"><code>alsasink</code></h3>\n<p>This audio sink outputs to the sound card via\n<a href=\"http://www.alsa-project.org/\">ALSA</a> (Advanced Linux Sound\nArchitecture). This sink is available on almost every Linux platform. It\nis often seen as a \u201clow level\u201d interface to the sound card, and can be\ncomplicated to configure (See the comment on\n<a href=\"../playback/digital-audio-pass-through.html\">Playback tutorial 9: Digital audio pass-through</a>).</p>\n<h3 id=\"pulsesink\"><code>pulsesink</code></h3>\n<p>This sink plays audio to a <a href=\"http://www.pulseaudio.org/\">PulseAudio</a>\nserver. It is a higher level abstraction of the sound card than ALSA,\nand is therefore easier to use and offers more advanced features. It has\nbeen known to be unstable on some older Linux distributions, though.</p>\n<h2 id=\"mac-os-x\">Mac OS X</h2>\n<h3 id=\"osxvideosink\"><code>osxvideosink</code></h3>\n<p>This is the  video sink available to GStreamer on Mac OS X. It is also\npossible to draw using <code>glimagesink</code> using OpenGL.</p>\n<h3 id=\"osxaudiosink\"><code>osxaudiosink</code></h3>\n<p>This is the only audio sink available to GStreamer on Mac OS X.</p>\n<h2 id=\"windows\">Windows</h2>\n<h3 id=\"directdrawsink\"><code>directdrawsink</code></h3>\n<p>This is the oldest of the Windows video sinks, based on <a href=\"http://en.wikipedia.org/wiki/DirectDraw\">Direct\nDraw</a>. It requires DirectX 7,\nso it is available on almost every current Windows platform. It supports\nrescaling and filtering of the scaled image to alleviate aliasing.</p>\n<h3 id=\"dshowvideosink\"><code>dshowvideosink</code></h3>\n<p>This video sink is based on <a href=\"http://en.wikipedia.org/wiki/Direct_Show\">Direct\nShow</a>.  It can use different\nrendering back-ends, like\n<a href=\"http://en.wikipedia.org/wiki/Enhanced_Video_Renderer\">EVR</a>,\n<a href=\"http://en.wikipedia.org/wiki/Direct_Show#Video_rendering_filters\">VMR9</a>\nor\n<a href=\"http://en.wikipedia.org/wiki/Direct_Show#Video_rendering_filters\">VMR7</a>,\nEVR only being available on Windows Vista or more recent. It supports\nrescaling and filtering of the scaled image to alleviate aliasing. It\nimplements the VideoOverlay interface, so the video window can be\nre-parented (embedded inside other windows).</p>\n<h3 id=\"d3dvideosink\"><code>d3dvideosink</code></h3>\n<p>This video sink is based on\n<a href=\"http://en.wikipedia.org/wiki/Direct3D\">Direct3D</a> and it\u2019s the most\nrecent Windows video sink. It supports rescaling and filtering of the\nscaled image to alleviate aliasing. It implements the VideoOverlay\ninterface, so the video window can be re-parented (embedded inside other\nwindows).</p>\n<h3 id=\"directsoundsink\"><code>directsoundsink</code></h3>\n<p>This is the default audio sink for Windows, based on <a href=\"http://en.wikipedia.org/wiki/DirectSound\">Direct\nSound</a>, which is available in\nall Windows versions.</p>\n<h3 id=\"dshowdecwrapper\"><code>dshowdecwrapper</code></h3>\n<p><a href=\"http://en.wikipedia.org/wiki/Direct_Show\">Direct Show</a> is a multimedia\nframework similar to GStreamer. They are different enough, though, so\nthat their pipelines cannot be interconnected. However, through this\nelement, GStreamer can benefit from the decoding elements present in\nDirect Show. <code>dshowdecwrapper</code> wraps multiple Direct Show decoders so\nthey can be embedded in a GStreamer pipeline. Use the <code>gst-inspect-1.0</code> tool\n(see <a href=\"gstreamer-tools.html\">Basic tutorial 10: GStreamer tools</a>) to see the\navailable decoders.</p>\n<h2 id=\"android\">Android</h2>\n<h3 id=\"openslessink\"><code>openslessink</code></h3>\n<p>This is the only audio sink available to GStreamer on Android. It is\nbased on <a href=\"http://en.wikipedia.org/wiki/OpenSL_ES\">OpenSL ES</a>.</p>\n<h3 id=\"openslessrc\"><code>openslessrc</code></h3>\n<p>This is the only audio source available to GStreamer on Android. It is\nbased on <a href=\"http://en.wikipedia.org/wiki/OpenSL_ES\">OpenSL ES</a>.</p>\n<h3 id=\"androidmedia\"><code>androidmedia</code></h3>\n<p><a href=\"http://developer.android.com/reference/android/media/MediaCodec.html\">android.media.MediaCodec</a>\nis an Android specific API to access the codecs that are available on\nthe device, including hardware codecs. It is available since API level\n16 (JellyBean) and GStreamer can use it via the androidmedia plugin\nfor audio and video decoding. On Android, attaching the hardware\ndecoder to the <code>glimagesink</code> element can produce a high performance\nzero-copy decodebin pipeline.</p>\n<h3 id=\"ahcsrc\"><code>ahcsrc</code></h3>\n<p>This video source can capture from the cameras on Android devices, it is part\nof the androidmedia plugin and uses the <a href=\"https://developer.android.com/reference/android/hardware/Camera.html\">android.hardware.Camera API</a>.</p>\n<h2 id=\"ios\">iOS</h2>\n<h3 id=\"osxaudiosink1\"><code>osxaudiosink</code></h3>\n<p>This is the only audio sink available to GStreamer on iOS.</p>\n<h3 id=\"iosassetsrc\"><code>iosassetsrc</code></h3>\n<p>Source element to read iOS assets, this is, documents stored in the\nLibrary (like photos, music and videos). It can be instantiated\nautomatically by <code>playbin</code> when URIs use the\n<code>assets-library://</code> scheme.</p>\n<h3 id=\"iosavassetsrc\"><code>iosavassetsrc</code></h3>\n<p>Source element to read and decode iOS audiovisual assets, this is,\ndocuments stored in the Library (like photos, music and videos). It can\nbe instantiated automatically by <code>playbin</code> when URIs use the\n<code>ipod-library://</code> scheme. Decoding is performed by the system, so\ndedicated hardware will be used if available.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This tutorial has shown a few specific details about some GStreamer\nelements which are not available on all platforms. You do not have to\nworry about them when using multiplatform elements like <code>playbin</code> or\n<code>autovideosink</code>, but it is good to know their personal quirks if\ninstancing them manually.</p>\n<p>It has been a pleasure having you here, and see you soon!</p>\n\n</div>\n\n\n\t"});