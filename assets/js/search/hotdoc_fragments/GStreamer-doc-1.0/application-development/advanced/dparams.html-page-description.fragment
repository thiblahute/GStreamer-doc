fragment_downloaded_cb({"url": "GStreamer-doc-1.0/application-development/advanced/dparams.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"dparams.md\">\n<h1 id=\"dynamic-controllable-parameters\">Dynamic Controllable Parameters</h1>\n<h2 id=\"getting-started\">Getting Started</h2>\n<p>The controller subsystem offers a lightweight way to adjust gobject\nproperties over stream-time. Normally these properties are changed using\n<code>g_object_set()</code>. Timing those calls reliably so that the changes affect\ncertain stream times is close to impossible. The controller takes time\ninto account. It works by attaching control-sources to properties using\ncontrol-bindings. Control-sources provide values for a given time-stamp\nthat are usually in the range of 0.0 to 1.0. Control-bindings map the\ncontrol-value to a gobject property they are bound to - converting the\ntype and scaling to the target property value range. At run-time the\nelements continuously pull values changes for the current stream-time to\nupdate the gobject properties. GStreamer includes a few different\ncontrol-sources and control-bindings already, but applications can\ndefine their own by sub-classing from the respective base classes.</p>\n<p>Most parts of the controller mechanism is implemented in GstObject. Also\nthe base classes for control-sources and control-bindings are included\nin the core library. The existing implementations are contained within\nthe <code>gstcontroller</code> library. You need to include the header in your\napplication's source file:</p>\n<pre><code class=\"language-c\">...\n#include &lt;gst/gst.h&gt;\n#include &lt;gst/controller/gstinterpolationcontrolsource.h&gt;\n#include &lt;gst/controller/gstdirectcontrolbinding.h&gt;\n...\n\n</code></pre>\n<p>Your application should link to the shared library\n<code>gstreamer-controller</code>. One can get the required flag for compiler and\nlinker by using pkg-config for gstreamer-controller-1.0.</p>\n<h2 id=\"setting-up-parameter-control\">Setting up parameter control</h2>\n<p>If we have our pipeline set up and want to control some parameters, we\nfirst need to create a control-source. Lets use an interpolation\ncontrol-source:</p>\n<pre><code class=\"language-c\">  csource = gst_interpolation_control_source_new ();\n  g_object_set (csource, \"mode\", GST_INTERPOLATION_MODE_LINEAR, NULL);\n\n</code></pre>\n<p>Now we need to attach the control-source to the gobject property. This\nis done with a control-binding. One control source can be attached to\nseveral object properties (even in different objects) using separate\ncontrol-bindings.</p>\n<pre><code class=\"language-c\">      gst_object_add_control_binding (object, gst_direct_control_binding_new (object, \"prop1\", csource));\n\n</code></pre>\n<p>This type control-source takes new property values from a list of\ntime-stamped parameter changes. The source can e.g. fill gaps by\nsmoothing parameter changes This behavior can be configured by setting\nthe mode property of the control-source. Other control sources e.g.\nproduce a stream of values by calling <code>sin()</code> function. They have\nparameters to control e.g. the frequency. As control-sources are\nGstObjects too, one can attach control-sources to these properties too.</p>\n<p>Now we can set some control points. These are time-stamped gdouble\nvalues and are usually in the range of 0.0 to 1.0. A value of 1.0 is\nlater mapped to the maximum value in the target properties value range.\nThe values become active when the timestamp is reached. They still stay\nin the list. If e.g. the pipeline runs a loop (using a segmented seek),\nthe control-curve gets repeated as\nwell.</p>\n<pre><code class=\"language-c\">  GstTimedValueControlSource *tv_csource = (GstTimedValueControlSource *)csource;\n  gst_timed_value_control_source_set (tv_csource, 0 * GST_SECOND, 0.0);\n  gst_timed_value_control_source_set (tv_csource, 1 * GST_SECOND, 1.0);\n\n</code></pre>\n<p>Now everything is ready to play. If the control-source is e.g. bound to\na volume property, we will head a fade-in over 1 second. One word of\ncaution, the volume element that comes with gstreamer has a value range\nof 0.0 to 4.0 on its volume property. If the above control-source is\nattached to the property the volume will ramp up to 400%!</p>\n<p>One final note - the controller subsystem has a built-in live-mode. Even\nthough a property has a control-source assigned one can change the\nGObject property through the <code>g_object_set()</code>. This is highly useful\nwhen binding the GObject properties to GUI widgets. When the user\nadjusts the value with the widget, one can set the GObject property and\nthis remains active until the next programmed control-source value\noverrides it. This also works with smoothed parameters. It does not work\nfor control-sources that constantly update the property (e.g. the\nlfo_control_source).</p>\n\n</div>\n\n\n\t"});