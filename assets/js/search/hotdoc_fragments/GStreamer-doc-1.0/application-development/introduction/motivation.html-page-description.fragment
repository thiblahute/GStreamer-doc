fragment_downloaded_cb({"url": "GStreamer-doc-1.0/application-development/introduction/motivation.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"motivation.md\">\n<h1 id=\"design-principles\">Design principles</h1>\n<h2 id=\"clean-and-powerful\">Clean and powerful</h2>\n<p>GStreamer provides a clean interface to:</p>\n<ul>\n<li>\n<p>The application programmer who wants to build a media pipeline. The\nprogrammer can use an extensive set of powerful tools to create\nmedia pipelines without writing a single line of code. Performing\ncomplex media manipulations becomes very easy.</p>\n</li>\n<li>\n<p>The plugin programmer. Plugin programmers are provided a clean and\nsimple API to create self-contained plugins. An extensive debugging\nand tracing mechanism has been integrated. GStreamer also comes with\nan extensive set of real-life plugins that serve as examples too.</p>\n</li>\n</ul>\n<h2 id=\"object-oriented\">Object oriented</h2>\n<p>GStreamer adheres to GObject, the GLib 2.0 object model. A programmer\nfamiliar with GLib 2.0 or GTK+ will be comfortable with GStreamer.</p>\n<p>GStreamer uses the mechanism of signals and object properties.</p>\n<p>All objects can be queried at runtime for their various properties and\ncapabilities.</p>\n<p>GStreamer intends to be similar in programming methodology to GTK+. This\napplies to the object model, ownership of objects, reference counting,\netc.</p>\n<h2 id=\"extensible\">Extensible</h2>\n<p>All GStreamer Objects can be extended using the GObject inheritance\nmethods.</p>\n<p>All plugins are loaded dynamically and can be extended and upgraded\nindependently.</p>\n<h2 id=\"allow-binaryonly-plugins\">Allow binary-only plugins</h2>\n<p>Plugins are shared libraries that are loaded at runtime. Since all the\nproperties of the plugin can be set using the GObject properties, there\nis no need (and in fact no way) to have any header files installed for\nthe plugins.</p>\n<p>Special care has been taken to make plugins completely self-contained.\nAll relevant aspects of plugins can be queried at run-time.</p>\n<h2 id=\"high-performance\">High performance</h2>\n<p>High performance is obtained by:</p>\n<ul>\n<li>\n<p>using GLib's <code>GSlice</code> allocator</p>\n</li>\n<li>\n<p>extremely light-weight links between plugins. Data can travel the\npipeline with minimal overhead. Data passing between plugins only\ninvolves a pointer dereference in a typical pipeline.</p>\n</li>\n<li>\n<p>providing a mechanism to directly work on the target memory. A\nplugin can for example directly write to the X server's shared\nmemory space. Buffers can also point to arbitrary memory, such as a\nsound card's internal hardware buffer.</p>\n</li>\n<li>\n<p>refcounting and copy on write minimize usage of memcpy. Sub-buffers\nefficiently split buffers into manageable pieces.</p>\n</li>\n<li>\n<p>dedicated streaming threads, with scheduling handled by the kernel.</p>\n</li>\n<li>\n<p>allowing hardware acceleration by using specialized plugins.</p>\n</li>\n<li>\n<p>using a plugin registry with the specifications of the plugins so\nthat the plugin loading can be delayed until the plugin is actually\nused.</p>\n</li>\n</ul>\n<h2 id=\"clean-coreplugins-separation\">Clean core/plugins separation</h2>\n<p>The core of GStreamer is essentially media-agnostic. It only knows about\nbytes and blocks, and only contains basic elements. The core of\nGStreamer is functional enough to even implement low-level system tools,\nlike cp.</p>\n<p>All of the media handling functionality is provided by plugins external\nto the core. These tell the core how to handle specific types of media.</p>\n<h2 id=\"provide-a-framework-for-codec-experimentation\">Provide a framework for codec experimentation</h2>\n<p>GStreamer also wants to be an easy framework where codec developers can\nexperiment with different algorithms, speeding up the development of\nopen and free multimedia codecs like those developed by the <a href=\"http://www.xiph.org\">Xiph.Org\nFoundation</a> (such as Theora and Vorbis).</p>\n\n</div>\n\n\n\t"});