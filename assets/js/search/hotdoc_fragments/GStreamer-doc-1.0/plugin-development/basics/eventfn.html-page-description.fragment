fragment_downloaded_cb({"url": "GStreamer-doc-1.0/plugin-development/basics/eventfn.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"eventfn.md\">\n<h1 id=\"the-event-function\">The event function</h1>\n<p>The event function notifies you of special events that happen in the\ndatastream (such as caps, end-of-stream, newsegment, tags, etc.). Events\ncan travel both upstream and downstream, so you can receive them on sink\npads as well as source pads.</p>\n<p>Below follows a very simple event function that we install on the sink\npad of our element.</p>\n<pre><code class=\"language-c\">\nstatic gboolean gst_my_filter_sink_event (GstPad    *pad,\n                                          GstObject *parent,\n                                          GstEvent  *event);\n\n[..]\n\nstatic void\ngst_my_filter_init (GstMyFilter * filter)\n{\n[..]\n  /* configure event function on the pad before adding\n   * the pad to the element */\n  gst_pad_set_event_function (filter-&gt;sinkpad,\n      gst_my_filter_sink_event);\n[..]\n}\n\nstatic gboolean\ngst_my_filter_sink_event (GstPad    *pad,\n                  GstObject *parent,\n                  GstEvent  *event)\n{\n  gboolean ret;\n  GstMyFilter *filter = GST_MY_FILTER (parent);\n\n  switch (GST_EVENT_TYPE (event)) {\n    case GST_EVENT_CAPS:\n      /* we should handle the format here */\n\n      /* push the event downstream */\n      ret = gst_pad_push_event (filter-&gt;srcpad, event);\n      break;\n    case GST_EVENT_EOS:\n      /* end-of-stream, we should close down all stream leftovers here */\n      gst_my_filter_stop_processing (filter);\n\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n    default:\n      /* just call the default handler */\n      ret = gst_pad_event_default (pad, parent, event);\n      break;\n  }\n  return ret;\n}\n\n\n</code></pre>\n<p>It is a good idea to call the default event handler\n<code>gst_pad_event_default ()</code> for unknown events. Depending on the event\ntype, the default handler will forward the event or simply unref it. The\nCAPS event is by default not forwarded so we need to do this in the\nevent handler ourselves.</p>\n\n</div>\n\n\n\t"});