fragment_downloaded_cb({"url": "GStreamer-doc-1.0/installing/for-android-development.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"for-android-development.md\">\n<h1 id=\"installing-for-android-development\">Installing for Android development</h1>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"information\" id=\"information\"> All versions starting from 2.3.1 Gingerbread are supported</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>The development machine is where you will develop your Android\napplication, which then you will deploy on the target machine, which\nshould obviously be an Android device.</p>\n<p>The development machine can either be a Linux, Mac OS X or Windows, and\nneeds to have installed:</p>\n<ul>\n<li>The latest version of the <a href=\"http://developer.android.com/sdk/index.html\">Android SDK</a></li>\n<li>The latest version of the <a href=\"http://developer.android.com/tools/sdk/ndk/index.html\">Android NDK</a></li>\n<li>GStreamer for Android is targeted at API version 9 (Android\n2.3.1, Gingerbread) or higher. Use the SDK Manager tool to make sure\nyou have at least one Android SDK platform installed with API\nversion 9 or higher.</li>\n</ul>\n<!-- Optionally, you can use the [Android Studio](https://developer.android.com/studio/index.html). As stated in\nthe Android documentation,\u00a0*developing in Android Studio is highly\nrecommended and is the fastest way to get started*. -->\n<p>Before continuing, make sure you can compile and run the samples\nincluded in the Android NDK, and that you understand how the integration\nof C and Java works via the <a href=\"http://en.wikipedia.org/wiki/Java_Native_Interface\">Java Native Interface</a> (JNI). Besides the\n<a href=\"http://developer.android.com/tools/sdk/ndk/index.html\">Android NDK</a> documentation, you can find some useful <a href=\"http://developer.android.com/guide/practices/jni.html\">Android JNI tips\nhere</a>.</p>\n<h2 id=\"download-and-install-gstreamer-binaries\">Download and install GStreamer binaries</h2>\n<p>The GStreamer project provides <a href=\"https://gstreamer.freedesktop.org/data/pkg/android/\">prebuilt binaries</a> you should download\nthe latest version and unzip it into any folder of your choice.</p>\n<p>In the process of building GStreamer-enabled Android applications,\nsome tools will need to know where you installed the GStreamer\nbinaries. You must define an environment variable called\n<code>GSTREAMER_ROOT_ANDROID</code> and point it to the folder where you\nextracted the GStreamer binaries. This environment variable must be available at\nbuild time, so maybe you want to make it available system-wide by\nadding it to your <code>~/.profile</code>\u00a0file (on Linux and Mac) or to the\nEnvironment Variables in the System Properties dialog (on Windows).</p>\n<p>Point <code>GSTREAMER_ROOT_ANDROID</code> to the folder where you unzipped the binaries.</p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"information\" id=\"information1\"> If you plan to use Android Studio and do not want to define this\nenvironment variable globally, you can set it inside the build.gradle.</p>\n</blockquote>\n<blockquote>\n<p><img src=\"images/icons/emoticons/information.png\" alt=\"information\" id=\"information2\"> If you plan to use Eclipse, and do not want to define this\nenvironment variable globally, you can set it inside Eclipse. Go to\nWindow \u2192\u00a0Preferences \u2192\u00a0C/C++ \u2192\u00a0Build \u2192\u00a0Build Variables and define\n<code>GSTREAMER_ROOT_ANDROID</code> there.</p>\n</blockquote>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"warning\" id=\"warning\"> The NDK support in the Gradle build system used by\nAndroid Studio is still in beta, so the recommended way to build\nusing the GStreamer SDK is still to use \"ndk-build\".</p>\n</blockquote>\n<h2 id=\"configure-your-development-environment\">Configure your development environment</h2>\n<p>There are two routes to use GStreamer in an Android application: Either\nwriting your GStreamer code in Java or in C.</p>\n<p>Android applications are mainly written in Java, so adding GStreamer\ncode to them in the same language is a huge advantage. However, this\nrequires using <a href=\"http://en.wikipedia.org/wiki/Language_binding\">language bindings</a> for the GStreamer API which are not\ncomplete yet. In the meantime, this documentation will use Java for the\nUser Interface (UI) part and C for the GStreamer code. Both parts\ninteract through <a href=\"http://en.wikipedia.org/wiki/Java_Native_Interface\">JNI</a>.</p>\n<h3 id=\"building-the-tutorials\">Building the tutorials</h3>\n<p>The tutorials code are in the\n<a href=\"https://cgit.freedesktop.org/gstreamer/gst-docs/\">gst-docs</a> in the\n<code>examples/tutorials/</code> folder.</p>\n<p>There are a few Android-specific tutorials in the <code>tutorials/</code>\nfolder. Each tutorial is a folder containing source code (in Java and\nC) and the resource files required to build a complete Android\napplication.</p>\n<p>The rest of the GStreamer tutorials (basic and playback tutorials)\ncannot be run on Android without modification.</p>\n<p>Android projects with GStreamer support are built like conventional\nAndroid NDK projects, so the instructions at the <a href=\"http://developer.android.com/tools/sdk/ndk/index.html\">Android NDK</a> home can\nbe followed:</p>\n<!--\n#### Using Android Studio\n\n> ![warning] To be completed!!\n-->\n<h4 id=\"using-eclipse\">Using Eclipse</h4>\n<p>Make sure you have installed the ADT and NDK plugins listed in the\nprerequisites section, and that they are both aware of the location of\nthe Android SDK and NDK respectively.</p>\n<p>Import a tutorial into the Eclipse workspace:\nFile\u00a0\u2192\u00a0New\u00a0\u2192\u00a0Project\u2026\u00a0\u2192\u00a0Android Project from Existing Code, and select\nthe folder called\u00a0<code>android-tutorial-1</code>.</p>\n<p>After reading in the project and generating some extra files and\nfolders, Eclipse might complain about missing files. <strong>This is normal</strong>,\nwe are not finished yet.</p>\n<p>Provide native development support by activating the NDK plugin:\nRight-click on the project in the Project Explorer (this should be the\ntop-most folder,\ncalled\u00a0<code>com.gst_sdk_tutorials.tutorial_1.Tutorial1</code>)\u00a0\u2192\u00a0Android\ntools\u00a0\u2192\u00a0Add Native Support\u2026 Here the NDK plugin asks for a library name.\nThis is irrelevant and any valid file name will do. Accept.</p>\n<p>Eclipse will still complain about errors in the code.\u00a0<strong>This is\nnormal</strong>. Some files are missing because they are generated during the\nfirst build run.</p>\n<p>Build the project: Project\u00a0\u2192\u00a0Build Project. If you bring up the Eclipse\nConsole, you should see some progress messages. Once finished, the\nmissing files will appear and all error messages should be gone. The\nproject is now ready to run. Hit Run\u00a0\u2192\u00a0Run.</p>\n<p>A new application called \u201cAndroid tutorial 1\u201d should now be available on\nyour device, with the GStreamer logo. If you want to run the\ntutorial in an Android Virtual Device (AVD), make sure to create the\ndevice with support for audio playback and GPU Emulation (to enable\nOpenGL ES).</p>\n<h4 id=\"using-the-command-line\">Using the command line</h4>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"warning\" id=\"warning1\"> Note that, on Windows, this procedure requires a working Cygwin\nshell, as explained in the <a href=\"http://developer.android.com/tools/sdk/ndk/index.html#Reqs\">Android NDK System Requirements</a></p>\n</blockquote>\n<p>For each tutorial, move to its folder and run:</p>\n<pre><code>android update project -p . -s --target X\n</code></pre>\n<p>Where\u00a0<code>X</code>\u00a0is one of the targets available in your system (the ones you\ninstalled with the SDK manager). Make sure to use a target with at least\nAPI level 9.</p>\n<p>To get a list of all available targets in your system issue this\ncommand:</p>\n<pre><code>android list\n</code></pre>\n<p>The \u201cupdate project\u201d command generates the\u00a0<code>build.xml</code>\u00a0file needed by\nthe build system. You only need to perform this action once per project.</p>\n<p>To build the C part, just call:</p>\n<pre><code>ndk-build\n</code></pre>\n<p>A few lines in the\u00a0<code>Android.mk</code>\u00a0file (reviewed later) pull up the\nnecessary machinery to compile the GStreamer bits and generate the\nShared Object libraries (.so) that the Java code can use as native\nmethods.</p>\n<p>Finally, compile the Java code with:</p>\n<pre><code>ant debug\n</code></pre>\n<p>And install on the device with:</p>\n<pre><code>adb install -r bin/Tutorial1-debug.apk\n</code></pre>\n<p>The <code>-r</code> switch allows the installer to overwrite previous versions.\nOtherwise, you need to manually uninstall previous versions of your\napplication.</p>\n<p>A new application called \u201cAndroid tutorial 1\u201d should now be available on\nyour device, with the GStreamer logo. If you want to run the\ntutorial in an Android Virtual Device (AVD), make sure to create the\ndevice with support for audio playback and GPU Emulation (to enable\nOpenGL ES).</p>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"warning\" id=\"warning2\"> Windows linkage problems</p>\n<p>Due to problems related to the standard linker, Google\u2019s\n<a href=\"http://en.wikipedia.org/wiki/Gold_(linker)\" class=\"external-link\">Gold\nLinker</a> is used to build GStreamer applications.\u00a0 Unfortunately,\nthe Android NDK toolchain for Windows does not include the gold linker\nand the standard one has to be used.</p>\n<p>If you observe linkage problems, you can replace the linker in your\nAndroid NDK with the gold one from <a href=\"http://code.google.com/p/mingw-and-ndk/downloads/detail?name=android-ndk-r8b-ma-windows.7z&amp;can=2&amp;q=\">this project</a>. Download the\n<code>android-ndk-r8b-ma-windows.7z</code> file, extract\n<code>\\android-ndk-r8b\\toolchains\\arm-linux-androideabi-4.6\\prebuilt\\windows\\arm-linux-androideabi\\bin\\ld.exe</code>\n(only this file is needed) and overwrite the one in the same folder in\nyour Android NDK installation. You might need the free <a href=\"http://www.7-zip.org/\">7-Zip\narchiving utility</a></p>\n</blockquote>\n<h3 id=\"creating-new-projects\">Creating new projects</h3>\n<p>Create a normal NDK project, either from the command line as described\nin the <a href=\"http://developer.android.com/tools/sdk/ndk/index.html#GetStarted\">Android NDK</a> home, or use Eclipse: File \u2192\u00a0New \u2192\u00a0Project\u2026\n\u2192\u00a0Android Application Project, and, once the wizard is complete, right\nclick on the project \u2192\u00a0Android Tools \u2192\u00a0Add Native Support \u2026</p>\n<p>To add GStreamer support you only need to modify the\n<code>jni/Android.mk</code>\u00a0file. This file describes the native files in your\nproject, and its barebones structure (as auto-generated by Eclipse) is:</p>\n<p><strong>Android.mk</strong></p>\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := NativeApplication\nLOCAL_SRC_FILES := NativeApplication.c\n\ninclude $(BUILD_SHARED_LIBRARY)\n</code></pre>\n<p>Where line 5 specifies the name of the <code>.so</code>\u00a0file that will contain your\nnative code and line 6 states all source files that compose your native\ncode, separated by spaces.</p>\n<p>Adding GStreamer support only requires adding these lines:</p>\n<p><strong>Android.mk with GStreamer support</strong></p>\n<pre><code>LOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := NativeApplication\nLOCAL_SRC_FILES := NativeApplication.c\nLOCAL_SHARED_LIBRARIES := gstreamer_android\nLOCAL_LDLIBS := -landroid\n\ninclude $(BUILD_SHARED_LIBRARY)\n\nifndef GSTREAMER_ROOT\nifndef GSTREAMER_ROOT_ANDROID\n$(error GSTREAMER_ROOT_ANDROID is not defined!)\nendif\nGSTREAMER_ROOT            := $(GSTREAMER_ROOT_ANDROID)\nendif\n\nGSTREAMER_NDK_BUILD_PATH  := $(GSTREAMER_ROOT)/share/gst-android/ndk-build/\nGSTREAMER_PLUGINS         := coreelements ogg theora vorbis videoconvert audioconvert audioresample playback glimagesink soup opensles\nG_IO_MODULES              := gnutls\nGSTREAMER_EXTRA_DEPS      := gstreamer-video-1.0\n\ninclude $(GSTREAMER_NDK_BUILD_PATH)/gstreamer.mk\n</code></pre>\n<p>Where line 7 specifies an extra library to be included in the project:\n<code>libgstreamer_android.so</code>. This library contains all GStreamer code,\ntailored for your application\u2019s needs, as shown below.</p>\n<p>Line 8 specifies additional system libraries, in this case, in order to\naccess android-specific functionality.</p>\n<p>Lines 12 and 13 simply define some convenient macros.</p>\n<p>Line 20 lists the plugins you want statically linked into\n<code>libgstreamer_android.so</code>. Listing only the ones you need makes your\napplication smaller.</p>\n<p>Line 21 is required to have HTTPS/TLS support from GStreamer, through the\n<code>souphttpsrc</code> element.</p>\n<p>Line 22 defines which GStreamer libraries your application requires.</p>\n<p>Finally, line 24 includes the make files which perform the rest of the\nmagic.</p>\n<p>Listing all desired plugins can be cumbersome, so they have been grouped\ninto categories, which can be used by including the <code>plugins.mk</code>\u00a0file,\nand used as follows:</p>\n<pre><code>include $(GSTREAMER_NDK_BUILD_PATH)/plugins.mk\nGSTREAMER_PLUGINS  := $(GSTREAMER_PLUGINS_CORE) $(GSTREAMER_PLUGINS_CODECS) playbin souphttpsrc\n</code></pre>\n<h4 id=\"list-of-categories-and-included-plugins\">List of categories and included plugins</h4>\n<table>\n<thead>\n<tr>\n<th> Category</th>\n<th> Included plugins</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_CORE</code></td>\n<td> coreelements adder app audioconvert audiorate audioresample audiotestsrc gio pango typefindfunctions videoconvert videorate videoscale videotestsrc volume autodetect videofilter</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_PLAYBACK</code></td>\n<td> playback</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_VIS</code></td>\n<td> libvisual goom goom2k1 audiovisualizers</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_EFFECTS</code></td>\n<td> alpha alphacolor audiofx cairo cutter debug deinterlace dtmf effectv equalizer gdkpixbuf imagefreeze interleave level multifile replaygain shapewipe smpte spectrum videobox videocrop videomixer accurip aiff audiofxbad autoconvert bayer coloreffects debugutilsbad fieldanalysis freeverb frei0r gaudieffects geometrictransform inter interlace ivtc rawparse removesilence segmentclip smooth speed soundtouch videofiltersbad audiomixer compositor webrtcdsp</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_NET</code></td>\n<td> tcp rtsp rtp rtpmanager soup udp dataurisrc sdp srtp rtspclientsink</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_NET_RESTRICTED</code></td>\n<td> mms rtmp</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_CODECS</code></td>\n<td> subparse ogg theora vorbis opus ivorbisdec alaw apetag audioparsers auparse avi dv flac flv flxdec icydemux id3demux isomp4 jpeg matroska mulaw multipart png speex taglib vpx wavenc wavpack wavparse y4menc adpcmdec adpcmenc dashdemux dvbsuboverlay dvdspu hls id3tag kate midi mxf openh264 opusparse pcapparse pnm rfbsrc schro gstsiren smoothstreaming subenc videoparsersbad y4mdec jpegformat gdp rsvg openjpeg spandsp sbc androidmedia</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_CODECS_GPL</code></td>\n<td> assrender</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_CODECS_RESTRICTED</code></td>\n<td> asfmux dtsdec faad mpegpsdemux mpegpsmux mpegtsdemux mpegtsmux voaacenc a52dec amrnb amrwbdec asf dvdsub dvdlpcmdec mad mpeg2dec xingmux realmedia x264 lame mpg123 libav</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_SYS</code></td>\n<td> opensles opengl</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_CAPTURE</code></td>\n<td> camerabin</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_ENCODING</code></td>\n<td> encodebin</td>\n</tr>\n<tr>\n<td> <code>GSTREAMER_PLUGINS_GES</code></td>\n<td> nle</td>\n</tr></tbody></table>\n<p>Build and run your application as explained in the <a href=\"../../#building-the-tutorials\">Building the tutorials</a> section.</p>\n\n</div>\n\n\n\t"});