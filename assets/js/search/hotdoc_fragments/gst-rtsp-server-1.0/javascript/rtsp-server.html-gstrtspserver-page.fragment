fragment_downloaded_cb({"url": "gst-rtsp-server-1.0/javascript/rtsp-server.html#gstrtspserver-page", "fragment": "GstRTSPServer \nThe server object is the object listening for connections on a port and creating GstRtspServer.RTSPClient objects to handle those connections. \nThe server will listen on the address set with GstRtspServer.RTSPServer.prototype.set_address and the port or service configured with GstRtspServer.RTSPServer.prototype.set_service. Use GstRtspServer.RTSPServer.prototype.set_backlog to configure the amount of pending requests that the server will keep. By default the server listens on the current network and port \nThe server will require an SSL connection when a TLS certificate has been set in the auth object with GstRtspServer.RTSPAuth.prototype.set_tls_certificate. \nTo start the server use GstRtspServer.RTSPServer.prototype.attach to attach it to a GLib.MainContext. For more control GstRtspServer.RTSPServer.prototype.create_source and GstRtspServer.RTSPServer.prototype.create_socket can be used to get a GLib.Source and Gio.Socket respectively. \nGstRtspServer.RTSPServer.prototype.transfer_connection can be used to transfer an existing socket to the RTSP server for example from an HTTP server. \nOnce the server socket is attached to a mainloop it will start accepting connections. When a new connection is received a new GstRtspServer.RTSPClient object is created to handle the connection. The new client will be configured with the server GstRtspServer.RTSPAuth GstRtspServer.RTSPMountPoints GstRtspServer.RTSPSessionPool and GstRtspServer.RTSPThreadPool. \nThe server uses the configured GstRtspServer.RTSPThreadPool object to handle the remainder of the communication with this client. \nLast reviewed on \n"});