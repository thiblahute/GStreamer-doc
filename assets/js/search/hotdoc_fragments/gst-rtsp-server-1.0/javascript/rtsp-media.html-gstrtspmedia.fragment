fragment_downloaded_cb({"url": "gst-rtsp-server-1.0/javascript/rtsp-media.html#gstrtspmedia", "fragment": "GstRTSPMedia \na GstRtspServer.RTSPMedia contains the complete GStreamer pipeline to manage the streaming to the clients. The actual data transfer is done by the GstRtspServer.RTSPStream objects that are created and exposed by the GstRtspServer.RTSPMedia. \nThe GstRtspServer.RTSPMedia is usually created from a GstRtspServer.RTSPMediaFactory when the client does a DESCRIBE or SETUP of a resource. \nA media is created with GstRtspServer.RTSPMedia.prototype.new that takes the element that will provide the streaming elements. For each of the streams a new GstRtspServer.RTSPStream object needs to be made with the GstRtspServer.RTSPMedia.prototype.create_stream which takes the payloader element and the source pad that produces the RTP stream. \nThe pipeline of the media is set to PAUSED with GstRtspServer.RTSPMedia.prototype.prepare. The prepare method will add rtpbin and sinks and sources to send and receive RTP and RTCP packets from the clients. Each stream srcpad is connected to an input into the internal rtpbin. \nIt is also possible to dynamically create GstRtspServer.RTSPStream objects during the prepare phase. With GstRtspServer.RTSPMedia.prototype.get_status you can check the status of the prepare phase. \nAfter the media is prepared it is ready for streaming. It will usually be managed in a session with GstRtspServer.RTSPSession.prototype.manage_media. See GstRtspServer.RTSPSession and GstRtspServer.RTSPSessionMedia. \nThe state of the media can be controlled with gst_rtsp_media_set_state Seeking can be done with GstRtspServer.RTSPMedia.prototype.seek. \nWith GstRtspServer.RTSPMedia.prototype.unprepare the pipeline is stopped and shut down. When GstRtspServer.RTSPMedia.prototype.set_eos_shutdown an EOS will be sent to the pipeline to cleanly shut down. \nWith GstRtspServer.RTSPMedia.prototype.set_shared the media can be shared between multiple clients. With GstRtspServer.RTSPMedia.prototype.set_reusable you can control if the pipeline can be prepared again after an unprepare. \nLast reviewed on \n"});