fragment_downloaded_cb({"url": "contribute/index.html#patch-format", "fragment": "Patch Format \nPlease submit patches in git format patch format as attachment to a bug in bugzilla. \nThe easiest way to create such patches is to create one or more local commits for your changes in a local git repository. This can be a git clone checkout of the module in question or you could create a git repository in any directory that has the source code e.g. the directory created when unpacking the source tarball using git init then git add and git commit m import tarball as initial revision \nOnce you have a git repository with the original code in in it you can make your modifications and create a local commit with e.g. \nThis will pop up an editor where you can create your commit message. It should look something like \nThen exit the editor and you should have a commit. \nIt s best to run git add or git commit on specific directories or files instead of using git commit a as it s too easy to accidentally contaminate a patch with changes that belong into it with git commit a in particular changes to the common submodule. \nYou can check your commit s with git show or git log p or using a GUI such as gitg or gitk. \nMake sure the author is correctly set to your full name and e mail address. \nIf you haven t used git before it would be a good idea to tell it who you are \nYou can make changes to the last commit using \ngit commit amend to fix up the commit message \ngit commit amend author John You john you.com to fix up the author \ngit add path to file1. ch git commit amend to incorporate fixes made to the files since the last commit i.e. what shows up in git diff If you just want to add some of the changes but not all of them you can use git add p file.c then it will ask you for each individual change whether you want to add it or leave it. \nOnce everything looks fine create the patch file for the last commit with \nIf you have multiple commits pass etc. \nThis should create one or more patch files named \nin the current directory. Attach these files to a bug report in bugzilla. \nPlease make sure your patches are as terse and precise as possible. Do not include clean ups or non functional changes since they distract from the real changes and make things harder to review and also lower the chances that the patch will still apply cleanly to the lastest version in git. If you feel there are things to clean up please submit the clean ups as a separate patch that does not contain any functional changes. \nTry to stick to the GStreamer indentation and coding style. There is a script called gst indent which you can run over your c or cpp files if you want your code auto indented before making the patch. The script requires GNU indent to be installed already. Please do not run gst indent on header files our header file indentation is free form. If you build GStreamer from git a local commit hook will be installed that checks if your commit conforms to the required style also using GNU indent \n"});