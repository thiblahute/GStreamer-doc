fragment_downloaded_cb({"url": "contribute/index.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"index.md\">\n        <h1 id=\"how-to-contribute-to-gstreamer\">How to Contribute to GStreamer</h1>\n<h2 id=\"how-to-file-bug-reports-and-request-for-enhancements\">How to File Bug Reports and Request for Enhancements</h2>\n<h3 id=\"where-to-file-bug-reports-and-feature-requests\">Where to File Bug Reports and Feature Requests</h3>\n<p>Please file bug reports and feature requests for GStreamer in\n<a href=\"https://bugzilla.gnome.org\">GNOME bugzilla</a>:</p>\n<ul>\n<li>\n<p>You will need to create a GNOME bugzilla account if you don't have one yet\n(yep, that's just how it is, sorry for the inconvenience)</p>\n</li>\n<li>\n<p>Create a new bug if there is no bug report for this issue yet. Bugzilla will\nshow you a list of existing bugs that look similar when you file your bug, so\nplease have a look at the list to see if anything looks like it matches.\nThe GStreamer <a href=\"https://gstreamer.freedesktop.org/bugs/\">bugs page</a> also has shortcuts for the major components\nand simple search functionality if you'd like to browse or search for\nexisting bugs.</p>\n</li>\n<li>\n<p>If you are filing a feature request (i.e. anything that is not supposed to\nwork already, that is anything not a bug), please set your bug's severity\nto <em>enhancement</em>. This won't affect the way we prioritise the issue, but\nit does make triaging easier for us.</p>\n</li>\n<li>\n<p>If your bug is about a specific plugin or element or utility library,\nplease prefix the bug summary with <code>element-name:</code>, <code>plugin-name:</code> or <code>lib:</code>\nand keep the rest of the description as short and precise as possible.</p>\n<p>Examples:</p>\n<ul>\n<li><code>id3demux: fails to extract composer tags</code></li>\n<li><code>tsdemux: does not detect audio stream</code></li>\n<li><code>Internal flow error when playing matroska file</code></li>\n</ul>\n<p>This makes sure developers looking through the list of open bugs or bug\nnotification mails can quickly identify what your bug is about. If your text\nis too long and only contains fill words at the beginning, the important\ninformation will be cut off and not show up in the list view or mail client.</p>\n</li>\n<li>\n<p>If you don't know in which component the problem is, just select \"don't know\"\nand we'll move it to the right component once we have a better idea what the\nproblem is.</p>\n</li>\n<li>\n<p>Please mention:</p>\n<ul>\n<li>what version of GStreamer you are using</li>\n<li>what operating system you are using (Windows, macOS, Linux)</li>\n<li>if you're on Linux, please mention your distro and distro version</li>\n<li>if this is on an embedded device please provide details</li>\n</ul>\n</li>\n<li>\n<p>Try to describe how the bug can be reproduced. If it is triggered by any\nspecific file, try to make the file available somewhere for download and\nput the link into the bug report. The easier it is for us to reproduce\nthe issue, the easier it is to fix it.</p>\n</li>\n<li>\n<p>If you experience a crash (that is: the application shuts down unexpectedly,\nusually with a segfault or bus error or memory access violation or such),\nplease try to <a href=\"https://wiki.gnome.org/Community/GettingInTouch/Bugzilla/GettingTraces/Details\">obtain a stack trace</a>. If there are criticals\nor warnings printed right before the crash, run with the environment variable\n<code>G_DEBUG=fatal_warnings</code> set, then it will abort on the first warning, which\nshould hopefully give an indication to where the problem is. You can then\nobtain a stack trace from where it aborts.</p>\n</li>\n<li>\n<p>If the application errors out, please provide a gst debug log. You can get\none by setting the <code>GST_DEBUG=*:6</code> environment variable, combined with\n<code>GST_DEBUG_FILE=/tmp/dbg.log</code>. This is going to be very large, so it's\nadvisable to compress it with <code>xz -9 /tmp/dbg.log</code> before sharing it. You\nmay be asked to provide one for specific debug categories rather than\neverything (<code>*:6</code>).</p>\n</li>\n</ul>\n<h2 id=\"how-to-submit-patches\">How to Submit Patches</h2>\n<h3 id=\"where-to-submit-patches\">Where to Submit Patches</h3>\n<p>Please submit patches for GStreamer through <a href=\"https://bugzilla.gnome.org\">GNOME bugzilla</a>:</p>\n<ul>\n<li>\n<p>You will need to create a GNOME bugzilla account if you don't have one yet\n(yep, that's just how it is, sorry for the inconvenience)</p>\n</li>\n<li>\n<p>Create a new bug if there is no bug report for this issue yet. Bugzilla will\nshow you a list of existing bugs that look similar when you file your bug, so\nplease have a look at the list to see if anything looks like it matches.\nThe GStreamer <a href=\"https://gstreamer.freedesktop.org/bugs/\">bugs page</a> also has shortcuts for the major components\nand simple search functionality if you'd like to browse or search for\nexisting bugs.</p>\n</li>\n<li>\n<p>Once you have created a bug you can attach your patch(es) to the bug report,\nsee below for more details. You can add one attachment when you file the bug,\nbut if you have multiple things to attach you will have to do that after the\nbug has been submitted.</p>\n</li>\n<li>\n<p>If your patch is for an enhancement (anything that is not supposed to work\nalready, i.e. anything not a bug) or adds new API, please set your bug's\nseverity to <em>enhancement</em>. This won't affect the way we prioritise your bug,\nbut it does make triaging easier for us.</p>\n</li>\n<li>\n<p>If your patch is against a specific plugin or element or utility library,\nplease prefix the bug summary with <code>element-name:</code>, <code>plugin-name:</code> or <code>lib:</code>\nand keep the rest of the description as short and precise as possible.</p>\n<p>Examples:</p>\n<ul>\n<li><code>id3demux: add support for WCOP frame</code></li>\n<li><code>riff: add RGB16 support</code></li>\n<li><code>playbin: detect if video-sink supports deinterlacing</code></li>\n<li><code>tests: rtprtx unit test is racy</code></li>\n</ul>\n<p>This makes sure developers looking through the list of open bugs or bug\nnotification mails can quickly identify what your bug is about. If your text\nis too long and only contains fill words at the beginning, the important\ninformation will be cut off and not show up in the list view or mail client.</p>\n</li>\n<li>\n<p>Please create separate bugs for separate issues. There is no golden rule when\nsomething counts as a separate issue, please just use your best judgment. For\nexample, if you have a change that needs to be done in each module, one bug\nfor all the patches for the various modules is fine. If there is an issue\nthat requires related fixes in multiple elements or libraries, please also\nfeel free to put everything into one bug report. If you just happen to have\nmultiple patches for us but they are not really related, please put them in\nseparate bugs. The main question is if it makes sense to discuss and review\nthese patches together or if they could just as well be handled completely\nseparately.</p>\n</li>\n<li>\n<p>Please do not send patches to the gstreamer-devel mailing list. Patches\nsubmitted on the mailing list are most likely going to be ignored, overlooked,\nor you will get a brief reply asking you to put them into bugzilla. We do\nnot use the mailing list for bug review.</p>\n</li>\n<li>\n<p>Please do not send pull requests to our github mirror. They will be closed\nautomatically.</p>\n</li>\n<li>\n<p>Please also do not attach patches to already-existing bugs unless they\nreally are directly relevant to the issue, i.e. do not attach patches to\nalready-existing bugs that are only vaguely related to your issue.</p>\n</li>\n</ul>\n<h3 id=\"how-to-prepare-a-patch-for-submission\">How to Prepare a Patch for Submission</h3>\n<p>If possible at all, you should prepare patches against a current git checkout,\nideally against the tip of the master branch, but in many cases patches against\na stable release will be acceptable as well if the plugin or code hasn't\nchanged much since then. If a patch was prepared against an old branch and\ndoes not apply any longer to master you may be asked to provide an updated\npatch.</p>\n<p>If you have created a new plugin, please submit a patch that adds it to the\ngst-plugins-bad module, including <code>configure.ac</code> and the various <code>Makefile.am</code>\nmodifications and all new files.</p>\n<h4 id=\"patch-format\">Patch Format</h4>\n<p>Please submit patches in <code>git format-patch</code> format, as attachment to a bug\nin bugzilla.</p>\n<p>The easiest way to create such patches is to create one or more local commits\nfor your changes in a local git repository. This can be a git clone checkout\nof the module in question, or you could create a git repository in any\ndirectory that has the source code, e.g. the directory created when unpacking\nthe source tarball (using <code>git init</code>, then <code>git add .</code> and\n<code>git commit -m 'import tarball as initial revision'</code>).</p>\n<p>Once you have a git repository with the original code in in it, you can make\nyour modifications and create a local commit with e.g.</p>\n<pre><code>git commit path/to/file1.[ch]\n</code></pre>\n<p>This will pop up an editor where you can create your commit message. It should\nlook something like:</p>\n<pre><code>exampledemux: fix seeking without index in push mode\n\nWithout an index we would refuse to seek in push mode. Make\nseeking without an index work by estimating the position\nto seek to. It might not be 100% accurate, but better than\nnothing.\n\nhttps://bugzilla.gnome.org/show_bug.cgi?id=987654\n</code></pre>\n<p>Then exit the editor, and you should have a commit.</p>\n<p>It's best to run <code>git add</code> or <code>git commit</code> on specific directories or files\ninstead of using <code>git commit -a</code>, as it's too easy to accidentally contaminate\na patch with changes that belong into it with <code>git commit -a</code>, in particular\nchanges to the <code>common</code> submodule.</p>\n<p>You can check your commit(s) with <code>git show</code> or <code>git log -p</code> or using a GUI\nsuch as <code>gitg</code> or <code>gitk</code>.</p>\n<p>Make sure the author is correctly set to your full name and e-mail address.</p>\n<p>If you haven't used git before, it would be a good idea to tell it who you are:</p>\n<pre><code>$ git config --global user.name \"George S. Treamer\"\n$ git config --global user.email \"george.s.treamer@example.com\"\n</code></pre>\n<p>You can make changes to the last commit using:</p>\n<ul>\n<li>\n<p><code>git commit --amend</code> to fix up the commit message</p>\n</li>\n<li>\n<p><code>git commit --amend --author='John You &lt;john@you.com&gt;'</code> to fix up the author</p>\n</li>\n<li>\n<p><code>git add path/to/file1.[ch]; git commit --amend</code> to incorporate fixes\nmade to the files since the last commit (i.e. what shows up in <code>git diff</code>).\nIf you just want to add some of the changes, but not all of them you can\nuse <code>git add -p file.c</code>, then it will ask you for each individual change\nwhether you want to add it or leave it.</p>\n</li>\n</ul>\n<p>Once everything looks fine, create the patch file for the last commit with:</p>\n<pre><code>git format-patch -1\n</code></pre>\n<p>If you have multiple commits, pass -2, -3, etc.</p>\n<p>This should create one or more patch files named</p>\n<pre><code>0001-exampledemux-do-this.patch\n0002-exampledemux-also-do-that.patch\n</code></pre>\n<p>in the current directory. Attach these files to a bug report in bugzilla.</p>\n<p>Please make sure your patches are as terse and precise as possible. Do not\ninclude 'clean-ups' or non-functional changes, since they distract from the\nreal changes and make things harder to review, and also lower the chances that\nthe patch will still apply cleanly to the lastest version in git. If you feel\nthere are things to clean up, please submit the clean-ups as a separate patch\nthat does not contain any functional changes.</p>\n<p>Try to stick to the GStreamer indentation and coding style. There is a script\ncalled <a href=\"http://cgit.freedesktop.org/gstreamer/gstreamer/tree/tools/gst-indent\"><code>gst-indent</code></a> which you can run over your <code>.c</code> or <code>.cpp</code>\nfiles if you want your code auto-indented before making the patch. The script\nrequires GNU indent to be installed already. Please do <em>not</em> run gst-indent on\nheader files, our header file indentation is free-form. If you build GStreamer\nfrom git, a local commit hook will be installed that checks if your commit\nconforms to the required style (also using GNU indent).</p>\n<h3 id=\"writing-good-commit-messages\">Writing Good Commit Messages</h3>\n<p>Please take the time to write good and concise commit messages.</p>\n<p>The first line of each commit message should be a short and concise summary\nof the commit. If the commit applies to a specific subsystem, library, plugin\nor element, prefix the message with the name of the component, for example:</p>\n<pre><code>oggdemux: fix granulepos query for the old theora bitstream\n</code></pre>\n<p>or</p>\n<pre><code>docs: add new stream API\n</code></pre>\n<p>or</p>\n<pre><code>tests: video: add unit test for converting RGB to XYZ colorspace\n</code></pre>\n<p>This should be a <em>summary</em> of the change and <em>not a description</em> of the change.\nMeaning: don't say <em>how</em> you did something but <em>what</em> you fixed, improved or\nchanged, what the most important practical <em>effect</em> of the change is. Example:</p>\n<pre><code>qtdemux: fix crash when doing reverse playback in push mode (good)\n</code></pre>\n<p>instead of</p>\n<pre><code>qtdemux: use signed integer to avoid counter underrun (bad)\n</code></pre>\n<p>The second line of the commit message should be empty.</p>\n<p>The third and following lines should contain an extensive <em>description</em> and\n<em>rationale</em> of the change made: what was changed, what was broken, how did it\nget fixed, what bugs or issues does this fix? And most importantly: <em>why</em> was\nsomething changed.</p>\n<p>Trivial commits do not require a description, e.g. if you fix a memory leak\nit's usually enough to just say that you fixed a leak. Maybe mention what was\nleaked and perhaps also if it was an important leak or only happens in some\ncorner case error code path, but in any case there's no need to write a long\nexplanation why leaks are bad or why this needed fixing.</p>\n<p>The important part is really what the reasoning behind the change is, since\nthat's what people want to know if they try to figure out twelve months later\nwhy a line of code does what it does.</p>\n<p>If the commit is related to any particular bugs in bugzilla, please add the\nfull bug URL at the end of the commit message.</p>\n<p>We do not use <code>Signed-off by:</code> lines in GStreamer, please create patches\nwithout those.</p>\n<h3 id=\"after-submitting-your-patch\">After Submitting your Patch</h3>\n<p>Whenever you submit a new bug report, add a comment to an existing bug or add\nan attachment to a bug, Bugzilla will send a notification e-mail to GStreamer\ndevelopers. This means that there is usually no need to advertise the fact that\nyou have done so in other forums such as on IRC or on the mailing list, unless\nyou have been asked to file a bug there, in which case it's nice to follow up\nwith the link to the bug.</p>\n<p>Most of all, please be patient.</p>\n<p>We try to review patches as quickly as possible, but there is such a high\nturnaround of bugs, patches and feature requests that it is not always\npossible to tend to them all as quickly as we'd like. This is especially\ntrue for completely new plugins or new features.</p>\n<p>If you haven't received any response at all for a while (say two weeks or so),\ndo feel free to ping developers by posting a quick follow-up comment on the\nbug.</p>\n<p>If you do not get a response, this is usually not a sign of people <em>ignoring</em>\nthe issue, but usually just means that it's fallen through the cracks or\npeople have been busy with other things.</p>\n<h3 id=\"tools\">Tools</h3>\n<h4 id=\"gitbz\">git-bz</h4>\n<p>FIXME: add link to docs / repo plus some examples</p>\n\n        \n\n    </div>\n\n\n        "});