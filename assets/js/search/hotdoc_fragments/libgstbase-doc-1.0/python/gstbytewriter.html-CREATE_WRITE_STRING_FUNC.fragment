fragment_downloaded_cb({"url": "libgstbase-doc-1.0/python/gstbytewriter.html#CREATE_WRITE_STRING_FUNC", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"CREATE_WRITE_STRING_FUNC\">\n\t\t<h3 id=\"create_write_string_func-not-introspectable\">\n\t<span><code>CREATE_WRITE_STRING_FUNC (not introspectable)</code></span>\n</h3>\n\n\t\t<pre class=\"raw_code\">\n#define CREATE_WRITE_STRING_FUNC(bits,type) \\\ngboolean \\\ngst_byte_writer_put_string_utf##bits (GstByteWriter *writer, const type * data) \\\n{ \\\n  guint size = 0; \\\n  \\\n  g_return_val_if_fail (writer != NULL, FALSE); \\\n  \\\n  /* endianness does not matter if we are looking for a NUL terminator */ \\\n  while (data[size] != 0) { \\\n    /* have prevent overflow */ \\\n    if (G_UNLIKELY (size == G_MAXUINT)) \\\n      return FALSE; \\\n    ++size; \\\n  } \\\n  ++size; \\\n  \\\n  if (G_UNLIKELY (!_gst_byte_writer_ensure_free_space_inline(writer, size * (bits / 8)))) \\\n    return FALSE; \\\n  \\\n  _gst_byte_writer_put_data_inline (writer, (const guint8 *) data, size * (bits / 8)); \\\n  \\\n  return TRUE; \\\n}\n</pre>\n\n\n\n\n\n\n</div>\n\n\n"});