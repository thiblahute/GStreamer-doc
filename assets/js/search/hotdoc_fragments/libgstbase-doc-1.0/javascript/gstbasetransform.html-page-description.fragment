fragment_downloaded_cb({"url": "libgstbase-doc-1.0/javascript/gstbasetransform.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstbasetransform.h\">\n<h1 id=\"gstbasetransform\">GstBaseTransform</h1><p>This base class is for filter elements that process data. Elements\nthat are suitable for implementation using <a href=\"../../libgstbase-doc-1.0/gstbasetransform.html#GstBaseTransform\">GstBase.BaseTransform</a> are ones\nwhere the size and caps of the output is known entirely from the input\ncaps and buffer sizes. These include elements that directly transform\none buffer into another, modify the contents of a buffer in-place, as\nwell as elements that collate multiple input buffers into one output buffer,\nor that expand one input buffer into multiple output buffers. See below\nfor more concrete use cases.</p>\n<p>It provides for:</p>\n<ul>\n<li>\n<p>one sinkpad and one srcpad</p>\n</li>\n<li>\n<p>Possible formats on sink and source pad implemented\nwith custom transform_caps function. By default uses\nsame format on sink and source.</p>\n</li>\n<li>\n<p>Handles state changes</p>\n</li>\n<li>\n<p>Does flushing</p>\n</li>\n<li>\n<p>Push mode</p>\n</li>\n<li>\n<p>Pull mode if the sub-class transform can operate on arbitrary data</p>\n</li>\n</ul>\n<h1 id=\"use-cases\">Use Cases</h1>\n<h2 id=\"passthrough-mode\">Passthrough mode</h2>\n<ul>\n<li>\n<p>Element has no interest in modifying the buffer. It may want to inspect it,\nin which case the element should have a transform_ip function. If there\nis no transform_ip function in passthrough mode, the buffer is pushed\nintact.</p>\n</li>\n<li>\n<p>The <a href=\"../../libgstbase-doc-1.0/gstbasetransform.html#GstBaseTransformClass.passthrough_on_same_caps\">GstBaseTransformClass.passthrough_on_same_caps (not introspectable)</a> variable\nwill automatically set/unset passthrough based on whether the\nelement negotiates the same caps on both pads.</p>\n</li>\n<li>\n<p><a href=\"../../libgstbase-doc-1.0/gstbasetransform.html#GstBaseTransformClass.passthrough_on_same_caps\">GstBaseTransformClass.passthrough_on_same_caps (not introspectable)</a> on an element that\ndoesn't implement a transform_caps function is useful for elements that\nonly inspect data (such as level)</p>\n</li>\n<li>\n<p>Example elements</p>\n<ul>\n<li>Level</li>\n<li>Videoscale, audioconvert, videoconvert, audioresample in certain modes.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"modifications-inplace-input-buffer-and-output-buffer-are-the-same-thing\">Modifications in-place - input buffer and output buffer are the same thing.</h2>\n<ul>\n<li>\n<p>The element must implement a transform_ip function.</p>\n</li>\n<li>\n<p>Output buffer size must &lt;= input buffer size</p>\n</li>\n<li>\n<p>If the always_in_place flag is set, non-writable buffers will be copied\nand passed to the transform_ip function, otherwise a new buffer will be\ncreated and the transform function called.</p>\n</li>\n<li>\n<p>Incoming writable buffers will be passed to the transform_ip function\nimmediately.</p>\n</li>\n<li>\n<p>only implementing transform_ip and not transform implies always_in_place = <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">true</a></p>\n<ul>\n<li>Example elements:\n<ul>\n<li>Volume</li>\n<li>Audioconvert in certain modes (signed/unsigned conversion)</li>\n<li>videoconvert in certain modes (endianness swapping)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"modifications-only-to-the-capsmetadata-of-a-buffer\">Modifications only to the caps/metadata of a buffer</h2>\n<ul>\n<li>\n<p>The element does not require writable data, but non-writable buffers\nshould be subbuffered so that the meta-information can be replaced.</p>\n</li>\n<li>\n<p>Elements wishing to operate in this mode should replace the\nprepare_output_buffer method to create subbuffers of the input buffer\nand set always_in_place to <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">true</a></p>\n</li>\n<li>\n<p>Example elements</p>\n<ul>\n<li>Capsfilter when setting caps on outgoing buffers that have\nnone.</li>\n<li>identity when it is going to re-timestamp buffers by\ndatarate.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"normal-mode\">Normal mode</h2>\n<ul>\n<li>always_in_place flag is not set, or there is no transform_ip function</li>\n<li>Element will receive an input buffer and output buffer to operate on.</li>\n<li>Output buffer is allocated by calling the prepare_output_buffer function.</li>\n<li>Example elements:\n<ul>\n<li>Videoscale, videoconvert, audioconvert when doing\nscaling/conversions</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"special-output-buffer-allocations\">Special output buffer allocations</h2>\n<ul>\n<li>\n<p>Elements which need to do special allocation of their output buffers\nbeyond allocating output buffers via the negotiated allocator or\nbuffer pool should implement the prepare_output_buffer method.</p>\n</li>\n<li>\n<p>Example elements:</p>\n<ul>\n<li>efence</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"subclass-settable-flags-on-gstbasetransform\">Sub-class settable flags on GstBaseTransform</h1>\n<ul>\n<li>\n<p>passthrough</p>\n<ul>\n<li>Implies that in the current configuration, the sub-class is not interested in modifying the buffers.</li>\n<li>Elements which are always in passthrough mode whenever the same caps has been negotiated on both pads can set the class variable passthrough_on_same_caps to have this behaviour automatically.</li>\n</ul>\n</li>\n<li>\n<p>always_in_place</p>\n<ul>\n<li>\n<p>Determines whether a non-writable buffer will be copied before passing\nto the transform_ip function.</p>\n</li>\n<li>\n<p>Implied <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">true</a> if no transform function is implemented.</p>\n</li>\n<li>\n<p>Implied <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS\">false</a> if ONLY transform function is implemented.</p>\n</li>\n</ul>\n</li>\n</ul>\n\n</div>\n\n\n"});