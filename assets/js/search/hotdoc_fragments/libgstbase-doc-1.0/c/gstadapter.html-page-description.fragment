fragment_downloaded_cb({"url": "libgstbase-doc-1.0/c/gstadapter.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstadapter.h\">\n<h1 id=\"gstadapter\">GstAdapter</h1><p>This class is for elements that receive buffers in an undesired size.\nWhile for example raw video contains one image per buffer, the same is not\ntrue for a lot of other formats, especially those that come directly from\na file. So if you have undefined buffer sizes and require a specific size,\nthis object is for you.</p>\n<p>An adapter is created with <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_new\">gst_adapter_new</a>. It can be freed again with\n<a href=\"https://developer.gnome.org/gobject/unstable/gobject-The-Base-Object-Type.html#g-object-unref\">g_object_unref</a>.</p>\n<p>The theory of operation is like this: All buffers received are put\ninto the adapter using <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_push\">gst_adapter_push</a> and the data is then read back\nin chunks of the desired size using <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_map\">gst_adapter_map</a>/<a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_unmap\">gst_adapter_unmap</a>\nand/or <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_copy\">gst_adapter_copy</a>. After the data has been processed, it is freed\nusing <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_unmap\">gst_adapter_unmap</a>.</p>\n<p>Other methods such as <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_take\">gst_adapter_take</a> and <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_take_buffer\">gst_adapter_take_buffer</a>\ncombine <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_map\">gst_adapter_map</a> and <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_unmap\">gst_adapter_unmap</a> in one method and are\npotentially more convenient for some use cases.</p>\n<p>For example, a sink pad's chain function that needs to pass data to a library\nin 512-byte chunks could be implemented like this:</p>\n<pre><code class=\"language-[&lt;!--\"> static GstFlowReturn\n sink_pad_chain (GstPad *pad, GstObject *parent, GstBuffer *buffer)\n {\n   MyElement *this;\n   GstAdapter *adapter;\n   GstFlowReturn ret = GST_FLOW_OK;\n\n   this = MY_ELEMENT (parent);\n\n   adapter = this-&gt;adapter;\n\n   // put buffer into adapter\n   gst_adapter_push (adapter, buffer);\n\n   // while we can read out 512 bytes, process them\n   while (gst_adapter_available (adapter) &gt;= 512 &amp;&amp; ret == GST_FLOW_OK) {\n     const guint8 *data = gst_adapter_map (adapter, 512);\n     // use flowreturn as an error value\n     ret = my_library_foo (data);\n     gst_adapter_unmap (adapter);\n     gst_adapter_flush (adapter, 512);\n   }\n   return ret;\n }\n</code></pre>\n<p>For another example, a simple element inside GStreamer that uses <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstAdapter.html#GstAdapter-struct\">GstAdapter</a>\nis the libvisual element.</p>\n<p>An element using <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstAdapter.html#GstAdapter-struct\">GstAdapter</a> in its sink pad chain function should ensure that\nwhen the FLUSH_STOP event is received, that any queued data is cleared using\n<a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_clear\">gst_adapter_clear</a>. Data should also be cleared or processed on EOS and\nwhen changing state from <a href=\"../../libgstreamer-doc-1.0/c/gstelement.html#GST_STATE_PAUSED\">GST_STATE_PAUSED</a> to <a href=\"../../libgstreamer-doc-1.0/c/gstelement.html#GST_STATE_READY\">GST_STATE_READY</a>.</p>\n<p>Also check the GST_BUFFER_FLAG_DISCONT flag on the buffer. Some elements might\nneed to clear the adapter after a discontinuity.</p>\n<p>The adapter will keep track of the timestamps of the buffers\nthat were pushed. The last seen timestamp before the current position\ncan be queried with <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_prev_pts\">gst_adapter_prev_pts</a>. This function can\noptionally return the number of bytes between the start of the buffer that\ncarried the timestamp and the current adapter position. The distance is\nuseful when dealing with, for example, raw audio samples because it allows\nyou to calculate the timestamp of the current adapter position by using the\nlast seen timestamp and the amount of bytes since.  Additionally, the\n<a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_prev_pts_at_offset\">gst_adapter_prev_pts_at_offset</a> can be used to determine the last\nseen timestamp at a particular offset in the adapter.</p>\n<p>The adapter will also keep track of the offset of the buffers\n(#GST_BUFFER_OFFSET) that were pushed. The last seen offset before the\ncurrent position can be queried with <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_prev_offset\">gst_adapter_prev_offset</a>. This function\ncan optionally return the number of bytes between the start of the buffer\nthat carried the offset and the current adapter position.</p>\n<p>Additionally the adapter also keeps track of the PTS, DTS and buffer offset\nat the last discontinuity, which can be retrieved with\n<a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_pts_at_discont\">gst_adapter_pts_at_discont</a>, <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_dts_at_discont\">gst_adapter_dts_at_discont</a> and\n<a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_offset_at_discont\">gst_adapter_offset_at_discont</a>. The number of bytes that were consumed\nsince then can be queried with <a href=\"../../Miscellaneous.html#gst_adapter_distance_from_discont\">gst_adapter_distance_from_discont</a>.</p>\n<p>A last thing to note is that while <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstAdapter.html#GstAdapter-struct\">GstAdapter</a> is pretty optimized,\nmerging buffers still might be an operation that requires a malloc and\nmemcpy operation, and these operations are not the fastest. Because of\nthis, some functions like <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_available_fast\">gst_adapter_available_fast</a> are provided to help\nspeed up such cases should you want to. To avoid repeated memory allocations,\n<a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_copy\">gst_adapter_copy</a> can be used to copy data into a (statically allocated)\nuser provided buffer.</p>\n<p><a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstAdapter.html#GstAdapter-struct\">GstAdapter</a> is not MT safe. All operations on an adapter must be serialized by\nthe caller. This is not normally a problem, however, as the normal use case\nof <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstAdapter.html#GstAdapter-struct\">GstAdapter</a> is inside one pad's chain function, in which case access is\nserialized via the pad's STREAM_LOCK.</p>\n<p>Note that <a href=\"../../libgstbase-doc-1.0/c/gstadapter.html#gst_adapter_push\">gst_adapter_push</a> takes ownership of the buffer passed. Use\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/GstBuffer.html#gst-buffer-ref\">gst_buffer_ref</a> before pushing it into the adapter if you still want to\naccess the buffer later. The adapter will never modify the data in the\nbuffer pushed in it.</p>\n\n</div>\n\n\n"});