fragment_downloaded_cb({"url": "libgstbase-doc-1.0/c/gstbasesrc.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstbasesrc.h\">\n<h1 id=\"gstbasesrc\">GstBaseSrc</h1><p>This is a generic base class for source elements. The following\ntypes of sources are supported:</p>\n<ul>\n<li>random access sources like files</li>\n<li>seekable sources</li>\n<li>live sources</li>\n</ul>\n<p>The source can be configured to operate in any <a href=\"../../GstFormat/c\">GstFormat</a> with the\n<a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#gst_base_src_set_format\">gst_base_src_set_format</a> method. The currently set format determines\nthe format of the internal <a href=\"../../libgstreamer-doc-1.0/c/gstsegment.html#GstSegment\">GstSegment</a> and any <a href=\"../../libgstreamer-doc-1.0/c/gstevent.html#GST_EVENT_SEGMENT\">GST_EVENT_SEGMENT</a>\nevents. The default format for <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a> is <a href=\"../../libgstreamer-doc-1.0/c/gstformat.html#GST_FORMAT_BYTES\">GST_FORMAT_BYTES</a>.</p>\n<p><a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a> always supports push mode scheduling. If the following\nconditions are met, it also supports pull mode scheduling:</p>\n<ul>\n<li>The format is set to <a href=\"../../libgstreamer-doc-1.0/c/gstformat.html#GST_FORMAT_BYTES\">GST_FORMAT_BYTES</a> (default).</li>\n<li>GstBaseSrcClass.is_seekable returns <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">TRUE</a>.</li>\n</ul>\n<p>If all the conditions are met for operating in pull mode, <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a> is\nautomatically seekable in push mode as well. The following conditions must\nbe met to make the element seekable in push mode when the format is not\n<a href=\"../../libgstreamer-doc-1.0/c/gstformat.html#GST_FORMAT_BYTES\">GST_FORMAT_BYTES</a>:</p>\n<ul>\n<li>GstBaseSrcClass.is_seekable returns <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">TRUE</a>.</li>\n<li><a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSrc.html#GstBaseSrcClass.query\">GstBaseSrcClass.query</a>() can convert all supported seek formats to the\ninternal format as set with <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#gst_base_src_set_format\">gst_base_src_set_format</a>.</li>\n<li>GstBaseSrcClass.do_seek is implemented, performs the seek and returns\n<a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">TRUE</a>.</li>\n</ul>\n<p>When the element does not meet the requirements to operate in pull mode, the\noffset and length in the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSrc.html#GstBaseSrcClass.create\">GstBaseSrcClass.create</a>() method should be ignored.\nIt is recommended to subclass <a href=\"../../libgstbase-doc-1.0/c/gstpushsrc.html#GstPushSrc\">GstPushSrc</a> instead, in this situation. If the\nelement can operate in pull mode but only with specific offsets and\nlengths, it is allowed to generate an error when the wrong values are passed\nto the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSrc.html#GstBaseSrcClass.create\">GstBaseSrcClass.create</a>() function.</p>\n<p><a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a> has support for live sources. Live sources are sources that when\npaused discard data, such as audio or video capture devices. A typical live\nsource also produces data at a fixed rate and thus provides a clock to publish\nthis rate.\nUse <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#gst_base_src_set_live\">gst_base_src_set_live</a> to activate the live source mode.</p>\n<p>A live source does not produce data in the PAUSED state. This means that the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSrc.html#GstBaseSrcClass.create\">GstBaseSrcClass.create</a>() method will not be called in PAUSED but only in\nPLAYING. To signal the pipeline that the element will not produce data, the\nreturn value from the READY to PAUSED state will be\n<a href=\"../../libgstreamer-doc-1.0/c/gstelement.html#GST_STATE_CHANGE_NO_PREROLL\">GST_STATE_CHANGE_NO_PREROLL</a>.</p>\n<p>A typical live source will timestamp the buffers it creates with the\ncurrent running time of the pipeline. This is one reason why a live source\ncan only produce data in the PLAYING state, when the clock is actually\ndistributed and running.</p>\n<p>Live sources that synchronize and block on the clock (an audio source, for\nexample) can use <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#gst_base_src_wait_playing\">gst_base_src_wait_playing</a> when the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSrc.html#GstBaseSrcClass.create\">GstBaseSrcClass.create</a>() function was interrupted by a state change to\nPAUSED.</p>\n<p>The GstBaseSrcClass.get_times method can be used to implement pseudo-live\nsources. It only makes sense to implement the GstBaseSrcClass.get_times\nfunction if the source is a live source. The GstBaseSrcClass.get_times\nfunction should return timestamps starting from 0, as if it were a non-live\nsource. The base class will make sure that the timestamps are transformed\ninto the current running_time. The base source will then wait for the\ncalculated running_time before pushing out the buffer.</p>\n<p>For live sources, the base class will by default report a latency of 0.\nFor pseudo live sources, the base class will by default measure the difference\nbetween the first buffer timestamp and the start time of get_times and will\nreport this value as the latency.\nSubclasses should override the query function when this behaviour is not\nacceptable.</p>\n<p>There is only support in <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a> for exactly one source pad, which\nshould be named \"src\". A source implementation (subclass of <a href=\"../../libgstbase-doc-1.0/c/gstbasesrc.html#GstBaseSrc\">GstBaseSrc</a>)\nshould install a pad template in its class_init function, like so:</p>\n<pre><code class=\"language-c\">static void\nmy_element_class_init (GstMyElementClass *klass)\n{\n  GstElementClass *gstelement_class = GST_ELEMENT_CLASS (klass);\n  // srctemplate should be a #GstStaticPadTemplate with direction\n  // %GST_PAD_SRC and name \"src\"\n  gst_element_class_add_static_pad_template (gstelement_class, &amp;amp;srctemplate);\n\n  gst_element_class_set_static_metadata (gstelement_class,\n     \"Source name\",\n     \"Source\",\n     \"My Source element\",\n     \"The author &lt;my.sink@my.email&gt;\");\n}\n</code></pre>\n<h2 id=\"controlled-shutdown-of-live-sources-in-applications\">Controlled shutdown of live sources in applications</h2>\n<p>Applications that record from a live source may want to stop recording\nin a controlled way, so that the recording is stopped, but the data\nalready in the pipeline is processed to the end (remember that many live\nsources would go on recording forever otherwise). For that to happen the\napplication needs to make the source stop recording and send an EOS\nevent down the pipeline. The application would then wait for an\nEOS message posted on the pipeline's bus to know when all data has\nbeen processed and the pipeline can safely be stopped.</p>\n<p>An application may send an EOS event to a source element to make it\nperform the EOS logic (send EOS event downstream or post a\n<a href=\"../../libgstreamer-doc-1.0/c/gstmessage.html#GST_MESSAGE_SEGMENT_DONE\">GST_MESSAGE_SEGMENT_DONE</a> on the bus). This can typically be done\nwith the <a href=\"../../libgstreamer-doc-1.0/c/gstelement.html#gst_element_send_event\">gst_element_send_event</a> function on the element or its parent bin.</p>\n<p>After the EOS has been sent to the element, the application should wait for\nan EOS message to be posted on the pipeline's bus. Once this EOS message is\nreceived, it may safely shut down the entire pipeline.</p>\n\n</div>\n\n\n"});