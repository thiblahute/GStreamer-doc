fragment_downloaded_cb({"url": "gst-plugins-base-pbutils-1.0/python/encoding-profile.html#page-description", "fragment": "Defining a GstEncodingProfile as a string \nSerialized encoding profile formats \nUsing encoders and muxer element factory name \nDefine the encoding profile in a generic way using caps \nAdvanced encoding format serialization features \nSome serialized encoding formats examples \nLoading a profile from encoding targets \nExample Using an encoder preset with a profile \nExample Listing categories targets and profiles \nEncoding target serialization format \nLocation of encoding target files \nFunctions \nFunctions \nFunctions \nFor example to encode a stream into a WebM container with an OGG audio stream and a VP8 video stream the serialized GstPbutils.EncodingProfile looks like \nFor example to encode a stream into a WebM container with an OGG audio stream and a VP8 video stream the serialized GstPbutils.EncodingProfile looks like \nIt is possible to mix caps and element type names so you can specify a specific video encoder while using caps for other encoders muxer. \nYou can also set the preset name of the encoding profile using the caps preset_name syntax as in \nMoreover you can set the presence property of an encoding profile using the presence syntax as in \nThis field allows specifies the maximum number of times a GstPbutils.EncodingProfile can be used inside an encodebin. If it is not a mandatory stream and can be used as many times as necessary. \nYou can also use the restriction_caps encoded_format_caps syntax to specify the restriction caps to be set on a GstPbutils.EncodingProfile \nIt corresponds to the restriction Gst.Caps to apply before the encoder that will be used in the profile. The fields present in restriction caps are properties of the raw stream that is before encoding such as height and width for video and depth and sampling rate for audio. This property does not make sense for muxers. See GstPbutils.EncodingProfile.get_restriction for more details. \nTo force a video stream to be encoded with a Full HD resolution using WebM as the container format VP8 as the video codec and Vorbis as the audio codec you should use \nNOTE Make sure to enclose into quotes to avoid to be reinterpreted by the shell. \nIn the case you are using encoder types the following is also possible \nMP3 audio and H264 in MP4 \nVorbis and theora in OGG \nAC3 and H264 in MPEG TS \nAnywhere where you have to use a string to define a GstPbutils.EncodingProfile you can use load it from a GstPbutils.EncodingTarget using the following syntaxes \nor \nEncoding targets are serialized in a KeyFile like files. \nGST_DATADIR gstreamer GST_API_VERSION encoding profile HOME gstreamer GST_API_VERSION encoding profile \nThere also is a GST_ENCODING_TARGET_PATH environment variable defining a list of folder containing encoding target files. \nVariant of GstPbutils.EncodingProfile for audio streams. \nCreates a new GstPbutils.EncodingAudioProfile \nAll provided allocatable arguments will be internally copied so can be safely freed unreferenced after calling this method. \nEncoding profiles for containers. Keeps track of a list of GstPbutils.EncodingProfile \nCreates a new GstPbutils.EncodingContainerProfile. \nAdd a GstPbutils.EncodingProfile to the list of profiles handled by container. \nNo copy of profile will be made if you wish to use it elsewhere after this method you should increment its reference count. \nChecks if container contains a GstPbutils.EncodingProfile identical to profile. \nThe opaque base class object for all encoding profiles. This contains generic information like name description format and preset. \nCreates a GstPbutils.EncodingProfile matching the formats from the given GstPbutils.DiscovererInfo. Streams other than audio or video eg subtitles are currently ignored. \nGet whether the format that has been negotiated in at some point can be renegotiated later during the encoding. \nComputes the full output caps that this profile will be able to consume. \nChecks whether the two GstPbutils.EncodingProfile are equal \nSets whether the format that has been negotiated in at some point can be renegotiated later during the encoding. \nSet description as the given description for the profile. A copy of description will be made internally. \nSet whether the profile should be used or not. \nSets the media format used in the profile. \nSet name as the given name for the profile. A copy of name will be made internally. \nSet the number of time the profile is used in its parent container profile. If it is not a mandatory stream \nSets the name of the Gst.Element that implements the Gst.Preset interface to use for the profile. This is the name that has been set when saving the preset. \nSets the name of the Gst.Preset s factory to be used in the profile. \nSet the restriction Gst.Caps to apply before the encoder that will be used in the profile. See GstPbutils.EncodingProfile.get_restriction for more about restrictions. Does not apply to GstPbutils.EncodingContainerProfile. \nVariant of GstPbutils.EncodingProfile for video streams allows specifying the pass. \nCreates a new GstPbutils.EncodingVideoProfile \nAll provided allocatable arguments will be internally copied so can be safely freed unreferenced after calling this method. \nIf you wish to control the pass number in case of multi pass scenarios please refer to the GstPbutils.EncodingVideoProfile.set_pass documentation. \nIf you wish to use force a constant framerate please refer to the GstPbutils.EncodingVideoProfile.set_variableframerate documentation. \nGet the pass number if this is part of a multi pass profile. \nSets the pass number of this video profile. The first pass profile should have this value set to If this video profile isn t part of a multi pass profile you may set it to the default value \nIf set to True then the incoming stream will be allowed to have non constant framerate. If set to False default value then the incoming stream will be normalized by dropping duplicating frames in order to produce a constance framerate. \n"});