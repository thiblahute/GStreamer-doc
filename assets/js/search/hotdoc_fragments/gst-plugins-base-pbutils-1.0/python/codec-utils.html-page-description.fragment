fragment_downloaded_cb({"url": "gst-plugins-base-pbutils-1.0/python/codec-utils.html#page-description", "fragment": "Sets the level and profile on caps if it can be determined from audio_config. See GstPbutils.codec_utils_aac_get_level and GstPbutils.codec_utils_aac_get_profile for more details on the parameters. caps must be audio mpeg caps with an mpegversion field of either or If mpegversion is the base profile field is also set in caps. \nReturns the channels of the given AAC stream. \nTranslates the sample rate to the index corresponding to it in AAC spec. \nDetermines the level of a stream as defined in ISO IEC For AAC LC streams the constraints from the AAC audio profile are applied. For AAC Main LTP SSR and others the Main profile is used. \nThe audio_config parameter follows the following format starting from the most significant bit of the first byte \nHE AAC support has not yet been implemented. \nReturns the profile of the given AAC stream as a string. The profile is determined using the AudioObjectType field which is in the first bits of audio_config. \nHE AAC support has not yet been implemented. \nTranslates the sample rate index found in AAC headers to the actual sample rate. \nTranslates the sample rate index found in AAC headers to the actual sample rate. \nSets the level and profile in caps if it can be determined from sps. See GstPbutils.codec_utils_h264_get_level and GstPbutils.codec_utils_h264_get_profile for more details on the parameters. \nConverts the level indication level_idc in the stream s sequence parameter set into a string. The SPS is expected to have the same format as for GstPbutils.codec_utils_h264_get_profile. \nTransform a level string from the caps into the level_idc \nConverts the profile indication profile_idc in the stream s sequence parameter set into a string. The SPS is expected to have the following format as defined in the H.264 specification. The SPS is viewed as a bitstream here with bit being the most significant bit of the first byte. \nSets the level tier and profile in caps if it can be determined from profile_tier_level. See GstPbutils.codec_utils_h265_get_level GstPbutils.codec_utils_h265_get_tier and GstPbutils.codec_utils_h265_get_profile for more details on the parameters. \nConverts the level indication general_level_idc in the stream s profile_tier_level structure into a string. The profiel_tier_level is expected to have the same format as for GstPbutils.codec_utils_h264_get_profile. \nTransform a level string from the caps into the level_idc \nConverts the profile indication general_profile_idc in the stream s profile_level_tier structure into a string. The profile_tier_level is expected to have the following format as defined in the H.265 specification. The profile_tier_level is viewed as a bitstream here with bit being the most significant bit of the first byte. \nConverts the tier indication general_tier_flag in the stream s profile_tier_level structure into a string. The profile_tier_level is expected to have the same format as for GstPbutils.codec_utils_h264_get_profile. \nSets the level and profile in caps if it can be determined from vis_obj_seq. See GstPbutils.codec_utils_mpeg4video_get_level and GstPbutils.codec_utils_mpeg4video_get_profile for more details on the parameters. \nConverts the level indication in the stream s visual object sequence into a string. vis_obj_seq is expected to be the data following the visual object sequence start code. Only the first byte profile_and_level_indication is used. \nConverts the profile indication in the stream s visual object sequence into a string. vis_obj_seq is expected to be the data following the visual object sequence start code. Only the first byte profile_and_level_indication is used. \nCreates Opus caps from the given parameters. \nCreates Opus caps from the given OpusHead header and comment header comments. \nCreates OpusHead header from the given parameters. \nParses Opus caps and fills the different fields with defaults if possible. \nParses the OpusHead header. \n"});