fragment_downloaded_cb({"url": "gst-plugins-base-pbutils-1.0/encoding-profile-h.html#page-description", "fragment": "Functions to create and handle encoding profiles. \nEncoding profiles describe the media types and settings one wishes to use for an encoding process. The top level profiles are commonly Gst.PbUtils.EncodingContainerProfile s which contains a user readable name and description along with which container format to use These in turn reference one or more Gst.PbUtils.EncodingProfile s which indicate which encoding format should be used on each individual streams. \nGst.PbUtils.EncodingProfile s can be provided to the encodebin element which will take care of selecting and setting up the required elements to produce an output stream conforming to the specifications of the profile. \nUnlike other systems the encoding profiles do not specify which Gst.Element to use for the various encoding and muxing steps but instead relies on specifying the format one wishes to use. \nEncoding profiles can be created at runtime by the application or loaded from and saved to file using the Gst.PbUtils.EncodingTarget API. \nFor example to encode a stream into a WebM container with an OGG audio stream and a VP8 video stream the serialized Gst.PbUtils.EncodingProfile looks like \nFor example to encode a stream into a WebM container with an OGG audio stream and a VP8 video stream the serialized Gst.PbUtils.EncodingProfile looks like \nIt is possible to mix caps and element type names so you can specify a specific video encoder while using caps for other encoders muxer. \nYou can also set the preset name of the encoding profile using the caps preset_name syntax as in \nMoreover you can set the presence property of an encoding profile using the presence syntax as in \nThis field allows specifies the maximum number of times a Gst.PbUtils.EncodingProfile can be used inside an encodebin. If it is not a mandatory stream and can be used as many times as necessary. \nYou can also use the restriction_caps encoded_format_caps syntax to specify the restriction caps to be set on a Gst.PbUtils.EncodingProfile \nIt corresponds to the restriction Gst.Caps to apply before the encoder that will be used in the profile. The fields present in restriction caps are properties of the raw stream that is before encoding such as height and width for video and depth and sampling rate for audio. This property does not make sense for muxers. See Gst.PbUtils.EncodingProfile.GetRestriction for more details. \nTo force a video stream to be encoded with a Full HD resolution using WebM as the container format VP8 as the video codec and Vorbis as the audio codec you should use \nNOTE Make sure to enclose into quotes to avoid to be reinterpreted by the shell. \nIn the case you are using encoder types the following is also possible \nMP3 audio and H264 in MP4 \nVorbis and theora in OGG \nAC3 and H264 in MPEG TS \nAnywhere where you have to use a string to define a Gst.PbUtils.EncodingProfile you can use load it from a Gst.PbUtils.EncodingTarget using the following syntaxes \nor \n"});