fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-rganalysis.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-rganalysis\">\n<h1 id=\"rganalysis1\">rganalysis</h1><p>This element analyzes raw audio sample data in accordance with the proposed\n<ulink url=\"http://replaygain.org\">ReplayGain standard</ulink> for\ncalculating the ideal replay gain for music tracks and albums.  The element\nis designed as a pass-through filter that never modifies any data.  As it\nreceives an EOS event, it finalizes the ongoing analysis and generates a tag\nlist containing the results.  It is sent downstream with a tag event and\nposted on the message bus with a tag message.  The EOS event is forwarded as\nnormal afterwards.  Result tag lists at least contain the tags\n<a href=\"../libgstreamer-1.0/c/gsttaglist.html#GST_TAG_TRACK_GAIN\">GST_TAG_TRACK_GAIN</a>, <a href=\"../libgstreamer-1.0/c/gsttaglist.html#GST_TAG_TRACK_PEAK\">GST_TAG_TRACK_PEAK</a> and <a href=\"../libgstreamer-1.0/c/gsttaglist.html#GST_TAG_REFERENCE_LEVEL\">GST_TAG_REFERENCE_LEVEL</a>.</p>\n<p>Because the generated metadata tags become available at the end of streams,\ndownstream muxer and encoder elements are normally unable to save them in\ntheir output since they generally save metadata in the file header.\nTherefore, it is often necessary that applications read the results in a bus\nevent handler for the tag message.  Obtaining the values this way is always\nneeded for album processing (see <a href=\"element-rganalysis.html#GstRgAnalysis:num-tracks\">num-tracks</a> property) since\nthe album gain and peak values need to be associated with all tracks of an\nalbum, not just the last one.</p>\n<h2 id=\"example-launch-lines\">Example launch lines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 -t audiotestsrc wave=sine num-buffers=512 ! rganalysis ! fakesink\n ]| Analyze a simple test waveform\n |[\n gst-launch-1.0 -t filesrc location=filename.ext ! decodebin \\\n     ! audioconvert ! audioresample ! rganalysis ! fakesink\n ]| Analyze a given file\n |[\n gst-launch-1.0 -t gnomevfssrc location=http://replaygain.hydrogenaudio.org/ref_pink.wav \\\n     ! wavparse ! rganalysis ! fakesink\n ]| Analyze the pink noise reference file\n\n The above launch line yields a result gain of +6 dB (instead of the expected\n +0 dB).  This is not in error, refer to the #GstRgAnalysis:reference-level\n property documentation for more information.\n\n ## Acknowledgements\n\n This element is based on code used in the &lt;ulink\n url=\"http://sjeng.org/vorbisgain.html\"&gt;vorbisgain&lt;/ulink&gt; program and many\n others.  The relevant parts are copyrighted by David Robinson, Glen Sawyer\n and Frank Klemm.\n</code></pre>\n\n</div>\n\n\n"});