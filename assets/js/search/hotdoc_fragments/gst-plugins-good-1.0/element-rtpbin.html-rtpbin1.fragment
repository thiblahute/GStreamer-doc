fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-rtpbin.html#rtpbin1", "fragment": "rtpbin \nRTP bin combines the functions of rtpsession rtpssrcdemux rtpjitterbuffer and rtpptdemux in one element. It allows for multiple RTP sessions that will be synchronized together using RTCP SR packets. \nrtpbin is configured with a number of request pads that define the functionality that is activated similar to the rtpsession element. \nTo use rtpbin as an RTP receiver request a recv_rtp_sink_ u pad. The session number must be specified in the pad name. Data received on the recv_rtp_sink_ u pad will be processed in the rtpsession manager and after being validated forwarded on rtpssrcdemux element. Each RTP stream is demuxed based on the SSRC and send to a rtpjitterbuffer. After the packets are released from the jitterbuffer they will be forwarded to a rtpptdemux element. The rtpptdemux element will demux the packets based on the payload type and will create a unique pad recv_rtp_src_ u_ u_ u on rtpbin with the session number SSRC and payload type respectively as the pad name. \nTo also use rtpbin as an RTCP receiver request a recv_rtcp_sink_ u pad. The session number must be specified in the pad name. \nIf you want the session manager to generate and send RTCP packets request the send_rtcp_src_ u pad with the session number in the pad name. Packet pushed on this pad contain SR RR RTCP reports that should be sent to all participants in the session. \nTo use rtpbin as a sender request a send_rtp_sink_ u pad which will automatically create a send_rtp_src_ u pad. If the session number is not provided the pad from the lowest available session will be returned. The session manager will modify the SSRC in the RTP packets to its own SSRC and wil forward the packets on the send_rtp_src_ u pad after updating its internal state. \nrtpbin can also demultiplex incoming bundled streams. The first rtpsession will have a rtpssrcdemux element splitting the streams based on their SSRC and potentially dispatched to a different rtpsession. Because retransmission SSRCs need to be merged with the corresponding media stream the on bundled ssrc signal is emitted so that the application can find out to which session the SSRC belongs. \nThe session manager needs the clock rate of the payload types it is handling and will signal the request pt map signal when it needs such a mapping. One can clear the cached values with the clear pt map signal. \nAccess to the internal statistics of rtpbin is provided with the get internal session property. This action signal gives access to the RTPSession object which further provides action signals to retrieve the internal source and other sources. \nrtpbin also has signals GstRtpBin request rtp encoder request rtp decoder request rtcp encoder and request rtp decoder to dynamically request for RTP and RTCP encoders and decoders in order to support SRTP. The encoders must provide the pads rtp_sink_ u and rtp_src_ u for RTP and rtcp_sink_ u and rtcp_src_ u for RTCP. The session number will be used in the pad name. The decoders must provide rtp_sink and rtp_src for RTP and rtcp_sink and rtcp_src for RTCP. The decoders will be placed before the rtpsession element thus they must support SSRC demuxing internally. \nrtpbin has signals GstRtpBin request aux sender and request aux receiver to dynamically request an element that can be used to create or merge additional RTP streams. AUX elements are needed to implement FEC or retransmission such as RFC An AUX sender must have one sink_ u pad that matches the sessionid in the signal and it should have or more src_ u pads. For each src_ u pad a session will be made if needed and the pad will be linked to the session send_rtp_sink pad. Each session will then expose its source pad as send_rtp_src_ u on rtpbin. An AUX receiver has src_ u pad that much match the sessionid in the signal and or more sink_ u pads. A session will be made for each sink_ u pad when the corresponding recv_rtp_sink_ u pad is requested on rtpbin. \n"});