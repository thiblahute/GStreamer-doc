fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-rtprtxreceive.html#example-pipelines", "fragment": "Example pipelines \nSend audio stream through port and are just the rtcp link with the receiver \nReceive audio stream from port and are just the rtcp link with the sender \nIn this example we can see a simple streaming of an OPUS stream with some of the packets being artificially dropped by the identity element. Thanks to retransmission you should still hear a clear sound when setting drop probability to something greater than \nInternally the rtpjitterbuffer will generate a custom upstream event GstRTPRetransmissionRequest when it detects that one packet is missing. Then this request is translated to a FB NACK in the rtcp link by rtpsession. Finally the rtpsession of the sender side will re convert it in a GstRTPRetransmissionRequest that will be handled by rtprtxsend. rtprtxsend will then re send the missing packet with a new srrc and a different payload type here but with the same original sequence number. On the receiver side rtprtxreceive will associate this new stream with the original and forward the retransmission packets to rtpjitterbuffer with the original ssrc and payload type. \nSend two audio streams to port \nReceive two audio streams from port \nIn this example we are streaming two streams of the same type through the same port. They however are using a different SSRC ssrc is randomly generated on each payloader rtpopuspay in this example so they can be identified and demultiplexed by rtpssrcdemux on the receiver side. This is an example of SSRC multiplexing. \nIt is important here to use a different starting sequence number seqnum offset since this is the only means of identification that rtprtxreceive uses the very first time to identify retransmission streams. It is an error according to RFC4588 to have two retransmission requests for packets belonging to two different streams but with the same sequence number. Note that the default seqnum offset value which means random would work just fine but it is overriden here for illustration purposes. \n"});