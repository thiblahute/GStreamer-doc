fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-rtspsrc.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-rtspsrc\">\n<h1 id=\"rtspsrc\">rtspsrc</h1><p>Makes a connection to an RTSP server and read the data.\nrtspsrc strictly follows RFC 2326 and therefore does not (yet) support\nRealMedia/Quicktime/Microsoft extensions.</p>\n<p>RTSP supports transport over TCP or UDP in unicast or multicast mode. By\ndefault rtspsrc will negotiate a connection in the following order:\nUDP unicast/UDP multicast/TCP. The order cannot be changed but the allowed\nprotocols can be controlled with the <a href=\"element-rtspsrc.html#GstRTSPSrc:protocols\">protocols</a> property.</p>\n<p>rtspsrc currently understands SDP as the format of the session description.\nFor each stream listed in the SDP a new rtp_stream%d pad will be created\nwith caps derived from the SDP media description. This is a caps of mime type\n\"application/x-rtp\" that can be connected to any available RTP depayloader\nelement.</p>\n<p>rtspsrc will internally instantiate an RTP session manager element\nthat will handle the RTCP messages to and from the server, jitter removal,\npacket reordering along with providing a clock for the pipeline.\nThis feature is implemented using the gstrtpbin element.</p>\n<p>rtspsrc acts like a live source and will therefore only generate data in the\nPLAYING state.</p>\n<h2 id=\"example-launch-line\">Example launch line</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 rtspsrc location=rtsp://some.server/url ! fakesink\n ]| Establish a connection to an RTSP server and send the raw RTP packets to a\n fakesink.\n</code></pre>\n\n</div>\n\n\n        "});