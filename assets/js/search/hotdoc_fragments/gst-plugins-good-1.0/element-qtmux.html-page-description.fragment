fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-qtmux.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-qtmux\">\n<h1 id=\"qtmux1\">qtmux</h1><p>This element merges streams (audio and video) into QuickTime(.mov) files.</p>\n<p>The following background intends to explain why various similar muxers\nare present in this plugin.</p>\n<p>The <ulink url=\"http://www.apple.com/quicktime/resources/qtfileformat.pdf\">\nQuickTime file format specification</ulink> served as basis for the MP4 file\nformat specification (mp4mux), and as such the QuickTime file structure is\nnearly identical to the so-called ISO Base Media file format defined in\nISO 14496-12 (except for some media specific parts).\nIn turn, the latter ISO Base Media format was further specialized as a\nMotion JPEG-2000 file format in ISO 15444-3 (mj2mux)\nand in various 3GPP(2) specs (gppmux).\nThe fragmented file features defined (only) in ISO Base Media are used by\nISMV files making up (a.o.) Smooth Streaming (ismlmux).</p>\n<p>A few properties (#GstQTMux:movie-timescale, <a href=\"element-qtmux.html#GstQTMux:trak-timescale\">trak-timescale</a>) allow\nadjusting some technical parameters, which might be useful in (rare) cases to\nresolve compatibility issues in some situations.</p>\n<p>Some other properties influence the result more fundamentally.\nA typical mov/mp4 file's metadata (aka moov) is located at the end of the\nfile, somewhat contrary to this usually being called \"the header\".\nHowever, a <a href=\"element-qtmux.html#GstQTMux:faststart\">faststart</a> file will (with some effort) arrange this to\nbe located near start of the file, which then allows it e.g. to be played\nwhile downloading. Alternatively, rather than having one chunk of metadata at\nstart (or end), there can be some metadata at start and most of the other\ndata can be spread out into fragments of <a href=\"element-qtmux.html#GstQTMux:fragment-duration\">fragment-duration</a>.\nIf such fragmented layout is intended for streaming purposes, then\n<a href=\"element-qtmux.html#GstQTMux:streamable\">streamable</a> allows foregoing to add index metadata (at the end of\nfile).</p>\n<p>When the maximum duration to be recorded can be known in advance, <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-qtmux.html#GstQTMux-struct\">GstQTMux</a>\nalso supports a 'Robust Muxing' mode. In robust muxing mode,  space for the\nheaders are reserved at the start of muxing, and rewritten at a configurable\ninterval, so that the output file is always playable, even if the recording\nis interrupted uncleanly by a crash. Robust muxing mode requires a seekable\noutput, such as filesink, because it needs to rewrite the start of the file.</p>\n<p>To enable robust muxing mode, set the GstQTMux::reserved-moov-update-period\nand GstQTMux::reserved-max-duration property. Also present is the\nGstQTMux::reserved-bytes-per-sec property, which can be increased if\nfor some reason the default is not large enough and the initial reserved\nspace for headers is too small. Applications can monitor the\nGstQTMux::reserved-duration-remaining property to see how close to full\nthe reserved space is becoming.</p>\n<h2 id=\"example-pipelines\">Example pipelines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 v4l2src num-buffers=500 ! video/x-raw,width=320,height=240 ! videoconvert ! qtmux ! filesink location=video.mov\n</code></pre>\n<p>Records a video stream captured from a v4l2 device and muxes it into a qt file.</p>\n\n</div>\n\n\n"});