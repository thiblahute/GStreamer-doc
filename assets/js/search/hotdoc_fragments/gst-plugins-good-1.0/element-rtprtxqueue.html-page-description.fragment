fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-rtprtxqueue.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-rtprtxqueue\">\n<h1 id=\"rtprtxqueue\">rtprtxqueue</h1><p>rtprtxqueue maintains a queue of transmitted RTP packets, up to a\nconfigurable limit (see GstRTPRtxQueue::max-size-time,\nGstRTPRtxQueue::max-size-packets), and retransmits them upon request\nfrom the downstream rtpsession (GstRTPRetransmissionRequest event).</p>\n<p>This element is similar to rtprtxsend, but it has differences:</p>\n<ul>\n<li>Retransmission from rtprtxqueue is not RFC 4588 compliant. The\nretransmitted packets have the same ssrc and payload type as the original\nstream.</li>\n<li>As a side-effect of the above, rtprtxqueue does not require the use of\nrtprtxreceive on the receiving end. rtpjitterbuffer alone is able to\nreconstruct the stream.</li>\n<li>Retransmission from rtprtxqueue happens as soon as the next regular flow\npacket is chained, while rtprtxsend retransmits as soon as the retransmission\nevent is received, using a helper thread.</li>\n<li>rtprtxqueue can be used with rtpbin without the need of hooking to its\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-rtpbin.html#GstRtpBin-request-aux-sender\">GstRtpBin::request-aux-sender</a> signal, which means it can be used with\nrtpbin using gst-launch.</li>\n</ul>\n<p>See also <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-rtprtxsend.html#GstRtpRtxSend-struct\">GstRtpRtxSend</a>, <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-rtprtxreceive.html#GstRtpRtxReceive-struct\">GstRtpRtxReceive</a></p>\n<h1 id=\"example-pipelines\">Example pipelines</h1>\n<pre><code class=\"language-[\"> gst-launch-1.0 rtpbin name=b rtp-profile=avpf \\\n    audiotestsrc is-live=true ! opusenc ! rtpopuspay pt=96 ! rtprtxqueue ! b.send_rtp_sink_0 \\\n    b.send_rtp_src_0 ! identity drop-probability=0.01 ! udpsink host=\"127.0.0.1\" port=5000 \\\n    udpsrc port=5001 ! b.recv_rtcp_sink_0 \\\n    b.send_rtcp_src_0 ! udpsink host=\"127.0.0.1\" port=5002 sync=false async=false\n</code></pre>\n<p>Sender pipeline</p>\n<pre><code class=\"language-[\"> gst-launch-1.0 rtpbin name=b rtp-profile=avpf do-retransmission=true \\\n    udpsrc port=5000 caps=\"application/x-rtp,media=(string)audio,clock-rate=(int)48000,encoding-name=(string)OPUS,payload=(int)96\" ! \\\n        b.recv_rtp_sink_0 \\\n    b. ! rtpopusdepay ! opusdec ! audioconvert ! audioresample ! autoaudiosink \\\n    udpsrc port=5002 ! b.recv_rtcp_sink_0 \\\n    b.send_rtcp_src_0 ! udpsink host=\"127.0.0.1\" port=5001 sync=false async=false\n</code></pre>\n<p>Receiver pipeline</p>\n\n</div>\n\n\n        "});