fragment_downloaded_cb({"url": "gst-plugins-good-1.0/element-scaletempo.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-scaletempo\">\n<h1 id=\"scaletempo1\">scaletempo</h1><p>Scale tempo while maintaining pitch\n(WSOLA-like technique with cross correlation)\nInspired by SoundTouch library by Olli Parviainen</p>\n<p>Use Sceletempo to apply playback rates without the chipmunk effect.</p>\n<h2 id=\"example-pipelines\">Example pipelines</h2>\n<pre><code class=\"language-[\"> filesrc location=media.ext ! decodebin name=d \\\n     d. ! queue ! audioconvert ! audioresample ! scaletempo ! audioconvert ! audioresample ! autoaudiosink \\\n     d. ! queue ! videoconvert ! autovideosink\n</code></pre>\n<p>OR</p>\n<pre><code class=\"language-[\"> playbin uri=... audio_sink=\"scaletempo ! audioconvert ! audioresample ! autoaudiosink\"\n</code></pre>\n<p>When an application sends a seek event with rate != 1.0, Scaletempo applies\nthe rate change by scaling the tempo without scaling the pitch.</p>\n<p>Scaletempo works by producing audio in constant sized chunks\n(#GstScaletempo:stride) but consuming chunks proportional to the playback\nrate.</p>\n<p>Scaletempo then smooths the output by blending the end of one stride with\nthe next (#GstScaletempo:overlap).</p>\n<p>Scaletempo smooths the overlap further by searching within the input buffer\nfor the best overlap position.  Scaletempo uses a statistical cross\ncorrelation (roughly a dot-product).  Scaletempo consumes most of its CPU\ncycles here. One can use the <a href=\"element-scaletempo.html#GstScaletempo:search\">search</a> propery to tune how far\nthe algoritm looks.</p>\n\n</div>\n\n\n"});