fragment_downloaded_cb({"url": "gst-plugins-base-fft-1.0/c/gstffts16.html#gstffts16", "fragment": "GstFFTS16 \nGstFFTS16 \nGstFFTS16 provides a FFT implementation and related functions for signed bit integer samples. To use this call gst_fft_s16_new for allocating a GstFFTS16 instance with the appropriate parameters and then call gst_fft_s16_fft or gst_fft_s16_inverse_fft to perform the FFT or inverse FFT on a buffer of samples. \nAfter use free the GstFFTS16 instance with gst_fft_s16_free. \nFor the best performance use gst_fft_next_fast_length to get a number that is entirely a product of and and use this as the len parameter for gst_fft_s16_new. \nThe len parameter specifies the number of samples in the time domain that will be processed or generated. The number of samples in the frequency domain is len To get n samples in the frequency domain use n as len. \nBefore performing the FFT on time domain data it usually makes sense to apply a window function to it. For this gst_fft_s16_window can comfortably be used. \nBe aware that you can t simply run gst_fft_s16_inverse_fft on the resulting frequency data of gst_fft_s16_fft to get the original data back. The relation between them is iFFT FFT x x nfft where nfft is the length of the FFT. This also has to be taken into account when calculation the magnitude of the frequency data. \n"});