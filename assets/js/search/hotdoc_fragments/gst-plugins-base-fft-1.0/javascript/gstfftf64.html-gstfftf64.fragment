fragment_downloaded_cb({"url": "gst-plugins-base-fft-1.0/javascript/gstfftf64.html#gstfftf64", "fragment": "GstFFTF64 \nGstFft.FFTF64 provides a FFT implementation and related functions for bit float samples. To use this call gst_fft_f64_new not introspectable for allocating a GstFft.FFTF64 instance with the appropriate parameters and then call GstFft.FFTF64.prototype.fft or GstFft.FFTF64.prototype.inverse_fft to perform the FFT or inverse FFT on a buffer of samples. \nAfter use free the GstFft.FFTF64 instance with GstFft.FFTF64.prototype.free. \nFor the best performance use GstFft.prototype.fft_next_fast_length to get a number that is entirely a product of and and use this as the len parameter for gst_fft_f64_new not introspectable \nThe len parameter specifies the number of samples in the time domain that will be processed or generated. The number of samples in the frequency domain is len To get n samples in the frequency domain use n as len. \nBefore performing the FFT on time domain data it usually makes sense to apply a window function to it. For this GstFft.FFTF64.prototype.window can comfortably be used. \nBe aware that you can t simply run GstFft.FFTF32.prototype.inverse_fft on the resulting frequency data of GstFft.FFTF32.prototype.fft to get the original data back. The relation between them is iFFT FFT x x nfft where nfft is the length of the FFT. This also has to be taken into account when calculation the magnitude of the frequency data. \n"});