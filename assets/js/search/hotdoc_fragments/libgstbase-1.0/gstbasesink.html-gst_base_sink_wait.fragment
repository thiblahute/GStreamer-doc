fragment_downloaded_cb({"url": "libgstbase-1.0/gstbasesink.html#gst_base_sink_wait", "fragment": "GstBase.prototype.wait \ngst_base_sink_wait \ngst_base_sink_wait \ngst_base_sink_wait \nThis function will wait for preroll to complete and will then block until time is reached. It is usually called by subclasses that use their own internal synchronisation but want to let some synchronization like EOS be handled by the base class. \nThis function should only be called with the PREROLL_LOCK held like when receiving an EOS event in the event vmethod or when handling buffers in render \nThe time argument should be the running_time of when the timeout should happen and will be adjusted with any latency and offset configured in the sink. \nParameters \nthe sink \nthe running_time to be reached \nReturns a tuple made of \nGst.FlowReturn \nGst.FlowReturn \nThis function will wait for preroll to complete and will then block until time is reached. It is usually called by subclasses that use their own internal synchronisation but want to let some synchronization like EOS be handled by the base class. \nThis function should only be called with the PREROLL_LOCK held like when receiving an EOS event in the event vmethod or when handling buffers in render \nThe time argument should be the running_time of when the timeout should happen and will be adjusted with any latency and offset configured in the sink. \nParameters \nthe sink \nthe running_time to be reached \nthe jitter to be filled with time diff or NULL \nGstFlowReturn \nThis function will wait for preroll to complete and will then block until time is reached. It is usually called by subclasses that use their own internal synchronisation but want to let some synchronization like EOS be handled by the base class. \nThis function should only be called with the PREROLL_LOCK held like when receiving an EOS event in the event vmethod or when handling buffers in render \nThe time argument should be the running_time of when the timeout should happen and will be adjusted with any latency and offset configured in the sink. \nParameters \nthe running_time to be reached \nthe jitter to be filled with time diff or NULL \nGstFlowReturn \nThis function will wait for preroll to complete and will then block until time is reached. It is usually called by subclasses that use their own internal synchronisation but want to let some synchronization like EOS be handled by the base class. \nThis function should only be called with the PREROLL_LOCK held like when receiving an EOS event in the event vmethod or when handling buffers in render \nThe time argument should be the running_time of when the timeout should happen and will be adjusted with any latency and offset configured in the sink. \nParameters \nthe sink \nthe running_time to be reached \nReturns a tuple made of \nGstFlowReturn \nGstFlowReturn \n"});