fragment_downloaded_cb({"url": "libgstbase-1.0/javascript/gstbasetransform.html#page-description", "fragment": "Modifications in place input buffer and output buffer are the same thing. \nModifications only to the caps metadata of a buffer \nSpecial output buffer allocations \nSub class settable flags on GstBaseTransform \nGstBaseTransform \nVirtual Methods \nThe element must implement a transform_ip function. \nOutput buffer size must input buffer size \nIf the always_in_place flag is set non writable buffers will be copied and passed to the transform_ip function otherwise a new buffer will be created and the transform function called. \nIncoming writable buffers will be passed to the transform_ip function immediately. \nonly implementing transform_ip and not transform implies always_in_place true \nThe element does not require writable data but non writable buffers should be subbuffered so that the meta information can be replaced. \nElements wishing to operate in this mode should replace the prepare_output_buffer method to create subbuffers of the input buffer and set always_in_place to true \nExample elements \nElements which need to do special allocation of their output buffers beyond allocating output buffers via the negotiated allocator or buffer pool should implement the prepare_output_buffer method. \nExample elements \npassthrough \nalways_in_place \nDetermines whether a non writable buffer will be copied before passing to the transform_ip function. \nImplied true if no transform function is implemented. \nImplied false if ONLY transform function is implemented. \nThe opaque GstBase.BaseTransform data structure. \nLets GstBase.BaseTransform sub classes to know the memory allocator used by the base class and its params. \nUnref the allocator after use it. \nSee if trans is configured as a in_place transform. \nSee if trans is configured as a passthrough transform. \nQueries if the transform will handle QoS. \nInstructs trans to request renegotiation upstream. This function is typically called after properties on the transform were set that influence the input format. \nInstructs trans to renegotiate a new downstream transform on the next buffer. This function is typically called after properties on the transform were set that influence the output format. \nIf gap_aware is false the default output buffers will have the Gst.BufferFlags.prototype.gap flag unset. \nIf set to true the element must handle output buffers with this flag set correctly i.e. it can assume that the buffer contains neutral data but must unset the flag if the output is no neutral data. \nMT safe. \nDetermines whether a non writable buffer will be copied before passing to the transform_ip function. \nMT safe. \nSet passthrough mode for this filter by default. This is mostly useful for filters that do not care about negotiation. \nAlways true for filters which don t implement either a transform or transform_ip method. \nMT safe. \nIf prefer_passthrough is true the default trans will check and prefer passthrough caps from the list of caps returned by the transform_caps vmethod. \nIf set to false the element must order the caps returned from the transform_caps function in such a way that the preferred format is first in the list. This can be interesting for transforms that can do passthrough transforms but prefer to do something else like a capsfilter. \nMT safe. \nEnable or disable QoS handling in the transform. \nMT safe. \nSet the QoS parameters in the transform. This function is called internally when a QOS event is received but subclasses can provide custom information when needed. \nMT safe. \nUpdates the srcpad caps and send the caps downstream. This function can be used by subclasses when they have already negotiated their caps but found a change in them or computed new informations This way they can notify downstream about that change without loosing any buffer. \ngboolean passthrough_on_same_caps \nIf set to TRUE passthrough mode will be automatically enabled if the caps are the same. Set to FALSE by default. \ngboolean transform_ip_on_passthrough \nIf set to TRUE transform_ip will be called in passthrough mode. The passed buffer might not be writable. When FALSE neither transform nor transform_ip will be called in passthrough mode. Set to TRUE by default. \ngpointer _gst_reserved \nThe name of the templates for the sink pad. \nThe name of the templates for the source pad. \n"});