fragment_downloaded_cb({"url": "libgstbase-1.0/javascript/gstadapter.html#gstadapter", "fragment": "GstAdapter \nThis class is for elements that receive buffers in an undesired size. While for example raw video contains one image per buffer the same is not true for a lot of other formats especially those that come directly from a file. So if you have undefined buffer sizes and require a specific size this object is for you. \nAn adapter is created with GstBase.Adapter.prototype.new. It can be freed again with g_object_unref. \nThe theory of operation is like this All buffers received are put into the adapter using GstBase.Adapter.prototype.push and the data is then read back in chunks of the desired size using GstBase.Adapter.prototype.map GstBase.Adapter.prototype.unmap and or gst_adapter_copy not introspectable After the data has been processed it is freed using GstBase.Adapter.prototype.unmap. \nOther methods such as GstBase.Adapter.prototype.take and GstBase.Adapter.prototype.take_buffer combine GstBase.Adapter.prototype.map and GstBase.Adapter.prototype.unmap in one method and are potentially more convenient for some use cases. \nFor example a sink pad s chain function that needs to pass data to a library in byte chunks could be implemented like this \nFor another example a simple element inside GStreamer that uses GstBase.Adapter is the libvisual element. \nAn element using GstBase.Adapter in its sink pad chain function should ensure that when the FLUSH_STOP event is received that any queued data is cleared using GstBase.Adapter.prototype.clear. Data should also be cleared or processed on EOS and when changing state from Gst.State.prototype.paused to Gst.State.prototype.ready. \nAlso check the GST_BUFFER_FLAG_DISCONT flag on the buffer. Some elements might need to clear the adapter after a discontinuity. \nThe adapter will keep track of the timestamps of the buffers that were pushed. The last seen timestamp before the current position can be queried with GstBase.Adapter.prototype.prev_pts. This function can optionally return the number of bytes between the start of the buffer that carried the timestamp and the current adapter position. The distance is useful when dealing with for example raw audio samples because it allows you to calculate the timestamp of the current adapter position by using the last seen timestamp and the amount of bytes since. Additionally the GstBase.Adapter.prototype.prev_pts_at_offset can be used to determine the last seen timestamp at a particular offset in the adapter. \nThe adapter will also keep track of the offset of the buffers GST_BUFFER_OFFSET that were pushed. The last seen offset before the current position can be queried with GstBase.Adapter.prototype.prev_offset. This function can optionally return the number of bytes between the start of the buffer that carried the offset and the current adapter position. \nAdditionally the adapter also keeps track of the PTS DTS and buffer offset at the last discontinuity which can be retrieved with GstBase.Adapter.prototype.pts_at_discont GstBase.Adapter.prototype.dts_at_discont and GstBase.Adapter.prototype.offset_at_discont. The number of bytes that were consumed since then can be queried with GstBase.Adapter.prototype.distance_from_discont. \nA last thing to note is that while GstBase.Adapter is pretty optimized merging buffers still might be an operation that requires a malloc and memcpy operation and these operations are not the fastest. Because of this some functions like GstBase.Adapter.prototype.available_fast are provided to help speed up such cases should you want to. To avoid repeated memory allocations gst_adapter_copy not introspectable can be used to copy data into a statically allocated user provided buffer. \nGstBase.Adapter is not MT safe. All operations on an adapter must be serialized by the caller. This is not normally a problem however as the normal use case of GstBase.Adapter is inside one pad s chain function in which case access is serialized via the pad s STREAM_LOCK. \nNote that GstBase.Adapter.prototype.push takes ownership of the buffer passed. Use gst_buffer_ref before pushing it into the adapter if you still want to access the buffer later. The adapter will never modify the data in the buffer pushed in it. \n"});