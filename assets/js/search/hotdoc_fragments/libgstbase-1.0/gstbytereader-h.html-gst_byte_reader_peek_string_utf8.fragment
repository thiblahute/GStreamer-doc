fragment_downloaded_cb({"url": "libgstbase-1.0/gstbytereader-h.html#gst_byte_reader_peek_string_utf8", "fragment": "GstBase.prototype.peek_string_utf8 \ngst_byte_reader_peek_string_utf8 \nGstBase.ByteReader.PeekStringUtf8 \nGstBase.ByteReader.peek_string_utf8 \nReturns a constant pointer to the current data position if there is a NUL terminated string in the data this could be just a NUL terminator The current position will be maintained. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nParameters \na GstBase.ByteReader instance \nReturns a tuple made of \ntrue if a string could be skipped false otherwise. \ntrue if a string could be skipped false otherwise. \nReturns a constant pointer to the current data position if there is a NUL terminated string in the data this could be just a NUL terminator The current position will be maintained. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nParameters \na GstByteReader instance \naddress of a gchar pointer variable in which to store the result \nTRUE if a string could be skipped FALSE otherwise. \nReturns a constant pointer to the current data position if there is a NUL terminated string in the data this could be just a NUL terminator The current position will be maintained. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nParameters \naddress of a char pointer variable in which to store the result \ntrue if a string could be skipped false otherwise. \nReturns a constant pointer to the current data position if there is a NUL terminated string in the data this could be just a NUL terminator The current position will be maintained. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nParameters \na GstBase.ByteReader instance \nReturns a tuple made of \nTrue if a string could be skipped False otherwise. \nTrue if a string could be skipped False otherwise. \n"});