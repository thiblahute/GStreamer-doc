fragment_downloaded_cb({"url": "libgstbase-1.0/c/gstbytereader-h.html#page-description", "fragment": "Returns the remaining number of bytes of a GstByteReader instance. \nRead an unsigned bit little endian integer into val and update the current position. \nRead an unsigned bit big endian integer into val and update the current position. \nRead an unsigned bit little endian integer into val and update the current position. \nRead an unsigned bit big endian integer into val and update the current position. \nRead an unsigned bit little endian integer into val and update the current position. \nRead an unsigned bit big endian integer into val and update the current position. \nRead an unsigned bit little endian integer into val and update the current position. \nRead an unsigned bit big endian integer into val and update the current position. \nRead an unsigned bit little endian integer into val but keep the current position. \nRead a signed bit little endian integer into val but keep the current position. \nRead an unsigned bit big endian integer into val but keep the current position. \nRead a signed bit big endian integer into val but keep the current position. \nRead an unsigned bit little endian integer into val but keep the current position. \nRead a signed bit little endian integer into val but keep the current position. \nRead an unsigned bit big endian integer into val but keep the current position. \nRead a signed bit big endian integer into val but keep the current position. \nRead an unsigned bit little endian integer into val but keep the current position. \nRead a signed bit little endian integer into val but keep the current position. \nRead an unsigned bit big endian integer into val but keep the current position. \nRead a signed bit big endian integer into val but keep the current position. \nRead an unsigned bit little endian integer into val but keep the current position. \nRead a signed bit little endian integer into val but keep the current position. \nRead an unsigned bit big endian integer into val but keep the current position. \nRead a signed bit big endian integer into val but keep the current position. \nRead a bit little endian floating point value into val and update the current position. \nRead a bit big endian floating point value into val and update the current position. \nRead a bit little endian floating point value into val and update the current position. \nRead a bit big endian floating point value into val and update the current position. \nRead a bit little endian floating point value into val but keep the current position. \nRead a bit big endian floating point value into val but keep the current position. \nRead a bit little endian floating point value into val but keep the current position. \nRead a bit big endian floating point value into val but keep the current position. \nFree function g_free \nReturns a newly allocated copy of the current data position if there is a NUL terminated UTF string in the data this could be an empty string as well and advances the current position. \nNo input checking for valid UTF is done. This function is endianness agnostic you should not assume the UTF characters are in host endianness. \nThis function will fail if no NUL terminator was found in in the data. \nNote there is no peek or get variant of this function to ensure correct byte alignment of the UTF string. \nFree function g_free \nReturns a newly allocated copy of the current data position if there is a NUL terminated UTF string in the data this could be an empty string as well and advances the current position. \nNo input checking for valid UTF is done. This function is endianness agnostic you should not assume the UTF characters are in host endianness. \nThis function will fail if no NUL terminator was found in in the data. \nNote there is no peek or get variant of this function to ensure correct byte alignment of the UTF string. \nFree function g_free \nFIXME Reads copies a NUL terminated string in the GstByteReader instance advancing the current position to the byte after the string. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. No input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nReturns a constant pointer to the current data position if there is a NUL terminated string in the data this could be just a NUL terminator advancing the current position to the byte after the string. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nInitializes a GstByteReader sub reader instance to contain size bytes of data from the current position of reader. This is useful to read chunked formats and make sure that one doesn t read beyond the size of the sub chunk. \nUnlike gst_byte_reader_peek_sub_reader this function also modifies the position of reader and moves it forward by size bytes. \nScan for pattern pattern with applied mask mask in the byte reader data starting from offset offset relative to the current position. \nThe bytes in pattern and mask are interpreted left to right regardless of endianness. All four bytes of the pattern must be present in the byte reader data for it to match even if the first or last bytes are masked out. \nIt is an error to call this function without making sure that there is enough data offset size bytes in the byte reader. \nScan for pattern pattern with applied mask mask in the byte reader data starting from offset offset relative to the current position. \nThe bytes in pattern and mask are interpreted left to right regardless of endianness. All four bytes of the pattern must be present in the byte reader data for it to match even if the first or last bytes are masked out. \nIt is an error to call this function without making sure that there is enough data offset size bytes in the byte reader. \nReturns a constant pointer to the current data position if there is a NUL terminated string in the data this could be just a NUL terminator The current position will be maintained. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nInitializes a GstByteReader sub reader instance to contain size bytes of data from the current position of reader. This is useful to read chunked formats and make sure that one doesn t read beyond the size of the sub chunk. \nUnlike gst_byte_reader_get_sub_reader this function does not modify the current position of reader. \nSkips a NUL terminated UTF string in the GstByteReader instance advancing the current position to the byte after the string. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nSkips a NUL terminated UTF string in the GstByteReader instance advancing the current position to the byte after the string. \nNo input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \nSkips a NUL terminated string in the GstByteReader instance advancing the current position to the byte after the string. This will work for any NUL terminated string with a character width of bits so ASCII UTF ISO N etc. No input checking for valid UTF is done. \nThis function will fail if no NUL terminator was found in in the data. \n"});