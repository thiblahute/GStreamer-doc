fragment_downloaded_cb({"url": "libgstbase-1.0/c/gstbasesink.html#gstbasesink", "fragment": "GstBaseSink \nGstBaseSink is the base class for sink elements in GStreamer such as xvimagesink or filesink. It is a layer on top of GstElement that provides a simplified interface to plugin writers. GstBaseSink handles many details for you for example preroll clock synchronization state changes activation in push or pull mode and queries. \nIn most cases when writing sink elements there is no need to implement class methods from GstElement or to set functions on pads because the GstBaseSink infrastructure should be sufficient. \nGstBaseSink provides support for exactly one sink pad which should be named sink A sink implementation subclass of GstBaseSink should install a pad template in its class_init function like so \n\nGstBaseSink will handle the prerolling correctly. This means that it will return GST_STATE_CHANGE_ASYNC from a state change to PAUSED until the first buffer arrives in this element. The base class will call the GstBaseSinkClass.preroll vmethod with this preroll buffer and will then commit the state change to the next asynchronously pending state. \nWhen the element is set to PLAYING GstBaseSink will synchronise on the clock using the times returned from GstBaseSinkClass.get_times If this function returns GST_CLOCK_TIME_NONE for the start time no synchronisation will be done. Synchronisation can be disabled entirely by setting the object GstBaseSink sync property to FALSE. \nAfter synchronisation the virtual method GstBaseSinkClass.render will be called. Subclasses should minimally implement this method. \nSubclasses that synchronise on the clock in the GstBaseSinkClass.render method are supported as well. These classes typically receive a buffer in the render method and can then potentially block on the clock while rendering. A typical example is an audiosink. These subclasses can use gst_base_sink_wait_preroll to perform the blocking wait. \nUpon receiving the EOS event in the PLAYING state GstBaseSink will wait for the clock to reach the time indicated by the stop time of the last GstBaseSinkClass.get_times call before posting an EOS message. When the element receives EOS in PAUSED preroll completes the event is queued and an EOS message is posted when going to PLAYING. \nGstBaseSink will internally use the GST_EVENT_SEGMENT events to schedule synchronisation and clipping of buffers. Buffers that fall completely outside of the current segment are dropped. Buffers that fall partially in the segment are rendered and prerolled Subclasses should do any subbuffer clipping themselves when needed. \nGstBaseSink will by default report the current playback position in GST_FORMAT_TIME based on the current clock time and segment information. If no clock has been set on the element the query will be forwarded upstream. \nThe GstBaseSinkClass.set_caps function will be called when the subclass should configure itself to process a specific media type. \nThe GstBaseSinkClass.start and GstBaseSinkClass.stop virtual methods will be called when resources should be allocated. Any GstBaseSinkClass.preroll GstBaseSinkClass.render and GstBaseSinkClass.set_caps function will be called between the GstBaseSinkClass.start and GstBaseSinkClass.stop calls. \nThe GstBaseSinkClass.event virtual method will be called when an event is received by GstBaseSink. Normally this method should only be overridden by very specific elements such as file sinks which need to handle the newsegment event specially. \nThe GstBaseSinkClass.unlock method is called when the elements should unblock any blocking operations they perform in the GstBaseSinkClass.render method. This is mostly useful when the GstBaseSinkClass.render method performs a blocking write on a file descriptor for example. \nThe GstBaseSink max lateness property affects how the sink deals with buffers that arrive too late in the sink. A buffer arrives too late in the sink when the presentation time as a combination of the last segment buffer timestamp and element base_time plus the duration is before the current time of the clock. If the frame is later than max lateness the sink will drop the buffer without calling the render method. This feature is disabled if sync is disabled the GstBaseSinkClass.get_times method does not return a valid start time or max lateness is set to the default Subclasses can use gst_base_sink_set_max_lateness to configure the max lateness value. \nThe GstBaseSink qos property will enable the quality of service features of the basesink which gather statistics about the real time performance of the clock synchronisation. For each buffer received in the sink statistics are gathered and a QOS event is sent upstream with these numbers. This information can then be used by upstream elements to reduce their processing rate for example. \nThe GstBaseSink async property can be used to instruct the sink to never perform an ASYNC state change. This feature is mostly usable when dealing with non synchronized streams or sparse streams. \n"});