fragment_downloaded_cb({"url": "libgstbase-1.0/c/gstbasetransform.html#GstBaseTransformClass", "fragment": "Subclasses can override any of the available virtual methods or not as needed. At minimum either transform or transform_ip need to be overridden. If the element can overwrite the input data with the results data is of the same type and quantity it should provide transform_ip. \nGstBaseTransformClass.parent_class \nElement parent class \nGstBaseTransformClass.passthrough_on_same_caps \nIf set to TRUE passthrough mode will be automatically enabled if the caps are the same. Set to FALSE by default. \nGstBaseTransformClass.transform_ip_on_passthrough \nIf set to TRUE transform_ip will be called in passthrough mode. The passed buffer might not be writable. When FALSE neither transform nor transform_ip will be called in passthrough mode. Set to TRUE by default. \nGstBaseTransformClass.transform_caps \nOptional. Given the pad in this direction and the given caps what caps are allowed on the other pad in this element \nGstBaseTransformClass.fixate_caps \nOptional. Given the pad in this direction and the given caps fixate the caps on the other pad. The function takes ownership of othercaps and returns a fixated version of othercaps. othercaps is not guaranteed to be writable. \nGstBaseTransformClass.accept_caps \nOptional. Subclasses can override this method to check if caps can be handled by the element. The default implementation might not be the most optimal way to check this in all cases. \nGstBaseTransformClass.set_caps \nallows the subclass to be notified of the actual caps set. \nGstBaseTransformClass.query \nOptional. Handle a requested query. Subclasses that implement this should must chain up to the parent if they didn t handle the query \nGstBaseTransformClass.filter_meta \nReturn TRUE if the metadata API should be proposed in the upstream allocation query. The default implementation is NULL and will cause all metadata to be removed. \nGstBaseTransformClass.propose_allocation \nPropose buffer allocation parameters for upstream elements. This function must be implemented if the element reads or writes the buffer content. The query that was passed to the decide_allocation is passed in this method or NULL when the element is in passthrough mode The default implementation will pass the query downstream when in passthrough mode and will copy all the filtered metadata API in non passthrough mode. \nGstBaseTransformClass.transform_size \nOptional. Given the size of a buffer in the given direction with the given caps calculate the size in bytes of a buffer on the other pad with the given other caps. The default implementation uses get_unit_size and keeps the number of units the same. \nGstBaseTransformClass.get_unit_size \nRequired if the transform is not in place. get the size in bytes of one unit for the given caps. \nGstBaseTransformClass.start \nOptional. Called when the element starts processing. Allows opening external resources. \nGstBaseTransformClass.src_event \nOptional. Event handler on the source pad. The default implementation handles the event and forwards it upstream. \nGstBaseTransformClass.prepare_output_buffer \nOptional. Subclasses can override this to do their own allocation of output buffers. Elements that only do analysis can return a subbuffer or even just return a reference to the input buffer if in passthrough mode The default implementation will use the negotiated allocator or bufferpool and transform_size to allocate an output buffer or it will return the input buffer in passthrough mode. \nGstBaseTransformClass.copy_metadata \nOptional. Copy the metadata from the input buffer to the output buffer. The default implementation will copy the flags timestamps and offsets of the buffer. \nGstBaseTransformClass.transform_meta \nOptional. Transform the metadata on the input buffer to the output buffer. By default this method copies all meta without tags. subclasses can implement this method and return TRUE if the metadata is to be copied. \nGstBaseTransformClass.before_transform \nOptional. This method is called right before the base class will start processing. Dynamic properties or other delayed configuration could be performed in this method. \nGstBaseTransformClass.transform \nRequired if the element does not operate in place. Transforms one incoming buffer to one outgoing buffer. The function is allowed to change size timestamp duration of the outgoing buffer. \nGstBaseTransformClass.transform_ip \nRequired if the element operates in place. Transform the incoming buffer in place. \nGstBaseTransformClass.submit_input_buffer \nFunction which accepts a new input buffer and pre processes it. The default implementation performs caps re negotiation then QoS if needed and places the input buffer into the queued_buf member variable. If the buffer is dropped due to QoS it returns GST_BASE_TRANSFORM_FLOW_DROPPED. If this input buffer is not contiguous with any previous input buffer then is_discont is set to TRUE. Since \nGstBaseTransformClass.generate_output \nCalled after each new input buffer is submitted repeatedly until it either generates an error or fails to generate an output buffer. The default implementation takes the contents of the queued_buf variable generates an output buffer if needed by calling the class prepare_output_buffer and then calls either transform or transform_ip. Elements that don t do to transformations on input to output buffers can either return GST_BASE_TRANSFORM_FLOW_DROPPED or simply not generate an output buffer until they are ready to do so. Since \nGstBaseTransformClass._gst_reserved \n"});