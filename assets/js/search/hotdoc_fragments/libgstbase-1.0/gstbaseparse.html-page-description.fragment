fragment_downloaded_cb({"url": "libgstbase-1.0/gstbaseparse.html#page-description", "fragment": "This base class is for parser elements that process data and splits it into separate audio video whatever frames. \nIt provides for \nThe purpose of this base class is to provide the basic functionality of a parser and share a lot of rather complex code. \nGstBaseParse calls start to inform subclass that data processing is about to start now. \nGstBaseParse class calls set_sink_caps to inform the subclass about incoming sinkpad caps. Subclass could already set the srcpad caps accordingly but this might be delayed until calling gst_base_parse_finish_frame with a non queued frame. \nAt least at this point subclass needs to tell the GstBaseParse class how big data chunks it wants to receive min_frame_size It can do this with gst_base_parse_set_min_frame_size. \nGstBaseParse class sets up appropriate data passing mode pull push and starts to process the data. \nGstBaseParse gathers at least min_frame_size bytes of data either by pulling it from upstream or collecting buffers in an internal GstAdapter. \nA buffer of at least min_frame_size bytes is passed to subclass with handle_frame. Subclass checks the contents and can optionally return GST_FLOW_OK along with an amount of data to be skipped to find a valid frame which will result in a subsequent DISCONT If otherwise the buffer does not hold a complete frame handle_frame can merely return and will be called again when additional data is available. In push mode this amounts to an additional input buffer thus minimal additional latency in pull mode this amounts to some arbitrary reasonable buffer size increase. Of course gst_base_parse_set_min_frame_size could also be used if a very specific known amount of additional data is required. If however the buffer holds a complete valid frame it can pass the size of this frame to gst_base_parse_finish_frame. If acting as a converter it can also merely indicate consumed input data while simultaneously providing custom output data. Note that baseclass performs some processing such as tracking overall consumed data rate versus duration for each finished frame but other state is only updated upon each call to handle_frame such as tracking upstream input timestamp \nSubclass is also responsible for setting the buffer metadata e.g. buffer timestamp and duration or keyframe if applicable although the latter can also be done by GstBaseParse if it is appropriately configured see below Frame is provided with timestamp derived from upstream as much as generally possible duration obtained from configuration see below and offset if meaningful in pull mode \nNote that check_valid_frame might receive any small amount of input data when leftover data is being drained e.g. at EOS \nAs part of finish frame processing just prior to actually pushing the buffer in question it is passed to pre_push_frame which gives subclass yet one last chance to examine buffer metadata or to send some custom tag events or to perform custom segment filtering. \nDuring the parsing process GstBaseParseClass will handle both srcpad and sinkpad events. They will be passed to subclass if event or src_event callbacks have been provided. \nSubclass is responsible for providing pad template caps for source and sink pads. The pads need to be named sink and src It also needs to set the fixed caps on srcpad when the format is ensured e.g. when base class calls subclass set_sink_caps function \nThis base class uses GST_FORMAT_DEFAULT as a meaning of frames. So subclass conversion routine needs to know that conversion from GST_FORMAT_TIME to GST_FORMAT_DEFAULT must return the frame number that can be found from the given byte position. \nGstBaseParse uses subclasses conversion methods also for seeking or otherwise uses its own default one see also below \nSubclass start and stop functions will be called to inform the beginning and end of data processing. \nThings that subclass need to take care of \nProvide pad templates \nFixate the source pad caps when appropriate \nInform base class how big data chunks should be retrieved. This is done with gst_base_parse_set_min_frame_size function. \nExamine data chunks passed to subclass with handle_frame and pass proper frame s to gst_base_parse_finish_frame and setting src pad caps and timestamps on frame. \nProvide conversion functions \nUpdate the duration information with gst_base_parse_set_duration \nOptionally passthrough using gst_base_parse_set_passthrough \nConfigure various baseparse parameters using gst_base_parse_set_average_bitrate gst_base_parse_set_syncable and gst_base_parse_set_frame_rate. \nIn particular if subclass is unable to determine a duration but parsing or specs yields a frames per seconds rate then this can be provided to GstBaseParse to enable it to cater for buffer time metadata which will be taken from upstream as much as possible Internally keeping track of frame durations and respective sizes that have been pushed provides GstBaseParse with an estimated bitrate. A default convert used if not overridden will then use these rates to perform obvious conversions. These rates are also used to update estimated duration at regular frame intervals. \n"});