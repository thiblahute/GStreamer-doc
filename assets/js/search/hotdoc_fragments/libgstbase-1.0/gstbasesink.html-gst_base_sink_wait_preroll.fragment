fragment_downloaded_cb({"url": "libgstbase-1.0/gstbasesink.html#gst_base_sink_wait_preroll", "fragment": "gst_base_sink_wait_preroll \nGstBase.BaseSink.wait_preroll \nGstBase.prototype.wait_preroll \nIf the render method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to render the remaining data. \nIf the render method can block on something else than the clock it must also be ready to unblock immediately on the unlock method and cause the render method to immediately call this function. In this case the subclass must be prepared to continue rendering where it left off if this function returns GST_FLOW_OK. \nThis function will block until a state change to PLAYING happens in which case this function returns GST_FLOW_OK or the processing must be stopped due to a state change to READY or a FLUSH event in which case this function returns GST_FLOW_FLUSHING \nThis function should only be called with the PREROLL_LOCK held like in the render function. \nParameters \nthe sink \nGST_FLOW_OK if the preroll completed and processing can continue. Any other return value should be returned from the render vmethod. \nIf the render method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to render the remaining data. \nIf the render method can block on something else than the clock it must also be ready to unblock immediately on the unlock method and cause the render method to immediately call this function. In this case the subclass must be prepared to continue rendering where it left off if this function returns Gst.FlowReturn.OK. \nThis function will block until a state change to PLAYING happens in which case this function returns Gst.FlowReturn.OK or the processing must be stopped due to a state change to READY or a FLUSH event in which case this function returns Gst.FlowReturn.FLUSHING \nThis function should only be called with the PREROLL_LOCK held like in the render function. \nParameters \nthe sink \nGst.FlowReturn.OK if the preroll completed and processing can continue. Any other return value should be returned from the render vmethod. \nIf the render method performs its own synchronisation against the clock it must unblock when going from PLAYING to the PAUSED state and call this method before continuing to render the remaining data. \nIf the render method can block on something else than the clock it must also be ready to unblock immediately on the unlock method and cause the render method to immediately call this function. In this case the subclass must be prepared to continue rendering where it left off if this function returns Gst.FlowReturn.OK. \nThis function will block until a state change to PLAYING happens in which case this function returns Gst.FlowReturn.OK or the processing must be stopped due to a state change to READY or a FLUSH event in which case this function returns Gst.FlowReturn.FLUSHING \nThis function should only be called with the PREROLL_LOCK held like in the render function. \nParameters \nthe sink \nGst.FlowReturn.OK if the preroll completed and processing can continue. Any other return value should be returned from the render vmethod. \n"});