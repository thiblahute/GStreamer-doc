fragment_downloaded_cb({"url": "libgstbase-1.0/python/gstbasesink.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstbasesink.h\">\n<h1 id=\"gstbasesink\">GstBaseSink</h1><p><a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> is the base class for sink elements in GStreamer, such as\nxvimagesink or filesink. It is a layer on top of <a href=\"../../libgstreamer-1.0/c/gstelement.html#GstElement\">Gst.Element</a> that provides a\nsimplified interface to plugin writers. <a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> handles many details\nfor you, for example: preroll, clock synchronization, state changes,\nactivation in push or pull mode, and queries.</p>\n<p>In most cases, when writing sink elements, there is no need to implement\nclass methods from <a href=\"../../libgstreamer-1.0/c/gstelement.html#GstElement\">Gst.Element</a> or to set functions on pads, because the\n<a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> infrastructure should be sufficient.</p>\n<p><a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> provides support for exactly one sink pad, which should be\nnamed \"sink\". A sink implementation (subclass of <a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a>) should\ninstall a pad template in its class_init function, like so:</p>\n<pre><code class=\"language-[&lt;!--\"> static void\n my_element_class_init (GstMyElementClass *klass)\n {\n   GstElementClass *gstelement_class = GST_ELEMENT_CLASS (klass);\n\n   // sinktemplate should be a #GstStaticPadTemplate with direction\n   // %GST_PAD_SINK and name \"sink\"\n   gst_element_class_add_static_pad_template (gstelement_class, &amp;amp;sinktemplate);\n\n   gst_element_class_set_static_metadata (gstelement_class,\n       \"Sink name\",\n       \"Sink\",\n       \"My Sink element\",\n       \"The author &lt;my.sink@my.email&gt;\");\n }\n</code></pre>\n<p><a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> will handle the prerolling correctly. This means that it will\nreturn <a href=\"../../libgstreamer-1.0/c/gstelement.html#GST_STATE_CHANGE_ASYNC\">Gst.StateChangeReturn.async</a> from a state change to PAUSED until the first\nbuffer arrives in this element. The base class will call the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.preroll\">GstBaseSinkClass.preroll (not introspectable)</a>() vmethod with this preroll buffer and will then\ncommit the state change to the next asynchronously pending state.</p>\n<p>When the element is set to PLAYING, <a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> will synchronise on the\nclock using the times returned from GstBaseSinkClass.get_times. If this\nfunction returns <a href=\"../../libgstreamer-1.0/c/gstclock.html#GST_CLOCK_TIME_NONE\">Gst.CLOCK_TIME_NONE</a> for the start time, no synchronisation\nwill be done. Synchronisation can be disabled entirely by setting the object\n<a href=\"gstbasesink.html#GstBaseSink:sync\">sync</a> property to <a href=\"https://docs.python.org/2/library/constants.html#False\">False</a>.</p>\n<p>After synchronisation the virtual method <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.render\">GstBaseSinkClass.render (not introspectable)</a>() will be\ncalled. Subclasses should minimally implement this method.</p>\n<p>Subclasses that synchronise on the clock in the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.render\">GstBaseSinkClass.render (not introspectable)</a>()\nmethod are supported as well. These classes typically receive a buffer in\nthe render method and can then potentially block on the clock while\nrendering. A typical example is an audiosink.\nThese subclasses can use <a href=\"gstbasesink.html#gst_base_sink_wait_preroll\">GstBase.BaseSink.wait_preroll</a> to perform the\nblocking wait.</p>\n<p>Upon receiving the EOS event in the PLAYING state, <a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> will wait\nfor the clock to reach the time indicated by the stop time of the last\nGstBaseSinkClass.get_times call before posting an EOS message. When the\nelement receives EOS in PAUSED, preroll completes, the event is queued and an\nEOS message is posted when going to PLAYING.</p>\n<p><a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> will internally use the <a href=\"../../libgstreamer-1.0/c/gstevent.html#GST_EVENT_SEGMENT\">Gst.EventType.segment</a> events to schedule\nsynchronisation and clipping of buffers. Buffers that fall completely outside\nof the current segment are dropped. Buffers that fall partially in the\nsegment are rendered (and prerolled). Subclasses should do any subbuffer\nclipping themselves when needed.</p>\n<p><a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a> will by default report the current playback position in\n<a href=\"../../libgstreamer-1.0/c/gstformat.html#GST_FORMAT_TIME\">Gst.Format.time</a> based on the current clock time and segment information.\nIf no clock has been set on the element, the query will be forwarded\nupstream.</p>\n<p>The GstBaseSinkClass.set_caps function will be called when the subclass\nshould configure itself to process a specific media type.</p>\n<p>The <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.start\">GstBaseSinkClass.start (not introspectable)</a>() and <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.stop\">GstBaseSinkClass.stop (not introspectable)</a>() virtual methods\nwill be called when resources should be allocated. Any\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.preroll\">GstBaseSinkClass.preroll (not introspectable)</a>(), <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.render\">GstBaseSinkClass.render (not introspectable)</a>() and\nGstBaseSinkClass.set_caps function will be called between the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.start\">GstBaseSinkClass.start (not introspectable)</a>() and <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.stop\">GstBaseSinkClass.stop (not introspectable)</a>() calls.</p>\n<p>The <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.event\">GstBaseSinkClass.event (not introspectable)</a>() virtual method will be called when an event is\nreceived by <a href=\"gstbasesink.html#GstBaseSink\">GstBase.BaseSink</a>. Normally this method should only be overridden by\nvery specific elements (such as file sinks) which need to handle the\nnewsegment event specially.</p>\n<p>The <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.unlock\">GstBaseSinkClass.unlock (not introspectable)</a>() method is called when the elements should\nunblock any blocking operations they perform in the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.render\">GstBaseSinkClass.render (not introspectable)</a>() method. This is mostly useful when the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseSink.html#GstBaseSinkClass.render\">GstBaseSinkClass.render (not introspectable)</a>() method performs a blocking write on a file\ndescriptor, for example.</p>\n<p>The <a href=\"gstbasesink.html#GstBaseSink:max-lateness\">max-lateness</a> property affects how the sink deals with\nbuffers that arrive too late in the sink. A buffer arrives too late in the\nsink when the presentation time (as a combination of the last segment, buffer\ntimestamp and element base_time) plus the duration is before the current\ntime of the clock.\nIf the frame is later than max-lateness, the sink will drop the buffer\nwithout calling the render method.\nThis feature is disabled if sync is disabled, the\nGstBaseSinkClass.get_times method does not return a valid start time or\nmax-lateness is set to -1 (the default).\nSubclasses can use <a href=\"gstbasesink.html#gst_base_sink_set_max_lateness\">GstBase.BaseSink.set_max_lateness</a> to configure the\nmax-lateness value.</p>\n<p>The <a href=\"gstbasesink.html#GstBaseSink:qos\">qos</a> property will enable the quality-of-service features of\nthe basesink which gather statistics about the real-time performance of the\nclock synchronisation. For each buffer received in the sink, statistics are\ngathered and a QOS event is sent upstream with these numbers. This\ninformation can then be used by upstream elements to reduce their processing\nrate, for example.</p>\n<p>The <a href=\"gstbasesink.html#GstBaseSink:async\">async</a> property can be used to instruct the sink to never\nperform an ASYNC state change. This feature is mostly usable when dealing\nwith non-synchronized streams or sparse streams.</p>\n\n</div>\n\n\n\n"});