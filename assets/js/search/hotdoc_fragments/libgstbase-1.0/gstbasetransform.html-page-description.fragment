fragment_downloaded_cb({"url": "libgstbase-1.0/gstbasetransform.html#page-description", "fragment": "This base class is for filter elements that process data. Elements that are suitable for implementation using GstBaseTransform are ones where the size and caps of the output is known entirely from the input caps and buffer sizes. These include elements that directly transform one buffer into another modify the contents of a buffer in place as well as elements that collate multiple input buffers into one output buffer or that expand one input buffer into multiple output buffers. See below for more concrete use cases. \nIt provides for \none sinkpad and one srcpad \nPossible formats on sink and source pad implemented with custom transform_caps function. By default uses same format on sink and source. \nHandles state changes \nDoes flushing \nPush mode \nPull mode if the sub class transform can operate on arbitrary data \nElement has no interest in modifying the buffer. It may want to inspect it in which case the element should have a transform_ip function. If there is no transform_ip function in passthrough mode the buffer is pushed intact. \nThe passthrough_on_same_caps variable will automatically set unset passthrough based on whether the element negotiates the same caps on both pads. \npassthrough_on_same_caps on an element that doesn t implement a transform_caps function is useful for elements that only inspect data such as level \nExample elements \nThe element must implement a transform_ip function. \nOutput buffer size must input buffer size \nIf the always_in_place flag is set non writable buffers will be copied and passed to the transform_ip function otherwise a new buffer will be created and the transform function called. \nIncoming writable buffers will be passed to the transform_ip function immediately. \nonly implementing transform_ip and not transform implies always_in_place TRUE \nThe element does not require writable data but non writable buffers should be subbuffered so that the meta information can be replaced. \nElements wishing to operate in this mode should replace the prepare_output_buffer method to create subbuffers of the input buffer and set always_in_place to TRUE \nExample elements \nElements which need to do special allocation of their output buffers beyond allocating output buffers via the negotiated allocator or buffer pool should implement the prepare_output_buffer method. \nExample elements \npassthrough \nalways_in_place \nDetermines whether a non writable buffer will be copied before passing to the transform_ip function. \nImplied TRUE if no transform function is implemented. \nImplied FALSE if ONLY transform function is implemented. \n"});