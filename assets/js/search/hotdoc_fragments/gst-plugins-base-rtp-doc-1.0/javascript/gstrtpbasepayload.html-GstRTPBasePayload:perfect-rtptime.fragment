fragment_downloaded_cb({"url": "gst-plugins-base-rtp-doc-1.0/javascript/gstrtpbasepayload.html#GstRTPBasePayload:perfect-rtptime", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GstRTPBasePayload:perfect-rtptime\">\n\t\t<h3 class=\"method\" id=\"perfectrtptime\">\n\t<span><code>perfect-rtptime</code></span>\n</h3>\n\n\t\t<pre class=\"property_signature\">\n\u201cperfect-rtptime\u201d <span class=\"type\"><a title=\"Number\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/Number\">Number</a></span>\n</pre>\n\n<p>Try to use the offset fields to generate perfect RTP timestamps. When this\noption is disabled, RTP timestamps are generated from GST_BUFFER_PTS of\neach payloaded buffer. The PTSes of buffers may not necessarily increment\nwith the amount of data in each input buffer, consider e.g. the case where\nthe buffer arrives from a network which means that the PTS is unrelated to\nthe amount of data. Because the RTP timestamps are generated from\nGST_BUFFER_PTS this can result in RTP timestamps that also don't increment\nwith the amount of data in the payloaded packet. To circumvent this it is\npossible to set the perfect rtptime option enabled. When this option is\nenabled the payloader will increment the RTP timestamps based on\nGST_BUFFER_OFFSET which relates to the amount of data in each packet\nrather than the GST_BUFFER_PTS of each buffer and therefore the RTP\ntimestamps will more closely correlate with the amount of data in each\nbuffer. Currently GstRTPBasePayload is limited to handling perfect RTP\ntimestamps for audio streams.</p>\n\n\n<p>\n\tFlags :\t\n\t\n\t\t\n\t\t\t\tRead\n\t\t\t\n\t\t\t\t/\t\t\n\t\t\t\tWrite\n\t\t\t\n</p>\n\n</div>\n\n\n\n"});