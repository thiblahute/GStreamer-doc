fragment_downloaded_cb({"url": "libgstcheck-1.0/javascript/gstharness.html#page-description", "fragment": "A simple buffer in buffer out example \nGstHarness \nAnother main feature of the GstCheck.Harness is its integration with the GstCheck.TestClock. Operating the GstCheck.TestClock can be very challenging but GstCheck.Harness simplifies some of the most desired actions a lot like wanting to manually advance the clock while at the same time releasing a Gst.ClockID that is waiting with functions like GstCheck.Harness.prototype.crank_single_clock_wait. \nGstCheck.Harness also supports sub harnesses as a way of generating and validating data. A sub harness is another GstCheck.Harness that is managed by the parent harness and can either be created by using the standard gst_harness_new type functions directly on the GstHarness src_harness or using the much more convenient GstCheck.Harness.prototype.add_src or GstCheck.Harness.prototype.add_sink_parse. If you have a decoder element you want to test like vp8dec it can be very useful to add a src harness with both a src element videotestsrc and an encoder vp8enc to feed the decoder data with different configurations by simply doing \nand then feeding it data with \nLinks the specifed Gst.Pad the GstHarness srcpad. \nMT safe. \nLinks the specifed Gst.Pad the GstHarness sinkpad. This can be useful if perhaps the srcpad did not exist at the time of creating the harness like a demuxer that provides a sometimes pad after receiving data. \nMT safe. \nA convenience function to allows you to call gst_pad_add_probe on a Gst.Pad of a Gst.Element that are residing inside the GstCheck.Harness by using normal gst_pad_add_probe syntax \nMT safe. \nSimilar to gst_harness_add_sink_harness this is a convenience to directly create a sink harness using the sink_element_name name specified. \nMT safe. \nSimilar to gst_harness_add_src this allows you to send the data coming out of your harnessed Gst.Element to a sink element allowing to test different responses the element output might create in sink elements. An example might be an existing sink providing some analytical data on the input it receives that can be useful to your testing. If the goal is to test a sink element itself this is better acheived using gst_harness_new directly on the sink. \nIf a sink harness already exists it will be replaced. \nMT safe. \nSimilar to gst_harness_add_sink this allows you to specify a launch line instead of just an element name. See gst_harness_add_src_parse for details. \nMT safe. \nSimilar to gst_harness_add_src_harness this is a convenience to directly create a src harness using the src_element_name name specified. \nMT safe. \nA src harness is a great way of providing the GstCheck.Harness with data. By adding a src type Gst.Element it is then easy to use functions like gst_harness_push_from_src or gst_harness_src_crank_and_push_many to provide your harnessed element with input. The has_clock_wait variable is a greate way to control you src element with in that you can have it produce a buffer for you by simply cranking the clock and not have it spin out of control producing buffers as fast as possible. \nIf a src harness already exists it will be replaced. \nMT safe. \nSimilar to gst_harness_add_src this allows you to specify a launch line which can be useful for both having more then one Gst.Element acting as your src Like a src producing raw buffers and then an encoder providing encoded data but also by allowing you to set properties like is live directly on the elements. \nMT safe. \nThe number of Gst.Buffer currently in the GstCheck.Harness sinkpad GLib.AsyncQueue \nMT safe. \nThe total number of Gst.Buffer that has arrived on the GstCheck.Harness sinkpad. This number includes buffers that have been dropped as well as buffers that have already been pulled out. \nMT safe. \nSimilar to GstCheck.Harness.prototype.crank_single_clock_wait this is the function to use if your harnessed element s are using more then one gst_clock_id_wait. Failing to do so can and will make it racy which Gst.ClockID you actually are releasing where as this function will process all the waits at the same time ensuring that one thread can t register another wait before both are released. \nMT safe. \nA crank consists of three steps Wait for a Gst.ClockID to be registered with the GstCheck.TestClock. Advance the GstCheck.TestClock to the time the Gst.ClockID is waiting for. Release the Gst.ClockID wait. Together this provides an easy way to not have to think about the details around clocks and time but still being able to write deterministic tests that are dependant on this. A crank can be though of as the notion of manually driving the clock forward to its next logical step. \nMT safe. \nAllocates a buffer using a Gst.BufferPool if present or else using the configured Gst.Allocator and Gst.AllocationParams \nMT safe. \nAllows you to dump the Gst.Buffer the GstCheck.Harness sinkpad GLib.AsyncQueue to a file. \nMT safe. \nThe number of Gst.Event currently in the GstCheck.Harness sinkpad GLib.AsyncQueue \nMT safe. \nThe total number of Gst.Event that has arrived on the GstCheck.Harness sinkpad This number includes events handled by the harness as well as events that have already been pulled out. \nMT safe. \nMost useful in conjunction with gst_harness_new_parse this will scan the Gst.Element inside the GstCheck.Harness and check if any of them matches element_name. Typical usecase being that you need to access one of the harnessed elements for properties and or signals. \nMT safe. \nGets the allocator and its params that has been decided to use after an allocation query. \nMT safe. \nGet the timestamp of the last Gst.Buffer pushed on the GstCheck.Harness srcpad typically with gst_harness_push or gst_harness_push_from_src. \nMT safe. \nGet the GstCheck.TestClock. Useful if specific operations on the testclock is needed. \nMT safe. \nPulls an Gst.Event from the GLib.AsyncQueue on the GstCheck.Harness sinkpad. Timeouts after seconds similar to gst_harness_pull. \nMT safe. \nPulls an Gst.Event from the GLib.AsyncQueue on the GstCheck.Harness srcpad. Timeouts after seconds similar to gst_harness_pull. \nMT safe. \nBasically a gst_harness_push and a gst_harness_pull in one line. Reflects the fact that you often want to do exactly this in your test Push one buffer in and inspect the outcome. \nMT safe. \nPushes an Gst.Event on the GstCheck.Harness srcpad. \nMT safe. \nTransfer data from the src GstHarness to the main GstHarness. It consists of steps Make sure the src is started. see gst_harness_play Crank the clock see gst_harness_crank_single_clock_wait Pull a Gst.Buffer from the src GstHarness see gst_harness_pull Push the same Gst.Buffer into the main GstHarness see gst_harness_push \nMT safe. \nTransfer one Gst.Buffer from the main GstHarness to the sink GstHarness. See gst_harness_push_from_src for details. \nMT safe. \nPushes an Gst.Event on the GstCheck.Harness sinkpad. \nMT safe. \nGet the min latency reported by any harnessed Gst.Element. \nMT safe. \nSetting this will make the harness block in the chain function and then release when GstCheck.Harness.prototype.pull or GstCheck.Harness.prototype.try_pull is called. Can be useful when wanting to control a src element that is not implementing Gst.Clock.prototype.id_wait so it can t be controlled by the GstCheck.TestClock since it otherwise would produce buffers as fast as possible. \nMT safe. \nSets the GstHarness srcpad and sinkpad caps. \nMT safe. \nSets the GstHarness srcpad and sinkpad caps using strings. \nMT safe. \nWhen set to true instead of placing the buffers arriving from the harnessed Gst.Element inside the sinkpads GLib.AsyncQueue they are instead unreffed. \nMT safe. \nAs a convenience a src harness will forward Gst.EventType.prototype.stream_start Gst.EventType.prototype.caps and Gst.EventType.prototype.segment to the main harness if forwarding is enabled and forward any sticky events from the main harness to the sink harness. It will also forward the Gst.QueryType.prototype.allocation. \nIf forwarding is disabled the user will have to either manually push these events from the src harness using GstCheck.Harness.prototype.src_push_event or create and push them manually. While this will allow full control and inspection of these events for the most cases having forwarding enabled will be sufficient when writing a test where the src harness main function is providing data for the main harness. \nForwarding is enabled by default. \nMT safe. \nSets the allocator and params to propose when receiving an allocation query. \nMT safe. \nSets the GstHarness sinkpad caps. \nMT safe. \nSets the GstHarness sinkpad caps using a string. \nMT safe. \nSets the GstHarness srcpad caps. This must be done before any buffers can legally be pushed from the harness to the element. \nMT safe. \nSets the GstHarness srcpad caps using a string. This must be done before any buffers can legally be pushed from the harness to the element. \nMT safe. \nAdvance the GstCheck.TestClock to a specific time. \nMT safe. \nSets the min latency reported by GstCheck.Harness when receiving a latency query \nConvenience that calls gst_harness_push_to_sink pushes number of times. Will abort the pushing if any one push fails. \nMT safe. \nTransfer data from the src GstHarness to the main GstHarness. Similar to gst_harness_push_from_src this variant allows you to specify how many cranks and how many pushes to perform. This can be useful for both moving a lot of data at the same time as well as cases when one crank does not equal one buffer to push and v.v. \nMT safe. \nSimilar to what gst_harness_src_push does with Gst.Buffer this transfers a Gst.Event from the src GstHarness to the main GstHarness. Note that some Gst.Event are being transferred automagically. Look at sink_forward_pad for details. \nMT safe. \nTears down a GstHarness freeing all resources allocated using it. \nMT safe. \nPulls a Gst.Buffer from the GLib.AsyncQueue on the GstCheck.Harness sinkpad. Unlike gst_harness_pull this will not wait for any buffers if not any are present and return null straight away. \nMT safe. \nPulls an Gst.Event from the GLib.AsyncQueue on the GstCheck.Harness sinkpad. See gst_harness_try_pull for details. \nMT safe. \nPulls an Gst.Event from the GLib.AsyncQueue on the GstCheck.Harness srcpad. See gst_harness_try_pull for details. \nMT safe. \nThe number of Gst.Event currently in the GstCheck.Harness srcpad GLib.AsyncQueue \nMT safe. \nThe total number of Gst.Event that has arrived on the GstCheck.Harness srcpad This number includes events handled by the harness as well as events that have already been pulled out. \nMT safe. \nSets the system Gst.Clock on the GstHarness Gst.Element \nMT safe. \nSets the GstCheck.TestClock on the GstCheck.Harness Gst.Element \nMT safe. \nWaits for timeout seconds until waits number of Gst.ClockID waits is registered with the GstCheck.TestClock. Useful for writing deterministic tests where you want to make sure that an expected number of waits have been reached. \nMT safe. \nStop the running GstCheck.HarnessThread \nMT safe. \n"});