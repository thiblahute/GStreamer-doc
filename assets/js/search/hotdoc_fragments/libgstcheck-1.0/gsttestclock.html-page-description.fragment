fragment_downloaded_cb({"url": "libgstcheck-1.0/gsttestclock.html#page-description", "fragment": "GstTestClock is an implementation of GstClock which has different behaviour compared to GstSystemClock. Time for GstSystemClock advances according to the system time while time for GstTestClock changes only when gst_test_clock_set_time or gst_test_clock_advance_time are called. GstTestClock provides unit tests with the possibility to precisely advance the time in a deterministic manner independent of the system time or any other external factors. \nGstClock allows for setting up single shot or periodic clock notifications as well as waiting for these notifications synchronously using gst_clock_id_wait or asynchronously using gst_clock_id_wait_async or gst_clock_id_wait_async This is used by many GStreamer elements among them GstBaseSrc and GstBaseSink. \nGstTestClock keeps track of these clock notifications. By calling gst_test_clock_wait_for_next_pending_id or gst_test_clock_wait_for_multiple_pending_ids a unit tests may wait for the next one or several clock notifications to be requested. Additionally unit tests may release blocked waits in a controlled fashion by calling gst_test_clock_process_next_clock_id. This way a unit test can control the inaccuracy jitter of clock notifications since the test can decide to release blocked waits when the clock time has advanced exactly to or past the requested clock notification time. \nThere are also interfaces for determining if a notification belongs to a GstTestClock or not as well as getting the number of requested clock notifications so far. \nN.B. When a unit test waits for a certain amount of clock notifications to be requested in gst_test_clock_wait_for_next_pending_id or gst_test_clock_wait_for_multiple_pending_ids then these functions may block for a long time. If they block forever then the expected clock notifications were never requested from GstTestClock and so the assumptions in the code of the unit test are wrong. The unit test case runner in gstcheck is expected to catch these cases either by the default test case timeout or the one set for the unit test by calling tcase_set_timeout \nThe sample code below assumes that the element under test will delay a buffer pushed on the source pad by some latency until it arrives on the sink pad. Moreover it is assumed that the element will at some point call gst_clock_id_wait to synchronously wait for a specific time. The first buffer sent will arrive exactly on time only delayed by the latency. The second buffer will arrive a little late ms due to simulated jitter in the clock notification. \nSince GstTestClock is only supposed to be used in unit tests it calls g_assert g_assert_cmpint or g_assert_cmpuint to validate all function arguments. This will highlight any issues with the unit test code itself. \n"});