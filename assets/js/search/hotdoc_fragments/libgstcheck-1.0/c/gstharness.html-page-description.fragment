fragment_downloaded_cb({"url": "libgstcheck-1.0/c/gstharness.html#page-description", "fragment": "A simple buffer in buffer out example \nGstHarness \nAnother main feature of the GstHarness is its integration with the GstTestClock. Operating the GstTestClock can be very challenging but GstHarness simplifies some of the most desired actions a lot like wanting to manually advance the clock while at the same time releasing a GstClockID that is waiting with functions like gst_harness_crank_single_clock_wait. \nGstHarness also supports sub harnesses as a way of generating and validating data. A sub harness is another GstHarness that is managed by the parent harness and can either be created by using the standard gst_harness_new type functions directly on the GstHarness src_harness or using the much more convenient gst_harness_add_src or gst_harness_add_sink_parse. If you have a decoder element you want to test like vp8dec it can be very useful to add a src harness with both a src element videotestsrc and an encoder vp8enc to feed the decoder data with different configurations by simply doing \nand then feeding it data with \nLinks the specifed GstPad the GstHarness srcpad. \nMT safe. \nLinks the specifed GstPad the GstHarness sinkpad. This can be useful if perhaps the srcpad did not exist at the time of creating the harness like a demuxer that provides a sometimes pad after receiving data. \nMT safe. \nSimilar to gst_harness_crank_single_clock_wait this is the function to use if your harnessed element s are using more then one gst_clock_id_wait. Failing to do so can and will make it racy which GstClockID you actually are releasing where as this function will process all the waits at the same time ensuring that one thread can t register another wait before both are released. \nMT safe. \nA crank consists of three steps Wait for a GstClockID to be registered with the GstTestClock. Advance the GstTestClock to the time the GstClockID is waiting for. Release the GstClockID wait. Together this provides an easy way to not have to think about the details around clocks and time but still being able to write deterministic tests that are dependant on this. A crank can be though of as the notion of manually driving the clock forward to its next logical step. \nMT safe. \nGet the timestamp of the last GstBuffer pushed on the GstHarness srcpad typically with gst_harness_push or gst_harness_push_from_src. \nMT safe. \nPulls an GstEvent from the GAsyncQueue on the GstHarness srcpad. Timeouts after seconds similar to gst_harness_pull. \nMT safe. \nPushes an GstEvent on the GstHarness sinkpad. \nMT safe. \nSetting this will make the harness block in the chain function and then release when gst_harness_pull or gst_harness_try_pull is called. Can be useful when wanting to control a src element that is not implementing gst_clock_id_wait so it can t be controlled by the GstTestClock since it otherwise would produce buffers as fast as possible. \nMT safe. \nSets the allocator and params to propose when receiving an allocation query. \nMT safe. \nSets the GstHarness sinkpad caps using a string. \nMT safe. \nSets the min latency reported by GstHarness when receiving a latency query \nTransfer data from the src GstHarness to the main GstHarness. Similar to gst_harness_push_from_src this variant allows you to specify how many cranks and how many pushes to perform. This can be useful for both moving a lot of data at the same time as well as cases when one crank does not equal one buffer to push and v.v. \nMT safe. \nStart a custom stress thread that will call your callback for every iteration allowing you to do something nasty. \nMT safe. \nCall g_object_set with name and value in intervals of sleep microseconds \nMT safe. \nPush a GstBuffer in intervals of sleep microseconds. \nMT safe. \nPush a GstBuffer returned by func in intervals of sleep microseconds. \nMT safe. \nPush the event onto the harnessed GstElement sinkpad in intervals of sleep microseconds \nMT safe. \nPush a GstEvent returned by func onto the harnessed GstElement sinkpad in intervals of sleep microseconds. \nMT safe. \nPush the event onto the harnessed GstElement srcpad in intervals of sleep microseconds. \nMT safe. \nPush a GstEvent returned by func onto the harnessed GstElement srcpad in intervals of sleep microseconds. \nMT safe. \nCall gst_element_request_pad in intervals of sleep microseconds \nMT safe. \nChange the state of your harnessed GstElement from NULL to PLAYING and back again only pausing for sleep microseconds every time. \nMT safe. \nPulls an GstEvent from the GAsyncQueue on the GstHarness srcpad. See gst_harness_try_pull for details. \nMT safe. \nThe number of GstEvent currently in the GstHarness srcpad GAsyncQueue \nMT safe. \nThe total number of GstEvent that has arrived on the GstHarness srcpad This number includes events handled by the harness as well as events that have already been pulled out. \nMT safe. \nWaits for timeout seconds until waits number of GstClockID waits is registered with the GstTestClock. Useful for writing deterministic tests where you want to make sure that an expected number of waits have been reached. \nMT safe. \nCreates a new harness. Works like gst_harness_new_with_element except you specify the factoryname of the GstElement \nMT safe. \nCreates a new harness like gst_harness_new_full except it assumes the GstElement sinkpad is named sink and srcpad is named src \nMT safe. \nStop the running GstHarnessThread \nMT safe. \n"});