fragment_downloaded_cb({"url": "gst-plugins-good-doc-1.0/element-rtpptdemux.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"element-rtpptdemux\">\n<h1 id=\"rtpptdemux1\">rtpptdemux</h1><p>rtpptdemux acts as a demuxer for RTP packets based on the payload type of\nthe packets. Its main purpose is to allow an application to easily receive\nand decode an RTP stream with multiple payload types.</p>\n<p>For each payload type that is detected, a new pad will be created and the\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-rtpptdemux.html#GstRtpPtDemux-new-payload-type\">GstRtpPtDemux::new-payload-type</a> signal will be emitted. When the payload for\nthe RTP stream changes, the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-rtpptdemux.html#GstRtpPtDemux-payload-type-change\">GstRtpPtDemux::payload-type-change</a> signal will be\nemitted.</p>\n<p>The element will try to set complete and unique application/x-rtp caps\non the output pads based on the result of the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good/html/gst-plugins-good-plugins-rtpptdemux.html#GstRtpPtDemux-request-pt-map\">GstRtpPtDemux::request-pt-map</a>\nsignal.</p>\n<h2 id=\"example-pipelines\">Example pipelines</h2>\n<pre><code class=\"language-[\"> gst-launch-1.0 udpsrc caps=\"application/x-rtp\" ! rtpptdemux ! fakesink\n ]| Takes an RTP stream and send the RTP packets with the first detected\n payload type to fakesink, discarding the other payload types.\n</code></pre>\n\n</div>\n\n\n"});