fragment_downloaded_cb({"url": "gst-plugins-good-doc-1.0/gdkpixbufsink.html#gdkpixbufsink", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"gdkpixbufsink\">\n\t\t<h3 id=\"gdkpixbufsink2\">\n\tgdkpixbufsink\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\nGObject\n    <span class=\"lineart\">\u2570\u2500\u2500</span>GInitiallyUnowned\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstBaseSink\" href=\"../libgstbase-doc-1.0/c/gstbasesink.html#GstBaseSink\">GstBaseSink</a>\n                    <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstVideoSink\" href=\"../gst-plugins-base-video-doc-1.0/c/gstvideosink.html#GstVideoSink\">GstVideoSink</a>\n                        <span class=\"lineart\">\u2570\u2500\u2500</span>gdkpixbufsink\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>This sink element takes RGB or RGBA images as input and wraps them into\nGdkPixbuf objects, for easy saving to file via the\nGdkPixbuf library API or displaying in Gtk+ applications (e.g. using\nthe <a href=\"http://developer.gnome.org/gtk3/GtkImage.html#GtkImage-struct\">GtkImage</a> widget).</p>\n<p>There are two ways to use this element and obtain the GdkPixbuf objects\ncreated:</p>\n<ul>\n<li>\n<p>Watching for element messages named <code>\"preroll-pixbuf\"</code> or <code>\"pixbuf\"</code> on the bus, which\nwill be posted whenever an image would usually be rendered. See below for\nmore details on these messages and how to extract the pixbuf object\ncontained in them.</p>\n</li>\n<li>\n<p>Retrieving the current pixbuf via the <a href=\"gdkpixbufsink.html#GstGdkPixbufSink:last-pixbuf\">last-pixbuf</a> property\nwhen needed. This is the easiest way to get at pixbufs for snapshotting\npurposes - just wait until the pipeline is prerolled (ASYNC_DONE message\non the bus), then read the property. If you use this method, you may want\nto disable message posting by setting the <a href=\"gdkpixbufsink.html#GstGdkPixbufSink:post-messages\">post-messages</a>\nproperty to <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS\">FALSE</a>. This avoids unnecessary memory overhead.</p>\n</li>\n</ul>\n<p>The primary purpose of this element is to abstract away the <a href=\"../libgstreamer-doc-1.0/c/gstbuffer.html#GstBuffer\">GstBuffer</a> to\nGdkPixbuf conversion. Other than that it's very similar to the fakesink\nelement.</p>\n<p>This element is meant for easy no-hassle video snapshotting. It is not\nsuitable for video playback or video display at high framerates. Use\nximagesink, xvimagesink or some other suitable video sink in connection\nwith the GstXOverlay interface instead if you want to do video playback.</p>\n<h2 id=\"message-details1\">Message details</h2>\n<p>As mentioned above, this element will by default post element messages\ncontaining structures named <code>\"preroll-pixbuf\"</code> or <code>\"pixbuf\"</code> on the bus (this\ncan be disabled by setting the <a href=\"gdkpixbufsink.html#GstGdkPixbufSink:post-messages\">post-messages</a> property\nto <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#FALSE:CAPS\">FALSE</a> though). The element message structure has the following fields:</p>\n<ul>\n<li>\n<p><code>\"pixbuf\"</code>: the GdkPixbuf object</p>\n</li>\n<li>\n<p><code>\"pixel-aspect-ratio\"</code>: the pixel aspect\nratio (PAR) of the input image (this field contains a GstFraction); the\nPAR is usually 1:1 for images, but is often something non-1:1 in the case\nof video input. In this case the image may be distorted and you may need\nto rescale it accordingly before saving it to file or displaying it. This\ncan easily be done using <a href=\"http://library.gnome.org/devel/gdk-pixbuf/unstable/gdk-pixbuf-Scaling.html#gdk-pixbuf-scale\">gdk_pixbuf_scale</a> (the reason this is not done\nautomatically is that the application will often scale the image anyway\naccording to the size of the output window, in which case it is much more\nefficient to only scale once rather than twice). You can put a videoscale\nelement and a capsfilter element with\n<code>video/x-raw-rgb,pixel-aspect-ratio=(fraction)1/1</code> caps\nin front of this element to make sure the pixbufs always have a 1:1 PAR.</p>\n</li>\n</ul>\n<h2 id=\"example-pipeline1\">Example pipeline</h2>\n<pre><code>gst-launch-1.0 -m -v videotestsrc num-buffers=1 ! gdkpixbufsink\n</code></pre>\n<p>Process one single test image as pixbuf (note that the output you see will\nbe slightly misleading. The message structure does contain a valid pixbuf\nobject even if the structure string says '(NULL)').</p>\n\n</div>\n\n</div>\n\n\n"});