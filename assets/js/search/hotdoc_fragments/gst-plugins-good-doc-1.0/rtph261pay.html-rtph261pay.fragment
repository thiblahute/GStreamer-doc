fragment_downloaded_cb({"url": "gst-plugins-good-doc-1.0/rtph261pay.html#rtph261pay", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"rtph261pay\">\n\t\t<h3 id=\"rtph261pay2\">\n\trtph261pay\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\nGObject\n    <span class=\"lineart\">\u2570\u2500\u2500</span>GInitiallyUnowned\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstRTPBasePayload\" href=\"../gst-plugins-base-rtp-doc-1.0/c/gstrtpbasepayload.html#GstRTPBasePayload\">GstRTPBasePayload</a>\n                    <span class=\"lineart\">\u2570\u2500\u2500</span>rtph261pay\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>Payload encoded H.261 video frames into RTP packets according to RFC 4587.\nFor detailed information see: https://www.rfc-editor.org/rfc/rfc4587.txt</p>\n<p>The payloader takes a H.261 frame, parses it and splits it into fragments\non MB boundaries in order to match configured MTU size. For each fragment\nan RTP packet is constructed with an RTP packet header followed by the\nfragment. In addition the payloader will make sure the packetized H.261\nstream appears as a continuous bit-stream after depacketization by shifting\nthe encoded bit-stream of a frame to align with the last significant bit of\nthe previous frame. This helps interoperability in the case where the\nencoder does not produce a continuous bit-stream but the decoder requires\nit.</p>\n<h2 id=\"example-launch-line1\">Example launch line</h2>\n<pre><code>gst-launch-1.0 videotestsrc ! avenc_h261 ! rtph261pay ! udpsink\n</code></pre>\n<p>This will encode a test video and payload it. Refer to the rtph261depay\nexample to depayload and play the RTP stream.</p>\n\n</div>\n\n</div>\n\n\n"});