fragment_downloaded_cb({"url": "gst-plugins-good-doc-1.0/dvdemux.html#dvdemux", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"dvdemux\">\n\t\t<h3 id=\"dvdemux2\">\n\tdvdemux\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\nGObject\n    <span class=\"lineart\">\u2570\u2500\u2500</span>GInitiallyUnowned\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span>dvdemux\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>dvdemux splits raw DV into its audio and video components. The audio will be\ndecoded raw samples and the video will be encoded DV video.</p>\n<p>This element can operate in both push and pull mode depending on the\ncapabilities of the upstream peer.</p>\n<h2 id=\"example-launch-line1\">Example launch line</h2>\n<pre><code>gst-launch-1.0 filesrc location=test.dv ! dvdemux name=demux ! queue ! audioconvert ! alsasink demux. ! queue ! dvdec ! xvimagesink\n</code></pre>\n<p>This pipeline decodes and renders the raw DV stream to an audio and a videosink.</p>\n\n</div>\n\n</div>\n\n\n"});