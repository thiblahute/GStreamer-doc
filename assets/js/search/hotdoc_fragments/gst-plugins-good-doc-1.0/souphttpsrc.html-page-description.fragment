fragment_downloaded_cb({"url": "gst-plugins-good-doc-1.0/souphttpsrc.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"souphttpsrc\">\n<h1 id=\"souphttpsrc1\">souphttpsrc</h1><p>This plugin reads data from a remote location specified by a URI.\nSupported protocols are 'http', 'https'.</p>\n<p>An HTTP proxy must be specified by its URL.\nIf the \"http_proxy\" environment variable is set, its value is used.\nIf built with libsoup's GNOME integration features, the GNOME proxy\nconfiguration will be used, or failing that, proxy autodetection.\nThe <a href=\"souphttpsrc.html#GstSoupHTTPSrc:proxy\">proxy</a> property can be used to override the default.</p>\n<p>In case the <a href=\"souphttpsrc.html#GstSoupHTTPSrc:iradio-mode\">iradio-mode</a> property is set and the location is\nan HTTP resource, souphttpsrc will send special Icecast HTTP headers to the\nserver to request additional Icecast meta-information.\nIf the server is not an Icecast server, it will behave as if the\n<a href=\"souphttpsrc.html#GstSoupHTTPSrc:iradio-mode\">iradio-mode</a> property were not set. If it is, souphttpsrc will\noutput data with a media type of application/x-icy, in which case you will\nneed to use the ICYDemux element as follow-up element to extract the Icecast\nmetadata and to determine the underlying media type.</p>\n<h2 id=\"example-launch-line\">Example launch line</h2>\n<pre><code>gst-launch-1.0 -v souphttpsrc location=https://some.server.org/index.html\n    ! filesink location=/home/joe/server.html\n</code></pre>\n<p>The above pipeline reads a web page from a server using the HTTPS protocol\nand writes it to a local file.</p>\n<pre><code>gst-launch-1.0 -v souphttpsrc user-agent=\"FooPlayer 0.99 beta\"\n    automatic-redirect=false proxy=http://proxy.intranet.local:8080\n    location=http://music.foobar.com/demo.mp3 ! mad ! audioconvert\n    ! audioresample ! alsasink\n</code></pre>\n<p>The above pipeline will read and decode and play an mp3 file from a\nweb server using the HTTP protocol. If the server sends redirects,\nthe request fails instead of following the redirect. The specified\nHTTP proxy server is used. The User-Agent HTTP request header\nis set to a custom string instead of \"GStreamer souphttpsrc.\"</p>\n<pre><code>gst-launch-1.0 -v souphttpsrc location=http://10.11.12.13/mjpeg\n    do-timestamp=true ! multipartdemux\n    ! image/jpeg,width=640,height=480 ! matroskamux\n    ! filesink location=mjpeg.mkv\n</code></pre>\n<p>The above pipeline reads a motion JPEG stream from an IP camera\nusing the HTTP protocol, encoded as mime/multipart image/jpeg\nparts, and writes a Matroska motion JPEG file. The width and\nheight properties are set in the caps to provide the Matroska\nmultiplexer with the information to set this in the header.\nTimestamps are set on the buffers as they arrive from the camera.\nThese are used by the mime/multipart demultiplexer to emit timestamps\non the JPEG-encoded video frame buffers. This allows the Matroska\nmultiplexer to timestamp the frames in the resulting file.</p>\n\n</div>\n\n\n"});