fragment_downloaded_cb({"url": "gst-plugins-good-doc-1.0/progressreport.html#progressreport", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"progressreport\">\n\t\t<h3 id=\"progressreport2\">\n\tprogressreport\n</h3>\n\n\t\t<div class=\"hierarchy_container\">\n\t<div class=\"hierarchy_details\">\n<pre>\nGObject\n    <span class=\"lineart\">\u2570\u2500\u2500</span>GInitiallyUnowned\n        <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstObject\" href=\"../libgstreamer-doc-1.0/c/gstobject.html#GstObject\">GstObject</a>\n            <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstElement\" href=\"../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">GstElement</a>\n                <span class=\"lineart\">\u2570\u2500\u2500</span><a title=\"GstBaseTransform\" href=\"../libgstbase-doc-1.0/c/gstbasetransform.html#GstBaseTransform\">GstBaseTransform</a>\n                    <span class=\"lineart\">\u2570\u2500\u2500</span>progressreport\n</pre>\n\n</div>\n\n</div>\n\n<div class=\"class_details\">\n\t<p>The progressreport element can be put into a pipeline to report progress,\nwhich is done by doing upstream duration and position queries in regular\n(real-time) intervals. Both the interval and the prefered query format\ncan be specified via the <a href=\"progressreport.html#GstProgressReport:update-freq\">update-freq</a> and the\n<a href=\"progressreport.html#GstProgressReport:format\">format</a> property.</p>\n<p>Element messages containing a \"progress\" structure are posted on the bus\nwhenever progress has been queried (since gst-plugins-good 0.10.6 only).</p>\n<p>Since the element was originally designed for debugging purposes, it will\nby default also print information about the current progress to the\nterminal. This can be prevented by setting the <a href=\"progressreport.html#GstProgressReport:silent\">silent</a>\nproperty to <a href=\"https://developer.gnome.org/glib/unstable/glib-Standard-Macros.html#TRUE:CAPS\">TRUE</a>.</p>\n<p>This element is most useful in transcoding pipelines or other situations\nwhere just querying the pipeline might not lead to the wanted result. For\nprogress in TIME format, the element is best placed in a 'raw stream'\nsection of the pipeline (or after any demuxers/decoders/parsers).</p>\n<p>Three more things should be pointed out: firstly, the element will only\nquery progress when data flow happens. If data flow is stalled for some\nreason, no progress messages will be posted. Secondly, there are other\nelements (like qtdemux, for example) that may also post \"progress\" element\nmessages on the bus. Applications should check the source of any element\nmessages they receive, if needed. Finally, applications should not take\naction on receiving notification of progress being 100%, they should only\ntake action when they receive an EOS message (since the progress reported\nis in reference to an internal point of a pipeline and not the pipeline as\na whole).</p>\n<h2 id=\"example-launch-line1\">Example launch line</h2>\n<pre><code>gst-launch-1.0 -m filesrc location=foo.ogg ! decodebin ! progressreport update-freq=1 ! audioconvert ! audioresample ! autoaudiosink\n</code></pre>\n<p>This shows a progress query where a duration is available.</p>\n<pre><code>gst-launch-1.0 -m audiotestsrc ! progressreport update-freq=1 ! audioconvert ! autoaudiosink\n</code></pre>\n<p>This shows a progress query where no duration is available.</p>\n\n</div>\n\n</div>\n\n\n"});