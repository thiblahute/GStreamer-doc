fragment_downloaded_cb({"url": "gst-devtools-1.0/gst-validate-media-check.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gst-validate-media-check.md\">\n        <h1 id=\"gstvalidatemediacheck\">gst-validate-media-check</h1>\n<p><code>gst-validate-media-check</code> is command line tool checking that media\nfiles discovering works properly with <code>gst-discoverer</code> over multiple\nruns. It needs a reference text file containing valid information about\na media file (which can be generated with the same tool) and then it\nwill be able to check that the reference matches what will be reported\nby <code>gst-discoverer</code> in the following runs.</p>\n<p>For example, given that we have a valid <code>reference.media_info</code> file, we\ncan run:</p>\n<pre><code>gst-validate-media-check-GST_API_VERSION file:///./file.ogv --expected-results reference.media_info\n</code></pre>\n<p>It will then output any error encountered and return an exit code\ndifferent from 0 if any error is found.</p>\n<h1 id=\"invocation\">Invocation</h1>\n<p><code>gst-validate-media-check</code> takes an URI to analyze and some extra\noptions to control the output.</p>\n<h2 id=\"options\">Options</h2>\n<ul>\n<li><code>-o</code>, <code>--output-file</code>: The output file to store the results.</li>\n<li><code>-f</code>, <code>--full</code>: Fully analize the file frame by frame.</li>\n<li><code>-e</code>, <code>--expected-results</code>: Path to file containing the expected results (or the last results\nfound) for comparison with new results.</li>\n</ul>\n\n        \n\n    </div>\n\n\n        "});