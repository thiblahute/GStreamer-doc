fragment_downloaded_cb({"url": "gst-devtools-1.0/gst-validate-environment-variables.html#page-description", "fragment": "The runtime behaviour of GstValidate applications can be influenced by a number of environment variables. \nGST_VALIDATE. \nThis environment variable can be set to a list of debug options which cause GstValidate to print out different types of test result information and consider differently the level of the reported issues. \nGST_VALIDATE_FILE. \nSet this variable to a colon separated list of paths to redirect all GstValidate messages to this file. If left unset debug messages will be outputed into the standard error. \nYou can use the special names stdout and stderr to use those output. \nGST_VALIDATE_SCENARIOS_PATH. \nSet this variable to a colon separated list of paths. GstValidate will scan these paths for GstValidate scenario files. By default GstValidate will look for scenarios in the user data directory as specified in the XDG standard local share gstreamer GST_API_VERSION validate scenarios and the system wide user data directory usr lib gstreamer GST_API_VERSION validate scenarios \nGST_VALIDATE_CONFIG. \nSet this variable to a colon separated list of paths to GstValidate config files or directly as a string in the GstCaps serialization format. The config file has a format similar to the scenario file. The name of the configuration corresponds to the name of the plugin the configuration applies to. \nThe special name core is used to configure GstValidate core functionalities monitors scenarios etc... \nIf you want to make sure to set a property on a element of a type for example to disable QoS on all sinks you can do \nIf you want the GstPipeline to get dumped when an issue of a certain level and higher happens you can do \nNote that you will still need to set GST_DEBUG_DUMP_DOT_DIR. \nFor more examples you can look at the ssim GstValidate plugin documentation to see how to configure that plugin. \nGST_VALIDATE_OVERRIDE. \nSet this variable to a colon separated list of dynamically linkable files that GstValidate will scan looking for overrides. By default GstValidate will look for scenarios in the user data directory as specified in the XDG standard local share gstreamer GST_API_VERSION validate scenarios and the system wide user data directory usr lib gstreamer GST_API_VERSION validate scenarios \nGST_VALIDATE_SCENARIO_WAIT_MULITPLIER. \nA decimal number to set as a multiplier for the wait actions. For example if you set GST_VALIDATE_SCENARIO_WAIT_MULITPLIER for a wait action that has a duration of the waiting time will only be of second. If set to wait action will be ignored. \nGST_VALIDATE_REPORTING_DETAILS. \nThe reporting level can be set through the GST_VALIDATE_REPORTING_DETAILS environment variable as a comma separated list of optional object categories names and levels. Omit the object category name to set the global level. \nExamples \nLevels being \nSetting the reporting level allows to control the way issues are reported when calling gst_validate_runner_printf \n"});