fragment_downloaded_cb({"url": "gst-devtools-1.0/gst-validate-environment-variables.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gst-validate-environment-variables.md\">\n        <h1 id=\"gstvalidate-environment-variables\">GstValidate Environment Variables</h1>\n<p>The runtime behaviour of GstValidate applications can be influenced by a\nnumber of environment variables.</p>\n<p><strong>GST_VALIDATE.</strong></p>\n<p>This environment variable can be set to a list of debug options, which\ncause GstValidate to print out different types of test result\ninformation and consider differently the level of the reported issues.</p>\n<ul>\n<li><code>fatal-criticals</code>: Causes GstValidate to consider only critical issues as import enough\nto consider the test failed (default behaviour)</li>\n<li><code>fatal-warnings</code>: Causes GstValidate to consider warning, and critical issues as\nimport enough to consider the test failed</li>\n<li><code>fatal-issues</code>: Causes GstValidate to consider issue, warning, and critical issues\nas import enough to consider the test failed</li>\n<li><code>print-issues</code>: Causes GstValidate to print issue, warning and critical issues in\nthe final reports (default behaviour)</li>\n<li><code>print-warnings</code>: Causes GstValidate to only print warning and critical issues in the\nfinal reports</li>\n<li><code>print-criticals</code>: Causes GstValidate to only print critical issues in the final\nreports</li>\n</ul>\n<p><strong>GST_VALIDATE_FILE.</strong></p>\n<p>Set this variable to a colon-separated list of paths to redirect all\nGstValidate messages to this file. If left unset, debug messages will be\noutputed into the standard error.</p>\n<p>You can use the special names <code>stdout</code> and <code>stderr</code> to use those output.</p>\n<p><strong>GST_VALIDATE_SCENARIOS_PATH.</strong></p>\n<p>Set this variable to a colon-separated list of paths. GstValidate will\nscan these paths for GstValidate scenario files. By default GstValidate\nwill look for scenarios in the user data directory as specified in the\n<a href=\"http://www.freedesktop.org/wiki/Software/xdg-user-dirs/\">XDG standard</a>:\n<code>.local/share/gstreamer-GST_API_VERSION/validate/scenarios</code> and the\nsystem wide user data directory:\n<code>/usr/lib/gstreamer-GST_API_VERSION/validate/scenarios</code></p>\n<p><strong>GST_VALIDATE_CONFIG.</strong></p>\n<p>Set this variable to a colon-separated list of paths to GstValidate\nconfig files or directly as a string in the GstCaps serialization\nformat. The config file has a format similar to the scenario file. The\nname of the configuration corresponds to the name of the plugin the\nconfiguration applies to.</p>\n<p>The special name \"core\" is used to configure GstValidate core\nfunctionnalities (monitors, scenarios, etc...).</p>\n<p>If you want to make sure to set a property on a element of a type (for\nexample to disable QoS on all sinks) you can do:</p>\n<pre><code>core, action=set-property, target-element-klass=Sink\n</code></pre>\n<p>If you want the GstPipeline to get dumped when an issue of a certain\nlevel (and higher) happens, you can do:</p>\n<pre><code>core, action=dot-pipeline, report-level=issue\n</code></pre>\n<p>Note that you will still need to set GST_DEBUG_DUMP_DOT_DIR.</p>\n<p>For more examples you can look at the ssim GstValidate plugin\ndocumentation to see how to configure that plugin.</p>\n<p><strong>GST_VALIDATE_OVERRIDE.</strong></p>\n<p>Set this variable to a colon-separated list of dynamically linkable\nfiles that GstValidate will scan looking for overrides. By default\nGstValidate will look for scenarios in the user data directory as\nspecified in the <a href=\"http://www.freedesktop.org/wiki/Software/xdg-user-dirs/\">XDG standard</a>:\n<code>.local/share/gstreamer-GST_API_VERSION/validate/scenarios</code> and the\nsystem wide user data directory:\n<code>/usr/lib/gstreamer-GST_API_VERSION/validate/scenarios</code></p>\n<p><strong>GST_VALIDATE_SCENARIO_WAIT_MULITPLIER.</strong></p>\n<p>A decimal number to set as a multiplier for the wait actions. For\nexample if you set <code>GST_VALIDATE_SCENARIO_WAIT_MULITPLIER=0.5</code>, for a\nwait action that has a duration of 2.0 the waiting time will only be of\n1.0 second. If set to 0, wait action will be ignored.</p>\n<p><strong>GST_VALIDATE_REPORTING_DETAILS.</strong></p>\n<p>The reporting level can be set through the\nGST_VALIDATE_REPORTING_DETAILS environment variable, as a\ncomma-separated list of (optional) object categories / names and levels.\nOmit the object category / name to set the global level.</p>\n<p>Examples:</p>\n<pre><code>GST_VALIDATE_REPORTING_DETAILS=synthetic,h264parse:all\nGST_VALIDATE_REPORTING_DETAILS=none,h264parse::sink_0:synthetic\n</code></pre>\n<p>Levels being:</p>\n<ul>\n<li><code>none</code>: No debugging level specified or desired. Used to deactivate\ndebugging output.</li>\n<li><code>synthetic</code>: Summary of the issues found, with no details.</li>\n<li><code>subchain</code>: If set as the default level, similar issues can be reported multiple\ntimes for different subchains. If set as the level for a particular\nobject (<code>my_object:subchain</code>), validate will report the issues where\nthe object is the first to report an issue for a subchain.</li>\n<li><code>monitor</code>: If set as the default level, all the distinct issues for all the\nmonitors will be reported. If set as the level for a particular\nobject, all the distinct issues for this object will be reported.\nNote that if the same issue happens twice on the same object, up\nuntil this level that issue is only reported once.</li>\n<li><code>all</code>: All the issues will be reported, even those that repeat themselves\ninside the same object. This can be <strong>very</strong> verbose if set\nglobally.</li>\n</ul>\n<p>Setting the reporting level allows to control the way issues are\nreported when calling <a href=\"c/gst-validate-runner.html#gst_validate_runner_printf\">gst_validate_runner_printf()</a>.</p>\n\n        \n\n    </div>\n\n\n        "});