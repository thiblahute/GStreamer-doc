fragment_downloaded_cb({"url": "gst-devtools-1.0/gst-validate.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gst-validate.md\">\n<h1 id=\"gstvalidate\">gst-validate</h1>\n<p><code>gst-validate</code> is the simplest <code>gst-launch</code>-like pipeline launcher\nrunning inside GstValidate monitoring infrastructure. Monitors are added\nto it to identify issues in the used elements. At the end it will print\na report with some information about all the issues encountered during\nits run. To view issues as they are detected, set the environment\nvariable <code>GST_DEBUG=validate:2</code>{.shell} and they will get printed in the\nGStreamer debug log. You can basically run any <a href=\"../libgstreamer-1.0/c/gstpipeline.html#GstPipeline\">GstPipeline</a> pipeline\nusing this tool. If you are not familiar with <code>gst-launch</code> syntax,\nplease refer to <code>gst-launch</code>'s documentation.</p>\n<p>Simple playback pipeline:</p>\n<pre><code>gst-validate-1.0 playbin uri=file:///path/to/some/media/file\n</code></pre>\n<p>Transcoding pipeline:</p>\n<pre><code>gst-validate-1.0 filesrc location=/media/file/location ! qtdemux name=d ! queue \\\n        ! x264enc ! h264parse ! mpegtsmux name=m ! progressreport \\\n        ! filesink location=/root/test.ts d. ! queue ! faac ! m.\n</code></pre>\n<p>It will list each issue that has been encountered during the execution\nof the specified pipeline in a human readable report like:</p>\n<pre><code>issue : buffer is out of the segment range Detected on theoradec0.srcpad at 0:00:00.096556426\n\nDetails : buffer is out of segment and shouldn't be pushed. Timestamp: 0:00:25.000 - duration: 0:00:00.040 Range: 0:00:00.000 - 0:00:04.520\nDescription : buffer being pushed is out of the current segment's start-stop  range. Meaning it is going to be discarded downstream without any use\n</code></pre>\n<p>The return code of the process will be 18 in case a <code>CRITICAL</code> issue has\nbeen found.</p>\n<h1 id=\"invocation\">Invocation</h1>\n<p><code>gst-validate</code> takes a mandatory description of the pipeline to launch,\nsimilar to <code>gst-launch</code>, and some extra options.</p>\n<h2 id=\"options\">Options</h2>\n<ul>\n<li><code>--set-scenario</code>: Let you set a scenario, it can be a full path to a scenario file or\nthe name of the scenario (name of the file without the <code>.scenario</code>\nextension).</li>\n<li><code>-l</code>, <code>--list-scenarios</code>:   List the avalaible scenarios that can be run.</li>\n<li><code>--scenarios-defs-output-file</code>: The output file to store scenarios details. Implies\n<code>--list-scenario</code>.</li>\n<li><code>-t</code>, <code>--inspect-action-type</code>: Inspect the avalaible action types with which to write scenarios if\nno parameter passed, it will list all avalaible action types\notherwize will print the full description of the wanted types.</li>\n<li><code>--set-media-info</code>: Set a media_info XML file descriptor to share information about the\nmedia file that will be reproduced.</li>\n<li><code>--set-configs</code>: Let you set a config scenario. The scenario needs to be set as\n<code>config</code>. You can specify a list of scenarios separated by \"<code>:</code>\". It\nwill override the GST_VALIDATE_SCENARIO environment variable.</li>\n</ul>\n\n</div>\n\n\n        "});