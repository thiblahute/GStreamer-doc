fragment_downloaded_cb({"url": "application-development/introduction/gstreamer.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstreamer.md\">\n<h1 id=\"what-is-gstreamer\">What is GStreamer?</h1>\n<p>GStreamer is a framework for creating streaming media applications. The\nfundamental design comes from the video pipeline at Oregon Graduate\nInstitute, as well as some ideas from DirectShow.</p>\n<p>GStreamer's development framework makes it possible to write any type of\nstreaming multimedia application. The GStreamer framework is designed to\nmake it easy to write applications that handle audio or video or both.\nIt isn't restricted to audio and video, and can process any kind of data\nflow. The pipeline design is made to have little overhead above what the\napplied filters induce. This makes GStreamer a good framework for\ndesigning even high-end audio applications which put high demands on\nlatency.</p>\n<p>One of the most obvious uses of GStreamer is using it to build a media\nplayer. GStreamer already includes components for building a media\nplayer that can support a very wide variety of formats, including MP3,\nOgg/Vorbis, MPEG-1/2, AVI, Quicktime, mod, and more. GStreamer, however,\nis much more than just another media player. Its main advantages are\nthat the pluggable components can be mixed and matched into arbitrary\npipelines so that it's possible to write a full-fledged video or audio\nediting application.</p>\n<p>The framework is based on plugins that will provide the various codec\nand other functionality. The plugins can be linked and arranged in a\npipeline. This pipeline defines the flow of the data. Pipelines can also\nbe edited with a GUI editor and saved as XML so that pipeline libraries\ncan be made with a minimum of effort.</p>\n<p>The GStreamer core function is to provide a framework for plugins, data\nflow and media type handling/negotiation. It also provides an API to\nwrite applications using the various plugins.</p>\n<p>Specifically, GStreamer provides</p>\n<ul>\n<li>\n<p>an API for multimedia applications</p>\n</li>\n<li>\n<p>a plugin architecture</p>\n</li>\n<li>\n<p>a pipeline architecture</p>\n</li>\n<li>\n<p>a mechanism for media type handling/negotiation</p>\n</li>\n<li>\n<p>a mechanism for synchronization</p>\n</li>\n<li>\n<p>over 250 plug-ins providing more than 1000 elements</p>\n</li>\n<li>\n<p>a set of tools</p>\n</li>\n</ul>\n<p>GStreamer plug-ins could be classified into</p>\n<ul>\n<li>\n<p>protocols handling</p>\n</li>\n<li>\n<p>sources: for audio and video (involves protocol plugins)</p>\n</li>\n<li>\n<p>formats: parsers, formaters, muxers, demuxers, metadata, subtitles</p>\n</li>\n<li>\n<p>codecs: coders and decoders</p>\n</li>\n<li>\n<p>filters: converters, mixers, effects, ...</p>\n</li>\n<li>\n<p>sinks: for audio and video (involves protocol plugins)</p>\n</li>\n</ul>\n<p><img src=\"images/gstreamer-overview.png\" alt=\"GStreamer overview\" title=\"fig:\" id=\"gstreamer-overview\"></p>\n<p>GStreamer is packaged into</p>\n<ul>\n<li>\n<p>gstreamer: the core package</p>\n</li>\n<li>\n<p>gst-plugins-base: an essential exemplary set of elements</p>\n</li>\n<li>\n<p>gst-plugins-good: a set of good-quality plug-ins under LGPL</p>\n</li>\n<li>\n<p>gst-plugins-ugly: a set of good-quality plug-ins that might pose\ndistribution problems</p>\n</li>\n<li>\n<p>gst-plugins-bad: a set of plug-ins that need more quality</p>\n</li>\n<li>\n<p>gst-libav: a set of plug-ins that wrap libav for decoding and\nencoding</p>\n</li>\n<li>\n<p>a few others packages</p>\n</li>\n</ul>\n\n</div>\n\n\n\t"});