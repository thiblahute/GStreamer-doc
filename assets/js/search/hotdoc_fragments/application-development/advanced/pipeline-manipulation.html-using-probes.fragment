fragment_downloaded_cb({"url": "application-development/advanced/pipeline-manipulation.html#using-probes", "fragment": "Using probes \nProbing is best envisioned as a pad listener. Technically a probe is nothing more than a callback that can be attached to a pad. You can attach a probe using gst_pad_add_probe Similarly one can use the gst_pad_remove_probe to remove the callback again. The probe notifies you of any activity that happens on the pad like buffers events and queries. You can define what kind of notifications you are interested in when you add the probe. \nThe probe can notify you of the following activity on pads \nA buffer is pushed or pulled. You want to specify the GST_PAD_PROBE_TYPE_BUFFER when registering the probe. Because the pad can be scheduled in different ways it is possible to also specify in what scheduling mode you are interested with the optional GST_PAD_PROBE_TYPE_PUSH and GST_PAD_PROBE_TYPE_PULL flags. \nYou can use this probe to inspect modify or drop the buffer. See Data probes. \nA bufferlist is pushed. Use the GST_PAD_PROBE_TYPE_BUFFER_LIST when registering the probe. \nAn event travels over a pad. Use the GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM and GST_PAD_PROBE_TYPE_EVENT_UPSTREAM flags to select downstream and upstream events. There is also a convenience GST_PAD_PROBE_TYPE_EVENT_BOTH to be notified of events going both upstream and downstream. By default flush events do not cause a notification. You need to explicitly enable GST_PAD_PROBE_TYPE_EVENT_FLUSH to receive callbacks from flushing events. Events are always only notified in push mode. \nYou can use this probe to inspect modify or drop the event. \nA query travels over a pad. Use the GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM and GST_PAD_PROBE_TYPE_QUERY_UPSTREAM flags to select downstream and upstream queries. The convenience GST_PAD_PROBE_TYPE_QUERY_BOTH can also be used to select both directions. Query probes will be notified twice once when the query travels upstream downstream and once when the query result is returned. You can select in what stage the callback will be called with the GST_PAD_PROBE_TYPE_PUSH and GST_PAD_PROBE_TYPE_PULL respectively when the query is performed and when the query result is returned. \nYou can use this probe to inspect or modify the query. You can also answer the query in the probe callback by placing the result value in the query and by returning GST_PAD_PROBE_DROP from the callback. \nIn addition to notifying you of dataflow you can also ask the probe to block the dataflow when the callback returns. This is called a blocking probe and is activated by specifying the GST_PAD_PROBE_TYPE_BLOCK flag. You can use this flag with the other flags to only block dataflow on selected activity. A pad becomes unblocked again if you remove the probe or when you return GST_PAD_PROBE_REMOVE from the callback. You can let only the currently blocked item pass by returning GST_PAD_PROBE_PASS from the callback it will block again on the next item. \nBlocking probes are used to temporarily block pads because they are unlinked or because you are going to unlink them. If the dataflow is not blocked the pipeline would go into an error state if data is pushed on an unlinked pad. We will se how to use blocking probes to partially preroll a pipeline. See also Play a region of a media file. \nBe notified when no activity is happening on a pad. You install this probe with the GST_PAD_PROBE_TYPE_IDLE flag. You can specify GST_PAD_PROBE_TYPE_PUSH and or GST_PAD_PROBE_TYPE_PULL to only be notified depending on the pad scheduling mode. The IDLE probe is also a blocking probe in that it will not let any data pass on the pad for as long as the IDLE probe is installed. \nYou can use idle probes to dynamically relink a pad. We will see how to use idle probes to replace an element in the pipeline. See also Dynamically changing the pipeline. \n"});