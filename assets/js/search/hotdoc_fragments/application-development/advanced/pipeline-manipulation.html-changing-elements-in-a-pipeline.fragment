fragment_downloaded_cb({"url": "application-development/advanced/pipeline-manipulation.html#changing-elements-in-a-pipeline", "fragment": "Changing elements in a pipeline \nIn the next example we look at the following chain of elements \nWe want to change element2 by element4 while the pipeline is in the PLAYING state. Let s say that element2 is a visualization and that you want to switch the visualization in the pipeline. \nWe can t just unlink element2 s sinkpad from element1 s source pad because that would leave element1 s source pad unlinked and would cause a streaming error in the pipeline when data is pushed on the source pad. The technique is to block the dataflow from element1 s source pad before we change element2 by element4 and then resume dataflow as shown in the following steps \nBlock element1 s source pad with a blocking pad probe. When the pad is blocked the probe callback will be called. \nInside the block callback nothing is flowing between element1 and element2 and nothing will flow until unblocked. \nUnlink element1 and element2. \nMake sure data is flushed out of element2. Some elements might internally keep some data you need to make sure not to lose data by forcing it out of element2. You can do this by pushing EOS into element2 like this \nPut an event probe on element2 s source pad. \nSend EOS to element2 s sinkpad. This makes sure the all the data inside element2 is forced out. \nWait for the EOS event to appear on element2 s source pad. When the EOS is received drop it and remove the event probe. \nUnlink element2 and element3. You can now also remove element2 from the pipeline and set the state to NULL. \nAdd element4 to the pipeline if not already added. Link element4 and element3. Link element1 and element4. \nMake sure element4 is in the same state as the rest of the elements in the pipeline. It should be at least in the PAUSED state before it can receive buffers and events. \nUnblock element1 s source pad probe. This will let new data into element4 and continue streaming. \nThe above algorithm works when the source pad is blocked i.e. when there is dataflow in the pipeline. If there is no dataflow there is also no point in changing the element just yet so this algorithm can be used in the PAUSED state as well. \nLet show you how this works with an example. This example changes the video effect on a simple pipeline every second. \nNote how we added videoconvert elements before and after the effect. This is needed because some elements might operate in different colorspaces than other elements. By inserting the conversion elements you ensure that the right format can be negotiated at any time. \n"});