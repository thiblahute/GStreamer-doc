fragment_downloaded_cb({"url": "application-development/advanced/pipeline-manipulation.html#data-probes", "fragment": "Data probes \nData probes allow you to be notified when there is data passing on a pad. When adding the probe specify the GST_PAD_PROBE_TYPE_BUFFER and or GST_PAD_PROBE_TYPE_BUFFER_LIST. \nData probes run in pipeline streaming thread context so callbacks should try to not block and generally not do any weird stuff since this could have a negative impact on pipeline performance or in case of bugs cause deadlocks or crashes. More precisely one should usually not call any GUI related functions from within a probe callback nor try to change the state of the pipeline. An application may post custom messages on the pipeline s bus though to communicate with the main application thread and have it do things like stop the pipeline. \nIn any case most common buffer operations that elements can do in _chain functions can be done in probe callbacks as well. The example below gives a short impression on how to use them. \nCompare that output with the output of gst launch videotestsrc xvimagesink just so you know what you re looking for. \nStrictly speaking a pad probe callback is only allowed to modify the buffer content if the buffer is writable. Whether this is the case or not depends a lot on the pipeline and the elements involved. Often enough this is the case but sometimes it is not and if it is not then unexpected modification of the data or metadata can introduce bugs that are very hard to debug and track down. You can check if a buffer is writable with gst_buffer_is_writable Since you can pass back a different buffer than the one passed in it is a good idea to make the buffer writable in the callback function with gst_buffer_make_writable \nPad probes are suited best for looking at data as it passes through the pipeline. If you need to modify data you should better write your own GStreamer element. Base classes like GstAudioFilter GstVideoFilter or GstBaseTransform make this fairly easy. \nIf you just want to inspect buffers as they pass through the pipeline you don t even need to set up pad probes. You could also just insert an identity element into the pipeline and connect to its handoff signal. The identity element also provides a few useful debugging tools like the dump property or the last message property the latter is enabled by passing the v switch to gst launch and by setting the silent property on the identity to FALSE \n"});