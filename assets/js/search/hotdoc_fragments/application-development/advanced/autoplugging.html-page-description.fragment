fragment_downloaded_cb({"url": "application-development/advanced/autoplugging.html#page-description", "fragment": "In Your first application you ve learned to build a simple media player for Ogg Vorbis files. By using alternative elements you are able to build media players for other media types such as Ogg Speex MP3 or even video formats. However you would rather want to build an application that can automatically detect the media type of a stream and automatically generate the best possible pipeline by looking at all available elements in a system. This process is called autoplugging and GStreamer contains high quality autopluggers. If you re looking for an autoplugger don t read any further and go to Playback Components. This chapter will explain the concept of autoplugging and typefinding. It will explain what systems GStreamer includes to dynamically detect the type of a media stream and how to generate a pipeline of decoder elements to playback this media. The same principles can also be used for transcoding. Because of the full dynamicity of this concept GStreamer can be automatically extended to support new media types without needing any adaptations to its autopluggers. \nWe will first introduce the concept of Media types as a dynamic and extendible way of identifying media streams. After that we will introduce the concept of typefinding to find the type of a media stream. Lastly we will explain how autoplugging and the GStreamer registry can be used to setup a pipeline that will convert media from one mediatype to another for example for media decoding. \nWe have previously introduced the concept of capabilities as a way for elements or rather pads to agree on a media type when streaming data from one element to the next see Capabilities of a pad We have explained that a capability is a combination of a media type and a set of properties. For most container formats those are the files that you will find on your hard disk Ogg for example is a container format no properties are needed to describe the stream. Only a media type is needed. A full list of media types and accompanying properties can be found in the Plugin Writer s Guide. \nAn element must associate a media type to its source and sink pads when it is loaded into the system. GStreamer knows about the different elements and what type of data they expect and emit through the GStreamer registry. This allows for very dynamic and extensible element creation as we will see. \nIn Your first application we ve learned to build a music player for Ogg Vorbis files. Let s look at the media types associated with each pad in this pipeline. The Hello world pipeline with media types shows what media type belongs to each pad in this pipeline. \n\nNow that we have an idea how GStreamer identifies known media streams we can look at methods GStreamer uses to setup pipelines for media handling and for media type detection. \nUsually when loading a media stream the type of the stream is not known. This means that before we can choose a pipeline to decode the stream we first need to detect the stream type. GStreamer uses the concept of typefinding for this. Typefinding is a normal part of a pipeline it will read data for as long as the type of a stream is unknown. During this period it will provide data to all plugins that implement a typefinder. When one of the typefinders recognizes the stream the typefind element will emit a signal and act as a passthrough module from that point on. If no type was found it will emit an error and further media processing will stop. \nOnce the typefind element has found a type the application can use this to plug together a pipeline to decode the media stream. This will be discussed in the next section. \nPlugins in GStreamer can as mentioned before implement typefinder functionality. A plugin implementing this functionality will submit a media type optionally a set of file extensions commonly used for this media type and a typefind function. Once this typefind function inside the plugin is called the plugin will see if the data in this media stream matches a specific pattern that marks the media type identified by that media type. If it does it will notify the typefind element of this fact telling which mediatype was recognized and how certain we are that this stream is indeed that mediatype. Once this run has been completed for all plugins implementing a typefind functionality the typefind element will tell the application what kind of media stream it thinks to have recognized. \nThe following code should explain how to use the typefind element. It will print the detected media type or tell that the media type was not found. The next section will introduce more useful behaviours such as plugging together a decoding pipeline. \nOnce a media type has been detected you can plug an element e.g. a demuxer or decoder to the source pad of the typefind element and decoding of the media stream will start right after. \nSee Playback Components for using the high level object that you can use to dynamically construct pipelines. \n"});