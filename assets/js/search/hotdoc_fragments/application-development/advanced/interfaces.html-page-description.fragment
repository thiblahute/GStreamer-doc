fragment_downloaded_cb({"url": "application-development/advanced/interfaces.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"interfaces.md\">\n        <h1 id=\"interfaces\">Interfaces</h1>\n<p>In <a href=\"../basics/elements.html#using-an-element-as-a-gobject\">Using an element as a GObject</a>, you have\nlearned how to use <code>GObject</code> properties as a simple way to do\ninteraction between applications and elements. This method suffices for\nthe simple'n'straight settings, but fails for anything more complicated\nthan a getter and setter. For the more complicated use cases, GStreamer\nuses interfaces based on the GObject\n<a href=\"http://library.gnome.org/devel/gobject/stable/gtype-non-instantiable-classed.html\"><code>GTypeInterface</code></a>\ntype.</p>\n<p>Most of the interfaces handled here will not contain any example code.\nSee the API references for details. Here, we will just describe the\nscope and purpose of each interface.</p>\n<h2 id=\"the-uri-interface\">The URI interface</h2>\n<p>In all examples so far, we have only supported local files through the\n\u201cfilesrc\u201d element. GStreamer, obviously, supports many more location\nsources. However, we don't want applications to need to know any\nparticular element implementation details, such as element names for\nparticular network source types and so on. Therefore, there is a URI\ninterface, which can be used to get the source element that supports a\nparticular URI type. There is no strict rule for URI naming, but in\ngeneral we follow naming conventions that others use, too. For example,\nassuming you have the correct plugins installed, GStreamer supports\n\u201cfile:///&lt;path&gt;/&lt;file&gt;\u201d, \u201chttp://&lt;host&gt;/&lt;path&gt;/&lt;file&gt;\u201d,\n\u201cmms://&lt;host&gt;/&lt;path&gt;/&lt;file&gt;\u201d, and so on.</p>\n<p>In order to get the source or sink element supporting a particular URI,\nuse <code>gst_element_make_from_uri ()</code>, with the URI type being either\n<code>GST_URI_SRC</code> for a source element, or <code>GST_URI_SINK</code> for a sink\nelement.</p>\n<p>You can convert filenames to and from URIs using GLib's\n<code>g_filename_to_uri ()</code> and <code>g_uri_to_filename ()</code>.</p>\n<h2 id=\"the-color-balance-interface\">The Color Balance interface</h2>\n<p>The colorbalance interface is a way to control video-related properties\non an element, such as brightness, contrast and so on. It's sole reason\nfor existence is that, as far as its authors know, there's no way to\ndynamically register properties using <code>GObject</code>.</p>\n<p>The colorbalance interface is implemented by several plugins, including\nxvimagesink and the Video4linux2 elements.</p>\n<h2 id=\"the-video-overlay-interface\">The Video Overlay interface</h2>\n<p>The Video Overlay interface was created to solve the problem of\nembedding video streams in an application window. The application\nprovides an window handle to the element implementing this interface to\ndraw on, and the element will then use this window handle to draw on\nrather than creating a new toplevel window. This is useful to embed\nvideo in video players.</p>\n<p>This interface is implemented by, amongst others, the Video4linux2\nelements and by ximagesink, xvimagesink and sdlvideosink.</p>\n\n        \n\n    </div>\n\n\n        "});