fragment_downloaded_cb({"url": "application-development/advanced/buffering.html#buffering", "fragment": "Buffering \nThe purpose of buffering is to accumulate enough data in a pipeline so that playback can occur smoothly and without interruptions. It is typically done when reading from a slow and non live network source but can also be used for live sources. \nGStreamer provides support for the following use cases \nBuffering up to a specific amount of data in memory before starting playback so that network fluctuations are minimized. See Stream buffering. \nDownload of the network file to a local disk with fast seeking in the downloaded data. This is similar to the quicktime youtube players. See Download buffering. \nCaching of semi live streams to a local on disk ringbuffer with seeking in the cached area. This is similar to tivo like timeshifting. See Timeshift buffering. \nGStreamer can provide the application with progress reports about the current buffering state as well as let the application decide on how to buffer and when the buffering stops. \nIn the most simple case the application has to listen for BUFFERING messages on the bus. If the percent indicator inside the BUFFERING message is smaller than the pipeline is buffering. When a message is received with percent buffering is complete. In the buffering state the application should keep the pipeline in the PAUSED state. When buffering completes it can put the pipeline back in the PLAYING state. \nWhat follows is an example of how the message handler could deal with the BUFFERING messages. We will see more advanced methods in Buffering strategies. \n"});