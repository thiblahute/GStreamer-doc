fragment_downloaded_cb({"url": "application-development/basics/elements.html#page-description", "fragment": "Filters convertors demuxers muxers and codecs \nGetting information about an element using a factory \nFinding out what pads an element can contain \nSource elements do not accept data they only generate data. You can see this in the figure because it only has a source pad on the right A source pad can only generate data. \nFilters and filter like elements have both input and outputs pads. They operate on data that they receive on their input sink pads and will provide data on their output source pads. Examples of such elements are a volume element filter a video scaler convertor an Ogg demuxer or a Vorbis decoder. \nFilter like elements can have any number of source or sink pads. A video demuxer for example would have one sink pad and several N source pads one for each elementary stream contained in the container format. Decoders on the other hand will only have one source and sink pads. \n\nVisualisation of a filter element shows how we will visualise a filter like element. This specific element has one source and one sink element. Sink pads receiving input data are depicted at the left of the element source pads are still on the right. \n\nVisualisation of a filter element with more than one output pad shows another filter like element this one having more than one output source pad. An example of one such element could for example be an Ogg demuxer for an Ogg stream containing both audio and video. One source pad will contain the elementary video stream another will contain the elementary audio stream. Demuxers will generally fire signals when a new pad is created. The application programmer can then handle the new elementary stream in the signal handler. \nTools like gst inspect will provide some generic information about an element such as the person that wrote the plugin a descriptive name and a shortname a rank and a category. The category can be used to get the type of the element that can be created using this element factory. Examples of categories include Codec Decoder Video video decoder Codec Encoder Video video encoder Source Video a video generator Sink Video a video output and all these exist for audio as well of course. Then there s also Codec Demuxer and Codec Muxer and a whole lot more. gst inspect will give a list of all factories and gst inspect factory name will list all of the above information and a lot more. \nYou can use gst_registry_pool_feature_list GST_TYPE_ELEMENT_FACTORY to get a list of all the element factories that GStreamer knows about. \nPerhaps the most powerful feature of element factories is that they contain a full description of the pads that the element can generate and the capabilities of those pads in layman words what types of media can stream over those pads without actually having to load those plugins into memory. This can be used to provide a codec selection list for encoders or it can be used for autoplugging purposes for media players. All current GStreamer based media players and autopluggers work this way. We ll look closer at these features as we learn about GstPad and GstCaps in the next chapter Pads and capabilities \nBy linking these three elements we have created a very simple chain of elements. The effect of this will be that the output of the source element element1 will be used as input for the filter like element element2 The filter like element will do something with the data and send the result to the final sink element element3 \nImagine the above graph as a simple Ogg Vorbis audio decoder. The source is a disk source which reads the file from disc. The second element is a Ogg Vorbis audio decoder. The sink element is your soundcard playing back the decoded audio data. We will use this simple graph to construct an Ogg Vorbis player later in this manual. \nIn code the above graph is written like this \nFor more specific behaviour there are also the functions gst_element_link and gst_element_link_pads You can also obtain references to individual pads and link those using various gst_pad_link_ functions. See the API references for more details. \nImportant you must add elements to a bin or pipeline before linking them since adding an element to a bin will disconnect any already existing links. Also you cannot directly link elements that are not in the same bin or pipeline if you want to link elements or pads at different hierarchy levels you will need to use ghost pads more about ghost pads later see Ghost pads \n"});