fragment_downloaded_cb({"url": "application-development/basics/elements.html#using-an-element-as-a-gobject", "fragment": "Using an element as a GObject \nA GstElement can have several properties which are implemented using standard GObject properties. The usual GObject methods to query set and get property values and GParamSpecs are therefore supported. \nEvery GstElement inherits at least one property from its parent GstObject the name property. This is the name you provide to the functions gst_element_factory_make or gst_element_factory_create You can get and set this property using the functions gst_object_set_name and gst_object_get_name or use the GObject property mechanism as shown below. \nMost plugins provide additional properties to provide more information about their configuration or to configure the element. gst inspect is a useful tool to query the properties of a particular element it will also use property introspection to give a short explanation about the function of the property and about the parameter types and ranges it supports. See gst inspect in the appendix for details about gst inspect. \nFor more information about GObject properties we recommend you read the GObject manual and an introduction to The Glib Object system. \nA GstElement also provides various GObject signals that can be used as a flexible callback mechanism. Here too you can use gst inspect to see which signals a specific element supports. Together signals and properties are the most basic way in which elements and applications interact. \n"});