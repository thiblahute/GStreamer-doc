fragment_downloaded_cb({"url": "application-development/basics/elements.html#visualisation-of-three-linked-elements", "fragment": "By linking these three elements we have created a very simple chain of elements. The effect of this will be that the output of the source element element1 will be used as input for the filter like element element2 The filter like element will do something with the data and send the result to the final sink element element3 \nImagine the above graph as a simple Ogg Vorbis audio decoder. The source is a disk source which reads the file from disc. The second element is a Ogg Vorbis audio decoder. The sink element is your soundcard playing back the decoded audio data. We will use this simple graph to construct an Ogg Vorbis player later in this manual. \nIn code the above graph is written like this \nFor more specific behaviour there are also the functions gst_element_link and gst_element_link_pads You can also obtain references to individual pads and link those using various gst_pad_link_ functions. See the API references for more details. \nImportant you must add elements to a bin or pipeline before linking them since adding an element to a bin will disconnect any already existing links. Also you cannot directly link elements that are not in the same bin or pipeline if you want to link elements or pads at different hierarchy levels you will need to use ghost pads more about ghost pads later see Ghost pads \n"});