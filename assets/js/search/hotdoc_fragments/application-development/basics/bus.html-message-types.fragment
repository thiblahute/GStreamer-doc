fragment_downloaded_cb({"url": "application-development/basics/bus.html#message-types", "fragment": "Message types \nGStreamer has a few pre defined message types that can be passed over the bus. The messages are extensible however. Plug ins can define additional messages and applications can decide to either have specific code for those or ignore them. All applications are strongly recommended to at least handle error messages by providing visual feedback to the user. \nAll messages have a message source type and timestamp. The message source can be used to see which element emitted the message. For some messages for example only the ones emitted by the top level pipeline will be interesting to most applications e.g. for state change notifications Below is a list of all messages and a short explanation of what they do and how to parse message specific content. \nError warning and information notifications those are used by elements if a message should be shown to the user about the state of the pipeline. Error messages are fatal and terminate the data passing. The error should be repaired to resume pipeline activity. Warnings are not fatal but imply a problem nevertheless. Information messages are for non problem notifications. All those messages contain a GError with the main error type and message and optionally a debug string. Both can be extracted using gst_message_parse_error _parse_warning and _parse_info Both error and debug strings should be freed after use. \nEnd of stream notification this is emitted when the stream has ended. The state of the pipeline will not change but further media handling will stall. Applications can use this to skip to the next song in their playlist. After end of stream it is also possible to seek back in the stream. Playback will then continue automatically. This message has no specific arguments. \nTags emitted when metadata was found in the stream. This can be emitted multiple times for a pipeline e.g. once for descriptive metadata such as artist name or song title and another one for stream information such as samplerate and bitrate Applications should cache metadata internally. gst_message_parse_tag should be used to parse the taglist which should be gst_tag_list_unref ed when no longer needed. \nState changes emitted after a successful state change. gst_message_parse_state_changed can be used to parse the old and new state of this transition. \nBuffering emitted during caching of network streams. One can manually extract the progress in percent from the message by extracting the buffer percent property from the structure returned by gst_message_get_structure See also Buffering \nElement messages these are special messages that are unique to certain elements and usually represent additional features. The element s documentation should mention in detail which element messages a particular element may send. As an example the qtdemux QuickTime demuxer element may send a redirect element message on certain occasions if the stream contains a redirect instruction. \nApplication specific messages any information on those can be extracted by getting the message structure see above and reading its fields. Usually these messages can safely be ignored. \nApplication messages are primarily meant for internal use in applications in case the application needs to marshal information from some thread into the main thread. This is particularly useful when the application is making use of element signals as those signals will be emitted in the context of the streaming thread \n"});