fragment_downloaded_cb({"url": "application-development/basics/helloworld.html#hello-world", "fragment": "Hello world \nWe re going to create a simple first application a simple Ogg Vorbis command line audio player. For this we will use only standard GStreamer components. The player will read a file specified on the command line. Let s get started \nWe ve learned in Initializing GStreamer that the first thing to do in your application is to initialize GStreamer by calling gst_init Also make sure that the application includes gst gst.h so all function names and objects are properly defined. Use include gst gst.h to do that. \nNext you ll want to create the different elements using gst_element_factory_make For an Ogg Vorbis audio player we ll need a source element that reads files from a disk. GStreamer includes this element under the name filesrc Next we ll need something to parse the file and decode it into raw audio. GStreamer has two elements for this the first parses Ogg streams into elementary streams video audio and is called oggdemux The second is a Vorbis audio decoder it s conveniently called vorbisdec Since oggdemux creates dynamic pads for each elementary stream you ll need to set a pad added event handler on the oggdemux element like you ve learned in Dynamic or sometimes pads to link the Ogg demuxer and the Vorbis decoder elements together. At last we ll also need an audio output element we will use autoaudiosink which automatically detects your audio device. \nThe last thing left to do is to add all elements into a container element a GstPipeline and wait until we ve played the whole song. We ve previously learned how to add elements to a container bin in Bins and we ve learned about element states in Element States. We will also attach a message handler to the pipeline bus so we can retrieve errors and detect the end of stream. \nLet s now add all the code together to get our very first audio player \nWe now have created a complete pipeline. We can visualise the pipeline as follows \n\n"});