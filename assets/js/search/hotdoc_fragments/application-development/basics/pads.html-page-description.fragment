fragment_downloaded_cb({"url": "application-development/basics/pads.html#page-description", "fragment": "What capabilities are used for \nUsing capabilities for metadata \nCreating capabilities for filtering \nCapabilities short caps describe the type of data that is streamed between two pads or that one pad template supports. This makes them very useful for various purposes \nAutoplugging automatically finding elements to link to a pad based on its capabilities. All autopluggers use this method. \nCompatibility detection when two pads are linked GStreamer can verify if the two pads are talking about the same media type. The process of linking two pads and checking if they are compatible is called caps negotiation \nMetadata by reading the capabilities from a pad applications can provide information about the type of media that is being streamed over the pad which is information about the stream that is currently being played back. \nFiltering an application can use capabilities to limit the possible media types that can stream between two pads to a specific subset of their supported stream types. An application can for example use filtered caps to set a specific fixed or non fixed video size that should stream between two pads. You will see an example of filtered caps later in this manual in Manually adding or removing data from to a pipeline. You can do caps filtering by inserting a capsfilter element into your pipeline and setting its caps property. Caps filters are often placed after converter elements like audioconvert audioresample videoconvert or videoscale to force those converters to convert data to a specific output format at a certain point in a stream. \nA pad can have a set i.e. one or more of capabilities attached to it. Capabilities GstCaps are represented as an array of one or more GstStructures and each GstStructure is an array of fields where each field consists of a field name string e.g. width and a typed value e.g. G_TYPE_INT or GST_TYPE_INT_RANGE \nNote that there is a distinct difference between the possible capabilities of a pad ie. usually what you find as caps of pad templates as they are shown in gst inspect the allowed caps of a pad can be the same as the pad s template caps or a subset of them depending on the possible caps of the peer pad and lastly negotiated caps these describe the exact format of a stream or buffer and contain exactly one structure and have no variable bits like ranges or lists ie. they are fixed caps \nYou can get values of properties in a set of capabilities by querying individual properties of one structure. You can get a structure from a caps using gst_caps_get_structure and the number of structures in a GstCaps using gst_caps_get_size \nCaps are called simple caps when they contain only one structure and fixed caps when they contain only one structure and have no variable field types like ranges or lists of possible values Two other special types of caps are ANY caps and empty caps. \nHere is an example of how to extract the width and height from a set of fixed video caps \nWhile capabilities are mainly used inside a plugin to describe the media type of the pads the application programmer often also has to have basic understanding of capabilities in order to interface with the plugins especially when using filtered caps. When you re using filtered caps or fixation you re limiting the allowed types of media that can stream between two pads to a subset of their supported media types. You do this using a capsfilter element in your pipeline. In order to do this you also need to create your own GstCaps. The easiest way to do this is by using the convenience function gst_caps_new_simple \nThis will force the data flow between those two elements to a certain video format width height and framerate or the linking will fail if that cannot be achieved in the context of the elements involved Keep in mind that when you use gst_element_link_filtered it will automatically create a capsfilter element for you and insert it into your bin or pipeline between the two elements you want to connect this is important if you ever want to disconnect those elements because then you will have to disconnect both elements from the capsfilter instead \nIn some cases you will want to create a more elaborate set of capabilities to filter a link between two pads. Then this function is too simplistic and you ll want to use the method gst_caps_new_full \nSee the API references for the full API of GstStructure and GstCaps. \nA ghost pad is a pad from some element in the bin that can be accessed directly from the bin as well. Compare it to a symbolic link in UNIX filesystems. Using ghost pads on bins the bin also has a pad and can transparently be used as an element in other parts of your code. \n\nVisualisation of a GstBin element with a ghost pad is a representation of a ghost pad. The sink pad of element one is now also a pad of the bin. Because ghost pads look and work like any other pads they can be added to any type of elements not just to a GstBin just like ordinary pads. \nA ghostpad is created using the function gst_ghost_pad_new \nIn the above example the bin now also has a pad the pad called sink of the given element. The bin can from here on be used as a substitute for the sink element. You could for example link another element to the bin. \n"});