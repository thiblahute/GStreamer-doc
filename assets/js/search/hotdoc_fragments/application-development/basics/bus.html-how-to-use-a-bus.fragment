fragment_downloaded_cb({"url": "application-development/basics/bus.html#how-to-use-a-bus", "fragment": "How to use a bus \nThere are two different ways to use a bus \nRun a GLib Gtk main loop or iterate the default GLib main context yourself regularly and attach some kind of watch to the bus. This way the GLib main loop will check the bus for new messages and notify you whenever there are messages. \nTypically you would use gst_bus_add_watch or gst_bus_add_signal_watch in this case. \nTo use a bus attach a message handler to the bus of a pipeline using gst_bus_add_watch This handler will be called whenever the pipeline emits a message to the bus. In this handler check the signal type see next section and do something accordingly. The return value of the handler should be TRUE to keep the handler attached to the bus return FALSE to remove it. \nCheck for messages on the bus yourself. This can be done using gst_bus_peek and or gst_bus_poll \nIt is important to know that the handler will be called in the thread context of the mainloop. This means that the interaction between the pipeline and application over the bus is asynchronous and thus not suited for some real time purposes such as cross fading between audio tracks doing theoretically gapless playback or video effects. All such things should be done in the pipeline context which is easiest by writing a GStreamer plug in. It is very useful for its primary purpose though passing messages from pipeline to application. The advantage of this approach is that all the threading that GStreamer does internally is hidden from the application and the application developer does not have to worry about thread issues at all. \nNote that if you re using the default GLib mainloop integration you can instead of attaching a watch connect to the message signal on the bus. This way you don t have to switch on all possible message types just connect to the interesting signals in form of message type where type is a specific message type see the next section for an explanation of message types \nThe above snippet could then also be written as \nIf you aren t using GLib mainloop the asynchronous message signals won t be available by default. You can however install a custom sync handler that wakes up the custom mainloop and that uses gst_bus_async_signal_func to emit the signals. see also documentation for details \n"});