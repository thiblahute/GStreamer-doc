fragment_downloaded_cb({"url": "application-development/appendix/porting-1.0.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"porting-1.0.md\">\n<h1 id=\"porting-010-applications-to-10\">Porting 0.10 applications to 1.0</h1>\n<p>This section outlines some of the changes necessary to port applications\nfrom GStreamer-0.10 to GStreamer-1.0. For a comprehensive and up-to-date\nlist, see the separate <a href=\"http://cgit.freedesktop.org/gstreamer/gstreamer/plain/docs/random/porting-to-1.0.txt\">Porting\nto 1.0</a>\ndocument.</p>\n<p>It should be possible to port simple applications to GStreamer-1.0 in\nless than a day.</p>\n<h2 id=\"list-of-changes\">List of changes</h2>\n<ul>\n<li>\n<p>All deprecated methods were removed. Recompile against 0.10 with\nGST_DISABLE_DEPRECATED defined (such as by adding\n-DGST_DISABLE_DEPRECATED to the compiler flags) and fix issues\nbefore attempting to port to 1.0.</p>\n</li>\n<li>\n<p>\"playbin2\" has been renamed to \"playbin\", with similar API</p>\n</li>\n<li>\n<p>\"decodebin2\" has been renamed to \"decodebin\", with similar API. Note\nthat there is no longer a \"new-decoded-pad\" signal, just use\nGstElement's \"pad-added\" signal instead (but don't forget to remove\nthe 'gboolean last' argument from your old signal callback functino\nsignature).</p>\n</li>\n<li>\n<p>the names of some \"formatted\" pad templates has been changed from\ne.g. \"src%d\" to \"src%u\" or \"src_%u\" or similar, since we don't want\nto see negative numbers in pad names. This mostly affects\napplications that create request pads from elements.</p>\n</li>\n<li>\n<p>some elements that used to have a single dynamic source pad have a\nsource pad now. Example: wavparse, id3demux, iceydemux, apedemux.\n(This does not affect applications using decodebin or playbin).</p>\n</li>\n<li>\n<p>playbin now proxies the GstVideoOverlay (former GstXOverlay)\ninterface, so most applications can just remove the sync bus handler\nwhere they would set the window ID, and instead just set the window\nID on playbin from the application thread before starting playback.</p>\n<p>playbin also proxies the GstColorBalance and GstNavigation\ninterfaces, so applications that use this don't need to go fishing\nfor elements that may implement those any more, but can just use on\nplaybin unconditionally.</p>\n</li>\n<li>\n<p>multifdsink, tcpclientsink, tcpclientsrc, tcpserversrc the protocol\nproperty is removed, use gdppay and gdpdepay.</p>\n</li>\n<li>\n<p>XML serialization was removed.</p>\n</li>\n<li>\n<p>Probes and pad blocking was merged into new pad probes.</p>\n</li>\n<li>\n<p>Position, duration and convert functions no longer use an inout\nparameter for the destination format.</p>\n</li>\n<li>\n<p>Video and audio caps were simplified. audio/x-raw-int and\naudio/x-raw-float are now all under the audio/x-raw media type.\nSimilarly, video/x-raw-rgb and video/x-raw-yuv are now video/x-raw.</p>\n</li>\n<li>\n<p>ffmpegcolorspace was removed and replaced with videoconvert.</p>\n</li>\n<li>\n<p>GstMixerInterface / GstTunerInterface were removed without\nreplacement.</p>\n</li>\n<li>\n<p>The GstXOverlay interface was renamed to GstVideoOverlay, and now\npart of the video library in gst-plugins-base, as the interfaces\nlibrary no longer exists.</p>\n<p>The name of the GstXOverlay \"prepare-xwindow-id\" message has changed\nto \"prepare-window-handle\" (and GstXOverlay has been renamed to\nGstVideoOverlay). Code that checks for the string directly should be\nchanged to use\ngst_is_video_overlay_prepare_window_handle_message(message)\ninstead.</p>\n</li>\n<li>\n<p>The GstPropertyProbe interface was removed. There is no replacement\nfor it in GStreamer 1.0.x and 1.2.x, but since version 1.4 there is\na more featureful replacement for device discovery and feature\nquerying provided by GstDeviceMonitor, GstDevice, and friends. See\nthe <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/gstreamer-device-probing.html\">\"GStreamer Device Discovery and Device Probing\"\ndocumentation</a>.</p>\n</li>\n<li>\n<p>gst_uri_handler_get_uri() and the get_uri vfunc now return a\ncopy of the URI string</p>\n<p>gst_uri_handler_set_uri() and the set_uri vfunc now take an\nadditional GError argument so the handler can notify the caller why\nit didn't accept a particular URI.</p>\n<p>gst_uri_handler_set_uri() now checks if the protocol of the URI\npassed is one of the protocols advertised by the uri handler, so\nset_uri vfunc implementations no longer need to check that as well.</p>\n</li>\n<li>\n<p>GstTagList is now an opaque mini object instead of being typedefed\nto a GstStructure. While it was previously okay (and in some cases\nrequired because of missing taglist API) to cast a GstTagList to a\nGstStructure or use gst_structure_* API on taglists, you can no\nlonger do that. Doing so will cause crashes.</p>\n<p>Also, tag lists are refcounted now, and can therefore not be freely\nmodified any longer. Make sure to call\ngst_tag_list_make_writable (taglist) before adding, removing or\nchanging tags in the taglist.</p>\n<p>GST_TAG_IMAGE, GST_TAG_PREVIEW_IMAGE, GST_TAG_ATTACHMENT:\nmany tags that used to be of type GstBuffer are now of type\nGstSample (which is basically a struct containing a buffer alongside\ncaps and some other info).</p>\n</li>\n<li>\n<p>GstController has now been merged into GstObject. It does not exists\nas an individual object anymore. In addition core contains a\nGstControlSource base class and the GstControlBinding. The actual\ncontrol sources are in the controller library as before. The 2nd big\nchange is that control sources generate a sequence of gdouble values\nand those are mapped to the property type and value range by\nGstControlBindings.</p>\n<p>The whole gst_controller_* API is gone and now available in\nsimplified form under gst_object_*. ControlSources are now\nattached via GstControlBinding to properties. There are no GValue\narguments used anymore when programming control sources.</p>\n</li>\n</ul>\n\n</div>\n\n\n        "});