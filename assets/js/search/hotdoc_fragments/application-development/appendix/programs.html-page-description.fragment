fragment_downloaded_cb({"url": "application-development/appendix/programs.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"programs.md\">\n<h1 id=\"programs\">Programs</h1>\n<h2 id=\"gstlaunch\"><code>gst-launch</code></h2>\n<p>This is a tool that will construct pipelines based on a command-line\nsyntax.</p>\n<p>A simple commandline looks like:</p>\n<pre><code>gst-launch filesrc location=hello.mp3 ! mad ! audioresample ! osssink\n\n</code></pre>\n<p>A more complex pipeline looks like:</p>\n<pre><code>gst-launch filesrc location=redpill.vob ! dvddemux name=demux \\\n demux.audio_00 ! queue ! a52dec ! audioconvert ! audioresample ! osssink \\\n demux.video_00 ! queue ! mpeg2dec ! videoconvert ! xvimagesink\n\n</code></pre>\n<p>You can also use the parser in you own code. GStreamer provides a\nfunction gst_parse_launch () that you can use to construct a pipeline.\nThe following program lets you create an MP3 pipeline using the\ngst_parse_launch () function:</p>\n<pre><code class=\"language-c\">#include &lt;gst/gst.h&gt;\n\nint\nmain (int argc, char *argv[])\n{\n  GstElement *pipeline;\n  GstElement *filesrc;\n  GstMessage *msg;\n  GstBus *bus;\n  GError *error = NULL;\n\n  gst_init (&amp;argc, &amp;argv);\n\n  if (argc != 2) {\n    g_print (\"usage: %s &lt;filename&gt;\\n\", argv[0]);\n    return -1;\n  }\n\n  pipeline = gst_parse_launch (\"filesrc name=my_filesrc ! mad ! osssink\", &amp;error);\n  if (!pipeline) {\n    g_print (\"Parse error: %s\\n\", error-&gt;message);\n    exit (1);\n  }\n\n  filesrc = gst_bin_get_by_name (GST_BIN (pipeline), \"my_filesrc\");\n  g_object_set (filesrc, \"location\", argv[1], NULL);\n  g_object_unref (filesrc);\n\n  gst_element_set_state (pipeline, GST_STATE_PLAYING);\n\n  bus = gst_element_get_bus (pipeline);\n\n  /* wait until we either get an EOS or an ERROR message. Note that in a real\n   * program you would probably not use gst_bus_poll(), but rather set up an\n   * async signal watch on the bus and run a main loop and connect to the\n   * bus's signals to catch certain messages or all messages */\n  msg = gst_bus_poll (bus, GST_MESSAGE_EOS | GST_MESSAGE_ERROR, -1);\n\n  switch (GST_MESSAGE_TYPE (msg)) {\n    case GST_MESSAGE_EOS: {\n      g_print (\"EOS\\n\");\n      break;\n    }\n    case GST_MESSAGE_ERROR: {\n      GError *err = NULL; /* error to show to users                 */\n      gchar *dbg = NULL;  /* additional debug string for developers */\n\n      gst_message_parse_error (msg, &amp;err, &amp;dbg);\n      if (err) {\n        g_printerr (\"ERROR: %s\\n\", err-&gt;message);\n        g_error_free (err);\n      }\n      if (dbg) {\n        g_printerr (\"[Debug details: %s]\\n\", dbg);\n        g_free (dbg);\n      }\n    }\n    default:\n      g_printerr (\"Unexpected message of type %d\", GST_MESSAGE_TYPE (msg));\n      break;\n  }\n  gst_message_unref (msg);\n\n  gst_element_set_state (pipeline, GST_STATE_NULL);\n  gst_object_unref (pipeline);\n  gst_object_unref (bus);\n\n  return 0;\n}\n\n</code></pre>\n<p>Note how we can retrieve the filesrc element from the constructed bin\nusing the element name.</p>\n<h3 id=\"grammar-reference\">Grammar Reference</h3>\n<p>The <code>gst-launch</code> syntax is processed by a flex/bison parser. This\nsection is intended to provide a full specification of the grammar; any\ndeviations from this specification is considered a bug.</p>\n<h4 id=\"elements\">Elements</h4>\n<pre><code>          ... mad ...\n\n</code></pre>\n<p>A bare identifier (a string beginning with a letter and containing only\nletters, numbers, dashes, underscores, percent signs, or colons) will\ncreate an element from a given element factory. In this example, an\ninstance of the \"mad\" MP3 decoding plugin will be created.</p>\n<h4 id=\"links\">Links</h4>\n<pre><code>          ... !sink ...\n\n</code></pre>\n<p>An exclamation point, optionally having a qualified pad name (an the\nname of the pad, optionally preceded by the name of the element) on both\nsides, will link two pads. If the source pad is not specified, a source\npad from the immediately preceding element will be automatically chosen.\nIf the sink pad is not specified, a sink pad from the next element to be\nconstructed will be chosen. An attempt will be made to find compatible\npads. Pad names may be preceded by an element name, as in\n<code>my_element_name.sink_pad</code>.</p>\n<h4 id=\"properties\">Properties</h4>\n<pre><code>          ... location=\"http://gstreamer.net\" ...\n\n</code></pre>\n<p>The name of a property, optionally qualified with an element name, and a\nvalue, separated by an equals sign, will set a property on an element.\nIf the element is not specified, the previous element is assumed.\nStrings can optionally be enclosed in quotation marks. Characters in\nstrings may be escaped with the backtick (<code>\\</code>). If the right-hand side\nis all digits, it is considered to be an integer. If it is all digits\nand a decimal point, it is a double. If it is \"true\", \"false\", \"TRUE\",\nor \"FALSE\" it is considered to be boolean. Otherwise, it is parsed as a\nstring. The type of the property is determined later on in the parsing,\nand the value is converted to the target type. This conversion is not\nguaranteed to work, it relies on the g_value_convert routines. No\nerror message will be displayed on an invalid conversion, due to\nlimitations in the value convert API.</p>\n<h4 id=\"bins-threads-and-pipelines\">Bins, Threads, and Pipelines</h4>\n<pre><code>          ( ... )\n\n</code></pre>\n<p>A pipeline description between parentheses is placed into a bin. The\nopen paren may be preceded by a type name, as in <code>jackbin.( ... )</code> to\nmake a bin of a specified type. Square brackets make pipelines, and\ncurly braces make threads. The default toplevel bin type is a pipeline,\nalthough putting the whole description within parentheses or braces can\noverride this default.</p>\n<h2 id=\"gstinspect\"><code>gst-inspect</code></h2>\n<p>This is a tool to query a plugin or an element about its properties.</p>\n<p>To query the information about the element mad, you would specify:</p>\n<pre><code>gst-inspect mad\n\n</code></pre>\n<p>Below is the output of a query for the osssink element:</p>\n<pre><code>\nFactory Details:\n  Rank:         secondary (128)\n  Long-name:            Audio Sink (OSS)\n  Klass:                Sink/Audio\n  Description:          Output to a sound card via OSS\n  Author:               Erik Walthinsen &lt;omega@cse.ogi.edu&gt;, Wim Taymans &lt;wim.taymans@chello.be&gt;\n\nPlugin Details:\n  Name:                 ossaudio\n  Description:          OSS (Open Sound System) support for GStreamer\n  Filename:             /home/wim/gst/head/gst-plugins-good/sys/oss/.libs/libgstossaudio.so\n  Version:              1.0.0.1\n  License:              LGPL\n  Source module:        gst-plugins-good\n  Source release date:  2012-09-25 12:52 (UTC)\n  Binary package:       GStreamer Good Plug-ins git\n  Origin URL:           Unknown package origin\n\nGObject\n +----GInitiallyUnowned\n       +----GstObject\n             +----GstElement\n                   +----GstBaseSink\n                         +----GstAudioBaseSink\n                               +----GstAudioSink\n                                     +----GstOssSink\n\nPad Templates:\n  SINK template: 'sink'\n    Availability: Always\n    Capabilities:\n      audio/x-raw\n                 format: { S16LE, U16LE, S8, U8 }\n                 layout: interleaved\n                   rate: [ 1, 2147483647 ]\n               channels: 1\n      audio/x-raw\n                 format: { S16LE, U16LE, S8, U8 }\n                 layout: interleaved\n                   rate: [ 1, 2147483647 ]\n               channels: 2\n           channel-mask: 0x0000000000000003\n\n\nElement Flags:\n  no flags set\n\nElement Implementation:\n  Has change_state() function: gst_audio_base_sink_change_state\n\nClocking Interaction:\n  element is supposed to provide a clock but returned NULL\n\nElement has no indexing capabilities.\nElement has no URI handling capabilities.\n\nPads:\n  SINK: 'sink'\n    Implementation:\n      Has chainfunc(): gst_base_sink_chain\n      Has custom eventfunc(): gst_base_sink_event\n      Has custom queryfunc(): gst_base_sink_sink_query\n      Has custom iterintlinkfunc(): gst_pad_iterate_internal_links_default\n    Pad Template: 'sink'\n\nElement Properties:\n  name                : The name of the object\n                        flags: readable, writable\n                        String. Default: \"osssink0\"\n  parent              : The parent of the object\n                        flags: readable, writable\n                        Object of type \"GstObject\"\n  sync                : Sync on the clock\n                        flags: readable, writable\n                        Boolean. Default: true\n  max-lateness        : Maximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)\n                        flags: readable, writable\n                        Integer64. Range: -1 - 9223372036854775807 Default: -1\n  qos                 : Generate Quality-of-Service events upstream\n                        flags: readable, writable\n                        Boolean. Default: false\n  async               : Go asynchronously to PAUSED\n                        flags: readable, writable\n                        Boolean. Default: true\n  ts-offset           : Timestamp offset in nanoseconds\n                        flags: readable, writable\n                        Integer64. Range: -9223372036854775808 - 9223372036854775807 Default: 0\n  enable-last-sample  : Enable the last-sample property\n                        flags: readable, writable\n                        Boolean. Default: false\n  last-sample         : The last sample received in the sink\n                        flags: readable\n                        Boxed pointer of type \"GstSample\"\n  blocksize           : Size in bytes to pull per buffer (0 = default)\n                        flags: readable, writable\n                        Unsigned Integer. Range: 0 - 4294967295 Default: 4096\n  render-delay        : Additional render delay of the sink in nanoseconds\n                        flags: readable, writable\n                        Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0\n  throttle-time       : The time to keep between rendered buffers\n                        flags: readable, writable\n                        Unsigned Integer64. Range: 0 - 18446744073709551615 Default: 0\n  buffer-time         : Size of audio buffer in microseconds, this is the minimum latency that the sink reports\n                        flags: readable, writable\n                        Integer64. Range: 1 - 9223372036854775807 Default: 200000\n  latency-time        : The minimum amount of data to write in each iteration in microseconds\n                        flags: readable, writable\n                        Integer64. Range: 1 - 9223372036854775807 Default: 10000\n  provide-clock       : Provide a clock to be used as the global pipeline clock\n                        flags: readable, writable\n                        Boolean. Default: true\n  slave-method        : Algorithm to use to match the rate of the masterclock\n                        flags: readable, writable\n                        Enum \"GstAudioBaseSinkSlaveMethod\" Default: 1, \"skew\"\n                           (0): resample         - GST_AUDIO_BASE_SINK_SLAVE_RESAMPLE\n                           (1): skew             - GST_AUDIO_BASE_SINK_SLAVE_SKEW\n                           (2): none             - GST_AUDIO_BASE_SINK_SLAVE_NONE\n  can-activate-pull   : Allow pull-based scheduling\n                        flags: readable, writable\n                        Boolean. Default: false\n  alignment-threshold : Timestamp alignment threshold in nanoseconds\n                        flags: readable, writable\n                        Unsigned Integer64. Range: 1 - 18446744073709551614 Default: 40000000\n  drift-tolerance     : Tolerance for clock drift in microseconds\n                        flags: readable, writable\n                        Integer64. Range: 1 - 9223372036854775807 Default: 40000\n  discont-wait        : Window of time in nanoseconds to wait before creating a discontinuity\n                        flags: readable, writable\n                        Unsigned Integer64. Range: 0 - 18446744073709551614 Default: 1000000000\n  device              : OSS device (usually /dev/dspN)\n                        flags: readable, writable\n                        String. Default: \"/dev/dsp\"\n\n\n</code></pre>\n<p>To query the information about a plugin, you would do:</p>\n<pre><code>gst-inspect gstelements\n\n</code></pre>\n\n</div>\n\n\n        "});