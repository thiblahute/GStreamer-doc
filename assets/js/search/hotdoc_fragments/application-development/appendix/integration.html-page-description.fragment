fragment_downloaded_cb({"url": "application-development/appendix/integration.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"integration.md\">\n<h1 id=\"integration\">Integration</h1>\n<p>GStreamer tries to integrate closely with operating systems (such as\nLinux and UNIX-like operating systems, OS X or Windows) and desktop\nenvironments (such as GNOME or KDE). In this chapter, we'll mention some\nspecific techniques to integrate your application with your operating\nsystem or desktop environment of choice.</p>\n<h2 id=\"linux-and-unixlike-operating-systems\">Linux and UNIX-like operating systems</h2>\n<p>GStreamer provides a basic set of elements that are useful when\nintegrating with Linux or a UNIX-like operating system.</p>\n<ul>\n<li>\n<p>For audio input and output, GStreamer provides input and output\nelements for several audio subsystems. Amongst others, GStreamer\nincludes elements for ALSA (alsasrc, alsasink), OSS (osssrc,\nosssink) Pulesaudio (pulsesrc, pulsesink) and Sun audio\n(sunaudiosrc, sunaudiomixer, sunaudiosink).</p>\n</li>\n<li>\n<p>For video input, GStreamer contains source elements for Video4linux2\n(v4l2src, v4l2element, v4l2sink).</p>\n</li>\n<li>\n<p>For video output, GStreamer provides elements for output to\nX-windows (ximagesink), Xv-windows (xvimagesink; for\nhardware-accelerated video), direct-framebuffer (dfbimagesink) and\nopenGL image contexts (glsink).</p>\n</li>\n</ul>\n<h2 id=\"gnome-desktop\">GNOME desktop</h2>\n<p>GStreamer has been the media backend of the\n<a href=\"http://www.gnome.org/\">GNOME</a> desktop since GNOME-2.2 onwards.\nNowadays, a whole bunch of GNOME applications make use of GStreamer for\nmedia-processing, including (but not limited to)\n<a href=\"http://www.rhythmbox.org/\">Rhythmbox</a>,\n<a href=\"https://wiki.gnome.org/Apps/Videos\">Videos</a> and <a href=\"https://wiki.gnome.org/Apps/SoundJuicer\">Sound\nJuicer</a>.</p>\n<p>Most of these GNOME applications make use of some specific techniques to\nintegrate as closely as possible with the GNOME desktop:</p>\n<ul>\n<li>\n<p>GNOME applications usually call <code>gtk_init ()</code> to parse command-line\noptions and initialize GTK. GStreamer applications would normally\ncall <code>gst_init ()</code> to do the same for GStreamer. This would mean\nthat only one of the two can parse command-line options. To work\naround this issue, GStreamer can provide a GLib <code>GOptionGroup</code> which\ncan be passed to <code>gnome_program_init ()</code>. The following example\nrequires GTK 2.6 or newer (previous GTK versions do not support\ncommand line parsing via GOption yet)</p>\n<pre><code class=\"language-c\">#include &lt;gtk/gtk.h&gt;\n#include &lt;gst/gst.h&gt;\n\nstatic gchar **cmd_filenames = NULL;\n\nstatic GOptionEntries cmd_options[] = {\n  /* here you can add command line options for your application. Check\n   * the GOption section in the GLib API reference for a more elaborate\n   * example of how to add your own command line options here */\n\n  /* at the end we have a special option that collects all remaining\n   * command line arguments (like filenames) for us. If you don't\n   * need this, you can safely remove it */\n  { G_OPTION_REMAINING, 0, 0, G_OPTION_ARG_FILENAME_ARRAY, &amp;cmd_filenames,\n    \"Special option that collects any remaining arguments for us\" },\n\n  /* mark the end of the options array with a NULL option */\n  { NULL, }\n};\n\n/* this should usually be defined in your config.h */\n#define VERSION \"0.0.1\"\n\ngint\nmain (gint argc, gchar **argv)\n{\n  GOptionContext *context;\n  GOptionGroup *gstreamer_group, *gtk_group;\n  GError *err = NULL;\n\n  context = g_option_context_new (\"gtk-demo-app\");\n\n  /* get command line options from GStreamer and add them to the group */\n  gstreamer_group = gst_init_get_option_group ();\n  g_option_context_add_group (context, gstreamer_group);\n  gtk_group = gtk_get_option_group (TRUE);\n  g_option_context_add_group (context, gtk_group);\n\n  /* add our own options. If you are using gettext for translation of your\n   * strings, use GETTEXT_PACKAGE here instead of NULL */\n  g_option_context_add_main_entries (context, cmd_options, NULL);\n\n  /* now parse the commandline options, note that this already\n   * calls gtk_init() and gst_init() */\n  if (!g_option_context_parse (ctx, &amp;argc, &amp;argv, &amp;err)) {\n    g_print (\"Error initializing: %s\\n\", err-&gt;message);\n    g_clear_error (&amp;err);\n    g_option_context_free (ctx);\n    exit (1);\n  }\n  g_option_context_free (ctx);\n\n  /* any filenames we got passed on the command line? parse them! */\n  if (cmd_filenames != NULL) {\n    guint i, num;\n\n    num = g_strv_length (cmd_filenames);\n    for (i = 0; i &lt; num; ++i) {\n      /* do something with the filename ... */\n      g_print (\"Adding to play queue: %s\\n\", cmd_filenames[i]);\n    }\n\n    g_strfreev (cmd_filenames);\n    cmd_filenames = NULL;\n  }\n\n[..]\n\n}\n</code></pre>\n</li>\n<li>\n<p>GNOME uses Pulseaudio for audio, use the pulsesrc and pulsesink\nelements to have access to all the features.</p>\n</li>\n<li>\n<p>GStreamer provides data input/output elements for use with the GIO\nVFS system. These elements are called \u201cgiosrc\u201d and \u201cgiosink\u201d. The\ndeprecated GNOME-VFS system is supported too but shouldn't be used\nfor any new applications.</p>\n</li>\n</ul>\n<h2 id=\"kde-desktop\">KDE desktop</h2>\n<p>GStreamer has been proposed for inclusion in KDE-4.0. Currently,\nGStreamer is included as an optional component, and it's used by several\nKDE applications, including <a href=\"http://amarok.kde.org/\">AmaroK</a>,\n<a href=\"http://www.xs4all.nl/%7Ejjvrieze/kmplayer.html\">KMPlayer</a> and\n<a href=\"http://kaffeine.sourceforge.net/\">Kaffeine</a>.</p>\n<p>Although not yet as complete as the GNOME integration bits, there are\nalready some KDE integration specifics available. This list will\nprobably grow as GStreamer starts to be used in KDE-4.0:</p>\n<ul>\n<li>AmaroK contains a kiosrc element, which is a source element that\nintegrates with the KDE VFS subsystem KIO.</li>\n</ul>\n<h2 id=\"os-x\">OS X</h2>\n<p>GStreamer provides native video and audio output elements for OS X. It\nbuilds using the standard development tools for OS X.</p>\n<h2 id=\"windows\">Windows</h2>\n<blockquote>\n<p><strong>Warning</strong></p>\n<p>Note: this section is out of date. GStreamer-1.0 has much better\nsupport for win32 than previous versions though and should usually\ncompile and work out-of-the-box both using MSYS/MinGW or Microsoft\ncompilers. The <a href=\"http://gstreamer.freedesktop.org\">GStreamer web site</a>\nand the <a href=\"http://news.gmane.org/gmane.comp.video.gstreamer.devel\">mailing list\narchives</a> are\na good place to check the latest win32-related news.</p>\n</blockquote>\n<p>GStreamer builds using Microsoft Visual C .NET 2003 and using Cygwin.</p>\n<h3 id=\"building-gstreamer-under-win32\">Building GStreamer under Win32</h3>\n<p>There are different makefiles that can be used to build GStreamer with\nthe usual Microsoft compiling tools.</p>\n<p>The Makefile is meant to be used with the GNU make program and the free\nversion of the Microsoft compiler\n(<a href=\"http://msdn.microsoft.com/visualc/vctoolkit2003/\">http://msdn.microsoft.com/visualc/vctoolkit2003/</a>). You also have to\nmodify your system environment variables to use it from the\ncommand-line. You will also need a working Platform SDK for Windows that\nis available for free from Microsoft.</p>\n<p>The projects/makefiles will generate automatically some source files\nneeded to compile GStreamer. That requires that you have installed on\nyour system some GNU tools and that they are available in your system\nPATH.</p>\n<p>The GStreamer project depends on other libraries, namely :</p>\n<ul>\n<li>\n<p>GLib</p>\n</li>\n<li>\n<p>libxml2</p>\n</li>\n<li>\n<p>libintl</p>\n</li>\n<li>\n<p>libiconv</p>\n</li>\n</ul>\n<p>Work is being done to provide pre-compiled GStreamer-1.0 libraries as a\npackages for win32. Check the <a href=\"http://gstreamer.freedesktop.org\">GStreamer web\nsite</a> and check our <a href=\"http://news.gmane.org/gmane.comp.video.gstreamer.devel\">mailing\nlist</a> for the\nlatest developments in this respect.</p>\n<blockquote>\n<p><strong>Note</strong></p>\n<p>GNU tools needed that you can find on\n<a href=\"http://gnuwin32.sourceforge.net/\">http://gnuwin32.sourceforge.net/</a></p>\n<ul>\n<li>\n<p>GNU flex (tested with 2.5.4)</p>\n</li>\n<li>\n<p>GNU bison (tested with 1.35)</p>\n</li>\n</ul>\n<p>and <a href=\"http://www.mingw.org/\">http://www.mingw.org/</a></p>\n<ul>\n<li>GNU make (tested with 3.80)</li>\n</ul>\n<p>the generated files from the -auto makefiles will be available soon\nseparately on the net for convenience (people who don't want to\ninstall GNU tools).</p>\n</blockquote>\n<h3 id=\"installation-on-the-system\">Installation on the system</h3>\n<p>FIXME: This section needs be updated for GStreamer-1.0.</p>\n\n</div>\n\n\n        "});