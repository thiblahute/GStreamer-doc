fragment_downloaded_cb({"url": "deploying/multiplatform-using-cerbero.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"multiplatform-using-cerbero.md\">\n<h1 id=\"multiplatform-deployment-using-cerbero\">Multiplatform deployment using Cerbero</h1>\n<p>Cerbero is the build and packaging system used to construct\nGStreamer. It uses \u201crecipe\u201d files that indicate how to build\nparticular projects, and on what other projects they depend.\nMoreover, the built projects can be combined into packages for\ndistribution. These packages are, depending on the target platform,\nWindows or OS X installers or Linux packages.</p>\n<p>To use Cerbero to build and package your application, you just need to\nadd a recipe explaining how to build you application and make it depend\non the <code>gstreamer-sdk</code> project. Then Cerbero can take care of building\nyour application and its dependencies and package them all together.</p>\n<p>Read <a href=\"../installing/building-from-source-using-cerbero.html\">Building from source using Cerbero</a> to learn how\nto install and use Cerbero.</p>\n<p>At this point, after reading the Build from source section in\n<a href=\"../installing/building-from-source-using-cerbero.html\">Building from source using Cerbero</a>, you should be able to\nbuild GStreamer from source and are ready to create recipe and package\nfiles for your application.</p>\n<p>In the Cerbero installation directory you will find the\n<code>cerbero-uninstalled</code> script. Execute it without parameters to see the\nlist of commands it accepts:</p>\n<pre><code class=\"language-bash\">./cerbero-uninstalled\n</code></pre>\n<h2 id=\"adding-a-recipe-for-your-application\">Adding a recipe for your application</h2>\n<p>The first step is to create an empty recipe that you can then tailor to\nyour needs:</p>\n<pre><code class=\"language-bash\">./cerbero-uninstalled add-recipe my-app 1.0\n</code></pre>\n<p>This will create an initial recipe file in <code>recipes/my-app.recipe</code>,\nwhich contains the smallest necessary recipe. This file is a Python\nscript; set the following attributes to describe your application:</p>\n<table>\n<thead>\n<tr>\n<th> Attribute Name</th>\n<th> Description</th>\n<th> Required</th>\n<th> Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> <code>name</code></td>\n<td> The recipe name.</td>\n<td> Yes</td>\n<td> <em>name = 'my-app'</em></td>\n</tr>\n<tr>\n<td> <code>version</code></td>\n<td> The software version.</td>\n<td> Yes</td>\n<td> <em>version = '1.0'</em></td>\n</tr>\n<tr>\n<td> <code>licenses</code></td>\n<td> A list of licenses of the software (see <code>cerbero/enums.py:License</code> for allowed licenses).</td>\n<td> Yes</td>\n<td> <em>licenses = [License.LGPLv2Plus]</em></td>\n</tr>\n<tr>\n<td> <code>deps</code></td>\n<td> A list of build dependencies of the software as recipe names.</td>\n<td> No</td>\n<td> <em>deps = ['other', 'recipe', 'names']</em></td>\n</tr>\n<tr>\n<td> <code>platform_deps</code></td>\n<td> Platform specific build dependencies (see <code>cerbero/enums.py:Platform</code> for allowed platforms).</td>\n<td> No</td>\n<td> <em>platform_deps = {Platform.LINUX: ['some-recipe'], Platform.WINDOWS: ['another-recipe']}</em></td>\n</tr>\n<tr>\n<td> <code>remotes</code></td>\n<td> A dictionary specifying the git remote urls where sources are pulled from.</td>\n<td> No</td>\n<td> <em>remotes = {'origin': '<a href=\"git://somewhere\">git://somewhere</a>'}</em></td>\n</tr>\n<tr>\n<td> <code>commit</code></td>\n<td> The git commit, tag or branch to use, defaulting to \"sdk-<em><code>version</code></em>\"<em>.</em></td>\n<td> No</td>\n<td> <em>commit = 'my-app-branch'</em></td>\n</tr>\n<tr>\n<td> <code>config_sh</code></td>\n<td> Used to select the configuration script.</td>\n<td> No</td>\n<td> <em>config_sh = 'autoreconf -fiv &amp;&amp; sh ./configure'</em></td>\n</tr>\n<tr>\n<td> <code>configure_options</code></td>\n<td> Additional options that should be passed to the <code>configure</code> script.</td>\n<td> No</td>\n<td> <em>configure_options = '--enable-something'</em></td>\n</tr>\n<tr>\n<td> <code>use_system_libs</code></td>\n<td> Whether to use system provided libs.</td>\n<td> No</td>\n<td> <em>use_system_libs = True</em></td>\n</tr>\n<tr>\n<td> <code>btype</code></td>\n<td> The build type (see <code>cerbero/build/build.py:BuildType</code> for allowed build types).</td>\n<td> No</td>\n<td> <em>btype = BuildType.CUSTOM</em></td>\n</tr>\n<tr>\n<td> <code>stype</code></td>\n<td> The source type (see <code>cerbero/build/source.py:SourceType</code> for allowed source types).</td>\n<td> No</td>\n<td> <em>stype = SourceType.CUSTOM</em></td>\n</tr>\n<tr>\n<td> <code>files_category</code></td>\n<td> A list of files that should be shipped with packages including this recipe <em>category</em>. See below for more details. Cerbero comes with some predefined categories that should be used if the files being installed match a category criteria. The predefined categories are: <code>libs</code> (for libraries), <code>bins</code> (for binaries), <code>devel</code> (for development files - header, pkgconfig files, etc), <code>python</code> (for python files) and <code>lang</code> (for language files). <em>Note that for the <code>bins</code> and <code>libs</code> categories there is no need to specify the files extensions as Cerbero will do it for you.</em></td>\n<td> Yes*</td>\n<td> <em>files_bins = ['some-binary']</em>  <em>files_libs = ['libsomelib']</em> <em>files_devel = ['include/something'] files_python = ['site-packages/some/pythonfile%(pext)s']</em> <em>files_lang = ['foo']</em></td>\n</tr>\n<tr>\n<td> <code>platform_files_category</code></td>\n<td> Same as <em><code>files_category</code></em> but for platform specific files.</td>\n<td> No</td>\n<td> <em>platform_files_some_category = {Platform.LINUX: ['/some/file']}</em></td>\n</tr></tbody></table>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"warning\" id=\"warning\"> At least one \u201cfiles\u201d category should be set.</p>\n</blockquote>\n<p>Apart from the attributes listed above, it is also possible to override\nsome Recipe methods. For example the <code>prepare</code> method can be overridden\nto do anything before the software is built, or the <code>install</code> and\n<code>post_install</code> methods for overriding what should be done during or\nafter installation. Take a look at the existing recipes in\n<code>cerbero/recipes</code> for example.</p>\n<p>Alternatively, you can pass some options to cerbero-uninstalled so some\nof these attributes are already set for you. For\nexample:</p>\n<pre><code>./cerbero-uninstalled add-recipe --licenses \"LGPL\" --deps \"glib\" --origin \"git://git.my-app.com\" --commit \"git-commit-to-use\" my-app 1.0\n</code></pre>\n<p>See <code>./cerbero-uninstalled add-recipe -h</code> for help.</p>\n<p>As an example, this is the recipe used to build the Pitivi video editor:</p>\n<pre><code>class Recipe(recipe.Recipe):\n    name = 'pitivi'\n    version = '0.95'\n    licenses = [License.GPLv2Plus]\n    remotes = {'origin': 'git://git.gnome.org/pitivi'}\n    config_sh = 'sh ./autogen.sh --noconfigure &amp;&amp; ./configure'\n    configure_options = \"--disable-help\"\n    commit = 'origin/master'\n    deps = ['gst-editing-services-1.0',\n            'gst-python-1.0',\n            'gst-libav-1.0',\n            'gst-plugins-bad-1.0',\n            'gst-plugins-ugly-1.0',\n            'gst-transcoder',\n            'numpy',\n            'matplotlib',\n            'gnome-icon-theme',\n            'gnome-icon-theme-symbolic',\n            'shared-mime-info'] # brings in gtk+\n\n    files_libs = ['libpitivi-1.0']\n    files_typelibs = [\n        'Pitivi-1.0',\n    ]\n    use_system_libs = True\n    files_bins = ['pitivi']\n    files_lang = ['pitivi']\n    files_pitivi = ['lib/pitivi/python/pitivi',\n                    'share/pitivi/',\n                    'share/applications/pitivi.desktop']\n</code></pre>\n<p>Cerbero gets the software sources to build from a GIT repository, which\nis specified via the <code>git_root</code> configuration variable from the Cerbero\nconfiguration file (see the \"Build from software\" section in <a href=\"../installing/on-linux.html\">Installing\non Linux</a>) and can be overridden by the\n<code>remotes</code> attribute inside the recipes (if setting the <code>origin</code> remote).\nIn this case where no \u201ccommit\u201d attribute is specified, Cerbero will use\nthe commit named \u201csdk-0.2+git\u201d from the GIT repository when building\nSnappy.</p>\n<p>Once the recipe is ready, instruct Cerbero to build it:</p>\n<pre><code class=\"language-bash\">./cerbero-uninstalled build my-app\n</code></pre>\n<h2 id=\"adding-a-package-for-you-software\">Adding a package for you software</h2>\n<p>To distribute your software with GStreamer it is necessary to put it into\na package or installer, depending on the target platform. This is done\nby selecting the files that should be included. To add a package you\nhave to create a package file in <code>cerbero/packages</code>. The package files\nare Python scripts too and there are already many examples of package\nfiles in <code>cerbero/packages</code>.</p>\n<p>Now, to create an empty package, do:</p>\n<pre><code class=\"language-bash\">./cerbero-uninstalled add-package my-app 1.0\n</code></pre>\n<p>This will create an initial package file in <code>packages/my-app.package</code>.</p>\n<p>The following Package attributes are used to describe your package:</p>\n<table>\n<thead>\n<tr>\n<th> Attribute Name</th>\n<th> Description</th>\n<th> Required</th>\n<th> Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> <code>name</code></td>\n<td> The package name.</td>\n<td> Yes</td>\n<td> <em>name = 'my-app'</em></td>\n</tr>\n<tr>\n<td> <code>shortdesc</code></td>\n<td> A short description of the package.</td>\n<td> No</td>\n<td> <em>shortdesc = 'some-short-desc'</em></td>\n</tr>\n<tr>\n<td> <code>longdesc</code></td>\n<td> A long description of the package.</td>\n<td> No</td>\n<td> <em>longdesc = 'Some Longer Description'</em></td>\n</tr>\n<tr>\n<td> <code>codename</code></td>\n<td> The release codename.</td>\n<td> No</td>\n<td> <em>codename = 'MyAppReleaseName'</em></td>\n</tr>\n<tr>\n<td> <code>vendor</code></td>\n<td> Vendor for this package.</td>\n<td> No</td>\n<td> <em>vendor = 'MyCompany'</em></td>\n</tr>\n<tr>\n<td> <code>url</code></td>\n<td> The package url</td>\n<td> No</td>\n<td> <em>url = 'http://www.my-app.com'</em></td>\n</tr>\n<tr>\n<td> <code>version</code></td>\n<td> The package version.</td>\n<td> Yes</td>\n<td> <em>version = '1.0'</em></td>\n</tr>\n<tr>\n<td> <code>license</code></td>\n<td> The package license (see <code>cerbero/enums.py:License</code> for allowed licenses).</td>\n<td> Yes</td>\n<td> <em>license = License.LGPLv2Plus</em></td>\n</tr>\n<tr>\n<td> <code>uuid</code></td>\n<td> The package unique id</td>\n<td> Yes</td>\n<td> <em>uuid = '6cd161c2-4535-411f-8287-e8f6a892f853'</em></td>\n</tr>\n<tr>\n<td> <code>deps</code></td>\n<td> A list of package dependencies as package names.</td>\n<td> No</td>\n<td> <em>deps = ['other', 'package', 'names']</em></td>\n</tr>\n<tr>\n<td> <code>sys_deps</code></td>\n<td> The system dependencies for this package.</td>\n<td> No</td>\n<td> <em>sys_deps= {Distro.DEBIAN: ['python']}</em></td>\n</tr>\n<tr>\n<td> <code>files</code></td>\n<td> A list of files included in the <strong>runtime</strong> package in the form <em>\u201crecipe_name:category1:category2:...\u201d</em> <em>If the recipe category is omitted, all categories are included.</em></td>\n<td> Yes*</td>\n<td> <em>files = ['my-app']</em> <em>files = ['my-app:category1']</em></td>\n</tr>\n<tr>\n<td> <code>files_devel</code></td>\n<td> A list of files included in the <strong>devel</strong> package in the form <em>\u201crecipe_name:category1:category2:...\u201d</em></td>\n<td> Yes*</td>\n<td> <em>files_devel = ['my-app:category_devel']</em></td>\n</tr>\n<tr>\n<td> <code>platform_files</code></td>\n<td> Same as <em>files</em> but allowing to specify different files for different platforms.</td>\n<td> Yes*</td>\n<td> <em>platform_files = {Platform.WINDOWS: ['my-app:windows_only_category']}</em></td>\n</tr>\n<tr>\n<td> <code>platform_files_devel</code></td>\n<td> Same as <em>files_devel</em> but allowing to specify different files for different platforms.</td>\n<td> Yes*</td>\n<td> <em>platform_files_devel = {Platform.WINDOWS: ['my-app:windows_only_category_devel']}</em></td>\n</tr></tbody></table>\n<blockquote>\n<p><img src=\"images/icons/emoticons/warning.png\" alt=\"warning\" id=\"warning1\"> At least one of the \u201cfiles\u201d attributes should be set.</p>\n</blockquote>\n<p>Alternatively you can also pass some options to <code>cerbero-uninstalled</code>,\nfor\nexample:</p>\n<pre><code class=\"language-bash\">./cerbero-uninstalled add-package my-app 1.0 --license \"LGPL\" --codename MyApp --vendor MyAppVendor --url \"http://www.my-app.com\" --files=my-app:bins:libs --files-devel=my-app:devel --platform-files=linux:my-app:linux_specific --platform-files-devel=linux:my-app:linux_specific_devel,windows:my-app:windows_specific_devel --deps base-system --includes gstreamer-core\n</code></pre>\n<p>See <code>./cerbero-uninstalled add-package -h</code> for help.</p>\n<p>As an example, this is the package file that is used for packaging the\n<code>gstreamer-core</code> package:</p>\n<pre><code>class Package(package.Package):\n\n    name = 'gstreamer-1.0-codecs'\n    shortdesc = 'GStreamer 1.0 codecs'\n    longdesc = 'GStreamer 1.0 codecs'\n    version = '1.9.0.1'\n    url = \"http://gstreamer.freedesktop.org\"\n    license = License.LGPL\n    vendor = 'GStreamer Project'\n    org = 'org.freedesktop.gstreamer'\n    uuid = 'a2e545d5-7819-4636-9e86-3660542f08e5'\n    deps = ['gstreamer-1.0-core', 'base-crypto']\n\n    files = ['flac:libs', 'libkate:libs', 'libdv:libs',\n            'libogg:libs', 'schroedinger:libs', 'speex:libs',\n            'libtheora:libs', 'wavpack:libs', 'libvpx:libs',\n            'taglib:libs', 'opus:libs', 'libvorbis:libs',\n            'openjpeg:libs', 'openh264:libs', 'spandsp:libs',\n            'gst-plugins-base-1.0:plugins_codecs', 'gst-plugins-good-1.0:plugins_codecs',\n            'gst-plugins-bad-1.0:plugins_codecs', 'gst-plugins-ugly-1.0:plugins_codecs',\n            ]\n    files_devel = ['gst-plugins-base-1.0-static:plugins_codecs_devel',\n            'gst-plugins-good-1.0-static:plugins_codecs_devel',\n            'gst-plugins-bad-1.0-static:plugins_codecs_devel',\n            'gst-plugins-ugly-1.0-static:plugins_codecs_devel',\n            'gst-plugins-bad-1.0-static:codecs_devel']\n    platform_files = {\n            Platform.ANDROID: ['tremor:libs'],\n            Platform.IOS: ['tremor:libs']\n    }\n</code></pre>\n<p>At this point you have two main options: you could either have a single\npackage that contains everything your software needs, or depend on a\nshared version of GStreamer.</p>\n<h3 id=\"having-a-private-version-of-gstreamer\">Having a private version of GStreamer</h3>\n<p>To have a private version of GStreamer included in a single package you\ndon't have to add the <code>deps</code> variable to the package file but instead\nlist all files you need in the <code>files</code> variables. If you decide to go\nthis road you must make sure that you use a different prefix than\nGStreamer in the Cerbero configuration file, otherwise your package\nwill have file conflicts with GStreamer.</p>\n<h3 id=\"having-a-shared-version-of-gstreamer\">Having a shared version of GStreamer</h3>\n<p>If you decide to use a shared version of GStreamer you can create a\npackage file like the other package files in GStreamer. Just\nlist all packages you need in the <code>deps</code> variable and put the files your\nsoftware needs inside the <code>files</code> variables. When building a package\nthis way you must make sure that you use the same prefix and\npackages_prefix as the ones in your Cerbero configuration file.</p>\n<p>Finally, build your package by using:</p>\n<pre><code class=\"language-bash\">./cerbero-uninstalled package your-package\n</code></pre>\n<p>Where <code>your-package</code> is the name of the <code>.package</code> file that you created\nin the <code>packages</code> directory. This command will build your software and\nall its dependencies, and then make individual packages for them (both\nthe dependencies and your software). The resulting files will be in the\ncurrent working directory.</p>\n\n</div>\n\n\n        "});