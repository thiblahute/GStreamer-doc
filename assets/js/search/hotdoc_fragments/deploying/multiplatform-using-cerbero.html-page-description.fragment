fragment_downloaded_cb({"url": "deploying/multiplatform-using-cerbero.html#page-description", "fragment": "Multiplatform deployment using Cerbero \nAdding a recipe for your application \nAdding a package for you software \nHaving a private version of GStreamer \nHaving a shared version of GStreamer \nCerbero is the build and packaging system used to construct GStreamer. It uses recipe files that indicate how to build particular projects and on what other projects they depend. Moreover the built projects can be combined into packages for distribution. These packages are depending on the target platform Windows or OS X installers or Linux packages. \nTo use Cerbero to build and package your application you just need to add a recipe explaining how to build you application and make it depend on the gstreamer sdk project. Then Cerbero can take care of building your application and its dependencies and package them all together. \nRead Building from source using Cerbero to learn how to install and use Cerbero. \nAt this point after reading the Build from source section in Building from source using Cerbero you should be able to build GStreamer from source and are ready to create recipe and package files for your application. \nIn the Cerbero installation directory you will find the cerbero uninstalled script. Execute it without parameters to see the list of commands it accepts \nThe first step is to create an empty recipe that you can then tailor to your needs \nThis will create an initial recipe file in recipes my app.recipe which contains the smallest necessary recipe. This file is a Python script set the following attributes to describe your application \nAt least one files category should be set. \nTo distribute your software with GStreamer it is necessary to put it into a package or installer depending on the target platform. This is done by selecting the files that should be included. To add a package you have to create a package file in cerbero packages. The package files are Python scripts too and there are already many examples of package files in cerbero packages. \nNow to create an empty package do \nThis will create an initial package file in packages my app.package. \nThe following Package attributes are used to describe your package \nAt least one of the files attributes should be set. \nTo have a private version of GStreamer included in a single package you don t have to add the deps variable to the package file but instead list all files you need in the files variables. If you decide to go this road you must make sure that you use a different prefix than GStreamer in the Cerbero configuration file otherwise your package will have file conflicts with GStreamer. \nIf you decide to use a shared version of GStreamer you can create a package file like the other package files in GStreamer. Just list all packages you need in the deps variable and put the files your software needs inside the files variables. When building a package this way you must make sure that you use the same prefix and packages_prefix as the ones in your Cerbero configuration file. \nFinally build your package by using \nWhere your package is the name of the package file that you created in the packages directory. This command will build your software and all its dependencies and then make individual packages for them both the dependencies and your software The resulting files will be in the current working directory. \n"});