fragment_downloaded_cb({"url": "deploying/index.html#page-description", "fragment": "Multiplatform vs. single platform packaging system \nShared vs. private GStreamer deployment \nThe first choice you need to make is whether you want to deploy your application to more than one platform. If yes then you have the choice to use a different packaging system for each platform or use one that can deliver to all platforms simultaneously. This table summarizes the pros and cons of each option. \nMultiplatform packaging system \nThe same system is used to package your application for all platforms \nYou only need to develop your packaging system once and it works for all supported platforms. \nSingle platform packaging system \nYour application is packaged using a different system on each platform. \nYou can make use of all the advantages each packaging system can offer. \nYou need to develop a new packaging system for each supported platform. \nGStreamer itself supports many different platforms Linux iOS Android Mac OS X Windows etc and has been built using a multiplatform packaging system named Cerbero which is available for you to use should you choose to go down this route. \nYou can install GStreamer in the target machine in the same way you installed it in your development machine you can deploy it privately or you can even customize it before deploying. Here you have a few options \nShared GStreamer \nGStreamer is installed independently of your application as a prerequisite in a common place in the target computer C Program Files for example You application uses an environment variable to locate it. \nPrivate GStreamer with dynamic linking \nYour application deploys GStreamer to a private folder. \nPrivate GStreamer with static linking \nYour application links statically against GStreamer so it effectively becomes part of your application binary. \nThe following pages give further directions for some of the above options. \n"});