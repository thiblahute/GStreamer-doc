fragment_downloaded_cb({"url": "deploying/mac-osx.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"mac-osx.md\">\n<h1 id=\"mac-os-x-deployment\">Mac OS X deployment</h1>\n<p>This page explains how to deploy GStreamer along your application. There\nare different mechanisms, which have been reviewed in <a href=\"index.html\">Deploying your application</a>. The details for some\nof the mechanisms are given here, and more options might be added to\nthis documentation in the future.</p>\n<p>**FIXME: PackageMaker is dead we need a new solution **</p>\n<h2 id=\"shared-gstreamer\">Shared GStreamer</h2>\n<p>This is the easiest way to deploy GStreamer, although most of the time\nit installs unnecessary files which grow the size of the installer and\nthe target drive free space requirements. Since GStreamer might be shared\namong all applications that use it, though, the extra space requirements\nare somewhat blurred.</p>\n<p>With PackageMaker, simply add GStreamer  **runtime ** disk image\n(<a href=\"../installing/on-mac-osx.html\">the same one you used to install the runtime in your development\nmachine</a>) inside your installer\npackage and create a post-install script that mounts the disk image and\ninstalls GStreamer package. You can use the following example, where you\nshould replace <code>$INSTALL_PATH</code> with the path where your installer copied\nGStreamer's disk image files (the <code>/tmp</code> directory is good place to\ninstall it as it will be removed at the end of the installation):</p>\n<pre><code class=\"language-bash\">hdiutil attach $INSTALL_PATH/gstreamer-1.0-1.8.1-x86_64-packages.dmg\ncd /Volumes/gstreamer-1.0-1.8.1-x86_64/\ninstaller -pkg gstreamer-1.0-1.8.1-x86_64.pkg -target \"/\"\nhdiutil detach /Volumes/gstreamer-1.0-1.8.1-x86_64/\nrm $INSTALL_PATH/gstreamer-1.0-1.8.1-x86_64-packages.dmg\n</code></pre>\n<h2 id=\"private-deployment-of-gstreamer\">Private deployment of GStreamer</h2>\n<p>You can decide to distribute a private copy of GStreamer with your\napplication, although it's not the recommended method. In this case,\nsimply copy the framework to the application's Frameworks folder as\ndefined in the <a href=\"https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html#//apple_ref/doc/uid/10000123i-CH101-SW19\">bundle programming\nguide</a>:</p>\n<pre><code class=\"language-bash\">cp -r /Library/Frameworks/GStreamer.framework ~/MyApp.app/Contents/Frameworks\n</code></pre>\n<p>Note that you can have several versions of GStreamer, and targeting\ndifferent architectures, installed in the system. Make sure you only\ncopy the version you need and that you update accordingly the link\n<code>GStreamer.framework/Version/Current</code>:</p>\n<pre><code class=\"language-bash\">$ ls -l Frameworks/GStreamer.framework/Version/Current\nlrwxr-xr-x 1 fluendo staff 21 Jun 5 18:46 Frameworks/GStreamer.framework/Versions/Current -&gt; ../Versions/0.10/x86\n</code></pre>\n<p>Since GStreamer will be relocated, you will need to follow the\ninstructions on how to relocate GStreamer at the end of this page.</p>\n<h2 id=\"deploy-only-necessary-files-by-manually-picking-them\">Deploy only necessary files, by manually picking them</h2>\n<p>On the other side of the spectrum, if you want to reduce the space\nrequirements (and installer size) to the maximum, you can manually\nchoose which GStreamer libraries to deploy. Unfortunately, you are on\nyour own on this road, besides using the object file displaying tool:\n<a href=\"https://developer.apple.com/library/mac/#documentation/darwin/reference/manpages/man1/otool.1.html\">otool</a>.\nBeing a similar technique to deploying a private copy of GStreamer, keep\nin mind that you should relocate GStreamer too, as explained at the end of\nthis page.</p>\n<p>Bear also in mind that GStreamer is modular in nature. Plug-ins are\nloaded depending on the media that is being played, so, if you do not\nknow in advance what files you are going to play, you do not know which\nplugins and shared libraries you need to deploy.</p>\n<h2 id=\"deploy-only-necessary-packages-using-the-provided-ones\">Deploy only necessary packages, using the provided ones</h2>\n<p>This will produce a smaller installer than deploying complete\nGStreamer, without the added burden of having to manually pick each\nlibrary. You just need to know which packages your application requires.</p>\n<table>\n<thead>\n<tr>\n<th> Package name</th>\n<th> Dependencies</th>\n<th> Licenses</th>\n<th> Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> base-system-1.0</td>\n<td></td>\n<td>JPEG, FreeType, BSD-like, LGPL, LGPL-2+, LGPL-2.1, LibPNG and MIT</td>\n<td> Base system dependencies</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-capture</td>\n<td> gstreamer-1.0-core, gstreamer-1.0-encoding</td>\n<td> LGPL and LGPL-2+</td>\n<td> GStreamer plugins for capture</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-codecs</td>\n<td> base-crypto, gstreamer-1.0-core</td>\n<td> BSD, Jasper-2.0, BSD-like, LGPL, LGPL-2, LGPL-2+, LGPL-2.1 and LGPL-2.1+</td>\n<td> GStreamer codecs</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-codecs-gpl</td>\n<td> gstreamer-1.0-core</td>\n<td> BSD-like, LGPL, LGPL-2+ and LGPL-2.1+</td>\n<td> GStreamer codecs under the GPL license and/or with patents issues</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-core</td>\n<td> base-system-1.0</td>\n<td> LGPL and LGPL-2+</td>\n<td> GStreamer core</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-dvd</td>\n<td> gstreamer-1.0-core</td>\n<td> GPL-2+, LGPL and LGPL-2+</td>\n<td> GStreamer DVD support</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-effects</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL and LGPL-2+</td>\n<td> GStreamer effects and instrumentation plugins</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-net</td>\n<td> base-crypto, gstreamer-1.0-core</td>\n<td> GPL-3, LGPL, LGPL-2+, LGPL-2.1+ and LGPL-3+</td>\n<td> GStreamer plugins for network protocols</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-playback</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL and LGPL-2+</td>\n<td> GStreamer plugins for playback</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-system</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL, LGPL-2+ and LGPL-2.1+</td>\n<td> GStreamer system plugins</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-visualizers</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL and LGPL-2+</td>\n<td> GStreamer visualization plugins</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-encoding</td>\n<td> gstreamer-1.0-core, gstreamer-1.0-playback</td>\n<td> LGPL and LGPL2+</td>\n<td> GStreamer plugins for encoding</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-editing</td>\n<td> gstreamer-1.0-core, gstreamer-1.0-devtools</td>\n<td> LGPL and LGPL2+</td>\n<td> GStreamer libraries and plugins for non linear editing</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-devtools</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL and LGPL2+</td>\n<td> GStreamer developers tools</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-libav</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL and LGPL2+</td>\n<td> GStreamer plugins wrapping ffmpeg</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-net-restricted</td>\n<td> base-crypto, gstreamer-1.0-core</td>\n<td> LGPL and LGPL2+</td>\n<td> GStreamer plugins for network protocols with potential patent issues in some countries</td>\n</tr>\n<tr>\n<td> gstreamer-1.0-codecs-restricted</td>\n<td> gstreamer-1.0-core</td>\n<td> LGPL and LGPL2+</td>\n<td> GStreamer restricted codecs with potential patent issues in some countries</td>\n</tr>\n<tr>\n<td> base-crypto</td>\n<td> base-system-1.0</td>\n<td> LGPL and LGPL2+</td>\n<td> Cryptographic libraries</td>\n</tr></tbody></table>\n<h2 id=\"relocation-of-gstreamer-in-os-x\">Relocation of GStreamer in OS X</h2>\n<p>In some situations we might need to relocate GStreamer, moving it to a\ndifferent place in the file system, like for instance when we are\nshipping a private copy of GStreamer with our application.</p>\n<h3 id=\"location-of-dependent-dynamic-libraries\">Location of dependent dynamic libraries.</h3>\n<p>On Darwin operating systems, the dynamic linker doesn't locate dependent\ndynamic libraries using their leaf name, but instead it uses full paths,\nwhich makes it harder to relocate them as explained in the DYNAMIC\nLIBRARY LOADING section of\n<a href=\"https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/dyld.1.html\">dyld</a>'s\nman page:</p>\n<blockquote>\n<p>Unlike many other operating systems, Darwin does not locate dependent\ndynamic libraries via their leaf file name. Instead the full path to\neach dylib is used (e.g. /usr/lib/libSystem.B.dylib). But there are\ntimes when a full path is not appropriate; for instance, may want your\nbinaries to be installable in anywhere on the disk.</p>\n</blockquote>\n<p>We can get the list of paths used by an object file to locate its\ndependent dynamic libraries\nusing <a href=\"https://developer.apple.com/library/mac/#documentation/darwin/reference/manpages/man1/otool.1.html\">otool</a>:</p>\n<pre><code class=\"language-bash\">$ otool -L /Library/Frameworks/GStreamer.framework/Commands/gst-launch-1.0\n/Library/Frameworks/GStreamer.framework/Commands/gst-launch-1.0:\n /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 550.43.0)\n /Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libgstreamer-1.0.0.dylib (compatibility version 31.0.0, current version 31.0.0)\n /Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libxml2.2.dylib (compatibility version 10.0.0, current version 10.8.0)\n...\n</code></pre>\n<p>As you might have already noticed, if we move GStreamer to a different\nfolder, it will stop working because the runtime linker won't be able to\nfind <code>gstreamer-1.0</code> in the previous location\n<code>/Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libgstreamer-1.0.0.dylib</code>.</p>\n<p>This full path is extracted from the dynamic library  <strong><em>install name</em></strong>\n, a path that is used by the linker to determine its location. The\ninstall name of a library can be retrieved with\n<a href=\"https://developer.apple.com/library/mac/#documentation/darwin/reference/manpages/man1/otool.1.html\">otool</a> too:</p>\n<pre><code class=\"language-bash\">$ otool -D /Library/Frameworks/GStreamer.framework/Libraries/libgstreamer-1.0.dylib\n/Library/Frameworks/GStreamer.framework/Libraries/libgstreamer-1.0.dylib:\n/Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libgstreamer-1.0.0.dylib\n</code></pre>\n<p>Any object file that links to the dynamic library <code>gstreamer-1.0</code> will\nuse the\npath <code>/Library/Frameworks/GStreamer.framework/Versions/0.10/x86/lib/libgstreamer-1.0.0.dylib</code> to\nlocate it, as we saw previously with <code>gst-launch-1.0</code>.</p>\n<p>Since working exclusively with full paths wouldn't let us install our\nbinaries anywhere in the path, the linker provides a mechanism of string\nsubstitution, adding three variables that can be used as a path prefix.\nAt runtime the linker will replace them with the generated path for the\nprefix. These variables are <code>@executable_path</code>,\n<code>@loader_path</code> and <code>@rpath</code>, described in depth in the DYNAMIC LIBRARY\nLOADING section\nof <a href=\"https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/dyld.1.html\">dyld</a>'s\nman page.</p>\n<p>For our purpose we will use the <code>@executable_path</code> variable, which is\nreplaced with a fixed path, the path to the directory containing the\nmain executable: <code>/Applications/MyApp.app/Contents/MacOS</code>.\nThe <code>@loader_path</code> variable can't be used in our scope, because it will\nbe replaced with the path to the directory containing the mach-o binary\nthat loaded the dynamic library, which can vary.</p>\n<p>Therefore, in order to relocate GStreamer we will need to replace all\npaths\ncontaining <code>/Library/Frameworks/GStreamer.framework/</code> with <code>@executable_path/../Frameworks/GStreamer.framework/</code>, which\ncan be done using\nthe <a href=\"http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/install_name_tool.1.html\">install_name_tool</a>\nutility</p>\n<h3 id=\"relocation-of-the-binaries\">Relocation of the binaries</h3>\n<p>As mentioned in the previous section, we can use\nthe <code>install_name_tool</code> in combination with <code>otool</code> to list all paths\nfor dependant dynamic libraries and modify them to use the new location.\nHowever GStreamer has a huge list of binaries and doing it manually would\nbe a painful task. That's why a simple relocation script is provided\nwhich you can find in cerbero's repository\n(<code>cerbero/tools/osxrelocator.py</code>). This scripts takes 3 parameters:</p>\n<ol>\n<li><code>directory</code>: the directory to parse looking for binaries</li>\n<li><code>old_prefix</code>: the old prefix we want to change (eg:\n<code>/Library/Frameworks/GStreamer.framework</code>)</li>\n<li><code>new_prefix</code>: the new prefix we want to use\n(eg: <code>@executable_path/../Frameworks/GStreamer.framework/</code>)</li>\n</ol>\n<p>When looking for binaries to fix, we will run the script in the\nfollowing\ndirectories:</p>\n<pre><code class=\"language-bash\">$ osxrelocator.py MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/lib /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n$ osxrelocator.py MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/libexec /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n$ osxrelocator.py MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/bin /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n$ osxrelocator.py MyApp.app/Contents/MacOS /Library/Frameworks/GStreamer.framework/ @executable_path/../Frameworks/GStreamer.framework/ -r\n</code></pre>\n<h3 id=\"adjusting-environment-variables-with-the-new-paths\">Adjusting environment variables with the new paths</h3>\n<p>The application also needs to set the following environment variables to\nhelp other libraries finding resources in the new\npath:</p>\n<ul>\n<li><code>GST_PLUGIN_SYSTEM_PATH=/Applications/MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/lib/gstreamer-1.0</code></li>\n<li><code>GST_PLUGIN_SCANNER=/Applications/MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/libexec/gstreamer-1.0/gst-plugin-scanner</code></li>\n<li><code>GTK_PATH=/Applications/MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/</code></li>\n<li><code>GIO_EXTRA_MODULES=/Applications/MyApp.app/Contents/Frameworks/GStreamer.framework/Versions/Current/lib/gio/modules</code></li>\n</ul>\n<p>You can use the following functions:</p>\n<ul>\n<li>\n<p>C: <a href=\"http://linux.die.net/man/3/putenv\">putenv(\"VAR=/foo/bar\")</a></p>\n</li>\n<li>\n<p>Python: <a href=\"http://docs.python.org/library/os.html\">os.environ['VAR'] =\n'/foo/var'</a></p>\n</li>\n</ul>\n\n</div>\n\n\n        "});