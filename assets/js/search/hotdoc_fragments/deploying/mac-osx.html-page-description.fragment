fragment_downloaded_cb({"url": "deploying/mac-osx.html#page-description", "fragment": "Private deployment of GStreamer \nDeploy only necessary files by manually picking them \nDeploy only necessary packages using the provided ones \nRelocation of GStreamer in OS X \nLocation of dependent dynamic libraries. \nAdjusting environment variables with the new paths \nYou can decide to distribute a private copy of GStreamer with your application although it s not the recommended method. In this case simply copy the framework to the application s Frameworks folder as defined in the bundle programming guide \nNote that you can have several versions of GStreamer and targeting different architectures installed in the system. Make sure you only copy the version you need and that you update accordingly the link GStreamer.framework Version Current \nSince GStreamer will be relocated you will need to follow the instructions on how to relocate GStreamer at the end of this page. \nOn the other side of the spectrum if you want to reduce the space requirements and installer size to the maximum you can manually choose which GStreamer libraries to deploy. Unfortunately you are on your own on this road besides using the object file displaying tool otool. Being a similar technique to deploying a private copy of GStreamer keep in mind that you should relocate GStreamer too as explained at the end of this page. \nBear also in mind that GStreamer is modular in nature. Plug ins are loaded depending on the media that is being played so if you do not know in advance what files you are going to play you do not know which plugins and shared libraries you need to deploy. \nThis will produce a smaller installer than deploying complete GStreamer without the added burden of having to manually pick each library. You just need to know which packages your application requires. \nIn some situations we might need to relocate GStreamer moving it to a different place in the file system like for instance when we are shipping a private copy of GStreamer with our application. \nOn Darwin operating systems the dynamic linker doesn t locate dependent dynamic libraries using their leaf name but instead it uses full paths which makes it harder to relocate them as explained in the DYNAMIC LIBRARY LOADING section of dyld s man page \nUnlike many other operating systems Darwin does not locate dependent dynamic libraries via their leaf file name. Instead the full path to each dylib is used e.g. usr lib libSystem.B.dylib But there are times when a full path is not appropriate for instance may want your binaries to be installable in anywhere on the disk. \nWe can get the list of paths used by an object file to locate its dependent dynamic libraries using otool \nAs you might have already noticed if we move GStreamer to a different folder it will stop working because the runtime linker won t be able to find gstreamer in the previous location Library Frameworks GStreamer.framework Versions x86 lib libgstreamer dylib. \nThis full path is extracted from the dynamic library install name a path that is used by the linker to determine its location. The install name of a library can be retrieved with otool too \nAny object file that links to the dynamic library gstreamer will use the path Library Frameworks GStreamer.framework Versions x86 lib libgstreamer dylib to locate it as we saw previously with gst launch \nSince working exclusively with full paths wouldn t let us install our binaries anywhere in the path the linker provides a mechanism of string substitution adding three variables that can be used as a path prefix. At runtime the linker will replace them with the generated path for the prefix. These variables are executable_path loader_path and rpath described in depth in the DYNAMIC LIBRARY LOADING section of dyld s man page. \nFor our purpose we will use the executable_path variable which is replaced with a fixed path the path to the directory containing the main executable Applications MyApp.app Contents MacOS. The loader_path variable can t be used in our scope because it will be replaced with the path to the directory containing the mach o binary that loaded the dynamic library which can vary. \nTherefore in order to relocate GStreamer we will need to replace all paths containing Library Frameworks GStreamer.framework with executable_path Frameworks GStreamer.framework which can be done using the install_name_tool utility \nThe application also needs to set the following environment variables to help other libraries finding resources in the new path \nYou can use the following functions \nC putenv VAR foo bar \nPython os.environ VAR foo var \n"});