fragment_downloaded_cb({"url": "design/draft-metadata.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"draft-metadata.md\">\n<h1 id=\"metadata\">Metadata</h1>\n<p>This draft recaps the current metadata handling in GStreamer and\nproposes some additions.</p>\n<h2 id=\"supported-metadata-standards\">Supported Metadata standards</h2>\n<p>The paragraphs below list supported native metadata standards sorted by\ntype and then in alphabetical order. Some standards have been extended\nto support additional metadata. GStreamer already supports all of those\nto some extend. This is showns in the table below as either [--],\n[r-], [-w] or [rw] depending on read/write support (08.Feb.2010).</p>\n<h3 id=\"audio\">Audio</h3>\n<ul>\n<li>mp3\n<ul>\n<li>ID3v2: [rw]\n<ul>\n<li>http://www.id3.org/Developer_Information</li>\n</ul>\n</li>\n<li>ID3v1: [rw]\n<ul>\n<li>http://www.id3.org/ID3v1</li>\n</ul>\n</li>\n<li>XMP: [--] (inside ID3v2 PRIV tag of owner XMP)\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ogg/vorbis\n<ul>\n<li>vorbiscomment: [rw]\n<ul>\n<li>http://www.xiph.org/vorbis/doc/v-comment.html</li>\n<li>http://wiki.xiph.org/VorbisComment</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>wav\n<ul>\n<li>LIST/INFO chunk: [rw]\n<ul>\n<li>http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info</li>\n<li>http://www.kk.iij4u.or.jp/~kondo/wave/mpidata.txt</li>\n</ul>\n</li>\n<li>XMP: [--]\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"video\">Video</h3>\n<ul>\n<li>3gp\n<ul>\n<li>{moov,trak}.udta:  [rw]\n<ul>\n<li>http://www.3gpp.org/ftp/Specs/html-info/26244.htm</li>\n</ul>\n</li>\n<li>ID3V2: [--]\n<ul>\n<li>http://www.3gpp.org/ftp/Specs/html-info/26244.htm</li>\n<li>http://www.mp4ra.org/specs.html#id3v2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>avi\n<ul>\n<li>LIST/INFO chunk: [rw]\n<ul>\n<li>http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info</li>\n<li>http://www.kk.iij4u.or.jp/~kondo/wave/mpidata.txt</li>\n</ul>\n</li>\n<li>XMP: [--] (inside \"_PMX\" chunk)\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>asf\n<ul>\n<li>??:</li>\n<li>XMP: [--]\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>flv [--]\n<ul>\n<li>XMP: (inside onXMPData script data tag)\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>mkv\n<ul>\n<li>tags: [rw]\n<ul>\n<li>http://www.matroska.org/technical/specs/tagging/index.html</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>mov\n<ul>\n<li>XMP: [--] (inside moov.udta.XMP_ box)\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>mp4\n<ul>\n<li>{moov,trak}.udta: [rw]\n<ul>\n<li>http://standards.iso.org/ittf/PubliclyAvailableStandards/c051533_ISO_IEC_14496-12_2008.zip</li>\n</ul>\n</li>\n<li>moov.udta.meta.ilst: [rw]\n<ul>\n<li>http://atomicparsley.sourceforge.net/</li>\n<li>http://atomicparsley.sourceforge.net/mpeg-4files.html</li>\n</ul>\n</li>\n<li>ID3v2: [--]\n<ul>\n<li>http://www.mp4ra.org/specs.html#id3v2</li>\n</ul>\n</li>\n<li>XMP: [--] (inside UUID box)\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>mxf\n<ul>\n<li>??</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"images\">Images</h3>\n<ul>\n<li>gif\n<ul>\n<li>XMP: [--]\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>jpg\n<ul>\n<li>jif: [rw] (only comments)</li>\n<li>EXIF: [rw] (via metadata plugin)\n<ul>\n<li>http://www.exif.org/specifications.html</li>\n</ul>\n</li>\n<li>IPTC: [rw] (via metadata plugin)\n<ul>\n<li>http://www.iptc.org/IPTC4XMP/</li>\n</ul>\n</li>\n<li>XMP: [rw] (via metadata plugin)\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>png\n<ul>\n<li>XMP: [--]\n<ul>\n<li>http://www.adobe.com/devnet/xmp/</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"further-links\">further Links:</h3>\n<p>http://age.hobba.nl/audio/tag_frame_reference.html\nhttp://wiki.creativecommons.org/Tracker_CC_Indexing</p>\n<h2 id=\"current-metadata-handling\">Current Metadata handling</h2>\n<p>When reading files, demuxers or parsers extract the metadata. It will be\nsent a GST_EVENT_TAG to downstream elements. When a sink element\nreceives a tag event, it will post a GST_MESSAGE_TAG message on the\nbus with the contents of the tag event.</p>\n<p>Elements receiving GST_EVENT_TAG events can mangle them, mux them into\nthe buffers they send or just pass them through. Usually is muxers that\nwill format the tag data into the form required by the format they mux.\nSuch elements would also implement the GstTagSetter interface to receive\ntags from the application.</p>\n<pre><code> +----------+\n | demux    |\nsink       src --&gt; GstEvent(tag) over GstPad to downstream element\n +----------+\n\n           method call over GstTagSetter interface from application\n                                                          |\n                                                          v\n                                                    +----------+\n                                                    | mux      |\nGstEvent(tag) over GstPad from upstream element --&gt; sink       src\n                                                    +----------+\n</code></pre>\n<p>The data used in all those interfaces is GstTagList. It is based on a\nGstStructure which is like a hash table with differently typed entries.\nThe key is always a string/GQuark. Many keys are predefined in GStreamer\ncore. More keys are defined in gst-plugins-base/gst-libs/gst/tag/tag.h.\nIf elements and applications use predefined types, it is possible to\ntranscode a file from one format into another while preserving all known\nand mapped metadata.</p>\n<h2 id=\"issues\">Issues</h2>\n<h3 id=\"unknownunmapped-metadata\">Unknown/Unmapped metadata</h3>\n<p>Right now GStreamer can lose metadata when transcoding, remuxing\ncontent. This can happend as we don\u2019t map all metadata fields to generic\nones.</p>\n<p>We should probably also add the whole metadata blob to the GstTagList.\nWe would need a GST_TAG_SYSTEM_xxx define (e.g.\nGST_TAG_SYSTEM_ID3V2) for each standard. The content is not printable\nand should be treated as binary if not known. The tag is not mergeable -\ncall gst_tag_register() with GstTagMergeFunc=NULL. Also the tag data\nis only useful for upstream elements, not for the application.</p>\n<p>A muxer would first scan a taglist for known system tags. Unknown tags\nare ignored as already. It would first populate its own metadata store\nwith the entries from the system tag and the update the entries with the\ndata in normal tags.</p>\n<p>Below is an initial list of tag systems: ID3V1 - GST_TAG_SYSTEM_ID3V1\nID3V2 - GST_TAG_SYSTEM_ID3V2 RIFF_INFO -\nGST_TAG_SYSTEM_RIFF_INFO XMP - GST_TAG_SYSTEM_XMP</p>\n<p>We would basically need this for each container format.</p>\n<p>See also <a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=345352\">https://bugzilla.gnome.org/show_bug.cgi?id=345352</a></p>\n<h3 id=\"lost-metadata\">Lost metadata</h3>\n<p>A case slighly different from the previous is that when an application\nsets a GstTagList on a pipeline. Right elements consuming tags do not\nreport which tags have been consumed. Especially when using elements\nthat make metadata persistent, we have no means of knowing which of the\ntags made it into the target stream and which were not serialized.\nIdeally the application would like to know which kind of metadata is\naccepted by a pipleine to reflect that in the UI.</p>\n<p>Although it is in practise so that elements implementing GstTagSetter\nare the ones that serialize, this does not have to be so. Otherwise we\ncould add a means to that interface, where elements add the tags they\nhave serialized. The application could build one list from all the tag\nmessages and then query all the serialized tags from tag-setters. The\ndelta tells what has not been serialized.</p>\n<p>A different approach would be to query the list of supported tags in\nadvance. This could be a query (GST_QUERY_TAG_SUPPORT). The query\nresult could be a list of elements and their tags. As a convenience we\ncould flatten the list of tags for the top-level element (if the query\nwas sent to a bin) and add that.</p>\n<h3 id=\"tags-are-per-element\">Tags are per Element</h3>\n<p>In many cases we want tags per stream. Even metadata standards like\nmp4/3gp metadata supports that. Right now GST_MESSAGE_SRC(tags) is the\nelement. We tried changing that to the pad, but that broke applications.\nAlso we miss the symmetric functionality in GstTagSetter. This interface\nis usually implemented by\nelements.</p>\n<h3 id=\"open-bugs\">Open bugs</h3>\n<p><a href=\"https://bugzilla.gnome.org/buglist.cgi?query_format=advanced;short_desc=tag;bug_status=UNCONFIRMED;bug_status=NEW;bug_status=ASSIGNED;bug_status=REOPENED;bug_status=NEEDINFO;short_desc_type=allwordssubstr;product=GStreamer\">https://bugzilla.gnome.org/buglist.cgi?query_format=advanced;short_desc=tag;bug_status=UNCONFIRMED;bug_status=NEW;bug_status=ASSIGNED;bug_status=REOPENED;bug_status=NEEDINFO;short_desc_type=allwordssubstr;product=GStreamer</a></p>\n<p>Add GST_TAG_MERGE_REMOVE\n<a href=\"https://bugzilla.gnome.org/show_bug.cgi?id=560302\">https://bugzilla.gnome.org/show_bug.cgi?id=560302</a></p>\n\n</div>\n\n\n\t"});