fragment_downloaded_cb({"url": "design/draft-klass.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"draft-klass.md\">\n<h1 id=\"element-klass-definition\">Element Klass definition</h1>\n<h2 id=\"purpose\">Purpose</h2>\n<p>Applications should be able to retrieve elements from the registry of\nexisting elements based on specific capabilities or features of the\nelement.</p>\n<p>A playback application might want to retrieve all the elements that can\nbe used for visualisation, for example, or a video editor might want to\nselect all video effect filters.</p>\n<p>The topic of defining the klass of elements should be based on use\ncases.</p>\n<p>A list of classes that are used in a installation can be generated\nusing:</p>\n<pre><code>gst-inspect-1.0 -a | grep -ho Klass.\\* | cut -c8- | sort | uniq\n</code></pre>\n<h2 id=\"proposal\">Proposal</h2>\n<p>The <code>GstElementDetails</code> contains a field named klass that is a pointer to\na string describing the element type.</p>\n<p>In this document we describe the format and contents of the string.\nElements should adhere to this specification although that is not\nenforced to allow for wild (application specific) customisation.</p>\n<h3 id=\"string-format\">String format</h3>\n<pre><code>&lt;keyword&gt;['/'&lt;keyword]*\n</code></pre>\n<p>The string consists of an <strong><em>unordered</em></strong> list of keywords separated with a '/'\ncharacter. While the / suggests a hierarchy, this is <strong><em>not</em></strong> the case.</p>\n<h3 id=\"keyword-categories\">Keyword categories</h3>\n<h4 id=\"functional\">Functional</h4>\n<pre><code>Categories are base on ***intended usage*** of the element. Some elements\nmight have other side-effects (especially for filers/effects). The purpose\nis to list enough keywords so that applications can do meaningful filtering,\nnot to completely describe the functionality that is expressed in caps.\n\n- Source: produces data\n\n- Sink: consumes data\n\n- Filter: filters/transforms data, no modification on the data is\nintended (although it might be unavoidable). The filter can\ndecide on input and output caps independently of the stream\ncontents (GstBaseTransform).\n\n- Effect: applies an effect to some data, changes to data are\nintended. Examples are colorbalance, volume. These elements can\nalso be implemented with GstBaseTransform.\n\n- Demuxer: splits audio, video, \u2026 from a stream\n\n- Muxer: interleave audio, video, \u2026 into one stream, this is like\nmixing but without losing or degrading each separate input\nstream. The reverse operation is possible with a Demuxer that\nreproduces the exact same input streams.\n\n- Decoder: decodes encoded data into a raw format, there is\ntypically no relation between input caps and output caps. The\noutput caps are defined in the stream data. This separates the\nDecoder from the Filter and Effect.\n\n- Encoder: encodes raw data into an encoded format.\n\n- Mixer: combine audio, video, .. this is like muxing but with\napplying some algorithm so that the individual streams are not\nextractable anymore, there is therefore no reverse operation to\nmixing. (audio mixer, video mixer, \u2026)\n\n- Converter: convert audio into video, text to audio, \u2026 The\nconverter typically works on raw types only. The source media\ntype is listed first.\n\n- Analyzer: reports about the stream contents.\n\n- Control: controls some aspect of a hardware device\n\n- Extracter: extracts tags/headers from a stream\n\n- Formatter: adds tags/headers to a stream\n\n- Connector: allows for new connections in the pipeline. (tee, \u2026)\n\n- \u2026\n</code></pre>\n<h4 id=\"based-on-media-type\">Based on media type</h4>\n<pre><code>Purpose is to make a selection for elements operating on the different\ntypes of media. An audio application must be able to filter out the\nelements operating on audio, for example.\n\n- Audio: operates on audio data\n\n- Video: operates on video data\n\n- Image: operates on image data. Usually this media type can also\nbe used to make a video stream in which case it is added\ntogether with the Video media type.\n\n- Text: operates on text data\n\n- Metadata: operates on metadata\n\n- \u2026\n</code></pre>\n<h4 id=\"extra-features\">Extra features</h4>\n<pre><code>The purpose is to further specialize the element, mostly for\napplication specific needs.\n\n- Network: element is used in networked situations\n\n- Protocol: implements some protocol (RTSP, HTTP, \u2026)\n\n- Payloader: encapsulate as payload (RTP, RDT,.. )\n\n- Depayloader: strip a payload (RTP, RDT,.. )\n\n- RTP: intended to be used in RTP applications\n\n- Device: operates on some hardware device (disk, network, audio\ncard, video card, usb, \u2026)\n\n- Visualisation: intended to be used for audio visualisation\n\n- Debug: intended usage is more for debugging purposes.\n</code></pre>\n<h4 id=\"categories-found-but-not-yet-in-one-of-the-above-lists\">Categories found, but not yet in one of the above lists</h4>\n<pre><code>- Bin: playbin, decodebin, bin, pipeline\n\n- Codec: lots of decoders, encoder, demuxers should be removed?\n\n- Generic: should be removed?\n\n- File: like network, should go to Extra?\n\n- Editor: gnonlin, textoverlays\n\n- DVD, GDP, LADSPA, Parser, Player, Subtitle, Testing, \u2026\n</code></pre>\n<h3 id=\"suggested-order\">Suggested order:</h3>\n<pre><code>    &lt;functional&gt;[/&lt;media type&gt;]*[/&lt;extra...&gt;]*\n</code></pre>\n<h3 id=\"examples\">Examples:</h3>\n<pre><code>apedemux         : Extracter/Metadata\naudiotestsrc     : Source/Audio\nautoaudiosink    : Sink/Audio/Device\ncairotimeoverlay : Mixer/Video/Text\ndvdec            : Decoder/Video\ndvdemux          : Demuxer\ngoom             : Converter/Audio/Video\nid3demux         : Extracter/Metadata\nudpsrc           : Source/Network/Protocol/Device\nvideomixer       : Mixer/Video\nvideoconvert     : Filter/Video             (intended use to convert video with as little\n                                             visible change as possible)\nvertigotv        : Effect/Video             (intended use is to change the video)\nvolume           : Effect/Audio             (intended use is to change the audio data)\nvorbisdec        : Decoder/Audio\nvorbisenc        : Encoder/Audio\noggmux           : Muxer\nadder            : Mixer/Audio\nvideobox         : Effect/Video\nalsamixer        : Control/Audio/Device\naudioconvert     : Filter/Audio\naudioresample    : Filter/Audio\nxvimagesink      : Sink/Video/Device\nnavseek          : Filter/Debug\ndecodebin        : Decoder/Demuxer\nlevel            : Filter/Analyzer/Audio\ntee              : Connector/Debug\n</code></pre>\n<h3 id=\"open-issues\">open issues:</h3>\n<ul>\n<li>how to differentiate physical devices from logical ones?\nautoaudiosink : Sink/Audio/Device alsasink : Sink/Audio/Device</li>\n</ul>\n<h2 id=\"use-cases\">Use cases</h2>\n<ul>\n<li>\n<p>get a list of all elements implementing a video effect (pitivi):</p>\n<pre><code>  klass.contains (Effect &amp; Video)\n</code></pre>\n</li>\n<li>\n<p>get list of muxers (pitivi):</p>\n<pre><code>  klass.contains (Muxer)\n</code></pre>\n</li>\n<li>\n<p>get list of video encoders (pitivi):</p>\n<pre><code>  klass.contains (Encoder &amp; video)\n</code></pre>\n</li>\n<li>\n<p>Get a list of all audio/video visualisations (totem):</p>\n<pre><code>  klass.contains (Visualisation)\n</code></pre>\n</li>\n<li>\n<p>Get a list of all decoders/demuxer/metadata parsers/vis (playbin):</p>\n<pre><code>  klass.contains (Visualisation | Demuxer | Decoder | (Extractor &amp; Metadata))\n</code></pre>\n</li>\n<li>\n<p>Get a list of elements that can capture from an audio device\n(gst-properties):</p>\n<pre><code>  klass.contains (Source &amp; Audio &amp; Device)\n</code></pre>\n<ul>\n<li>filters out audiotestsrc, since it is not a device</li>\n</ul>\n</li>\n</ul>\n\n</div>\n\n\n        "});