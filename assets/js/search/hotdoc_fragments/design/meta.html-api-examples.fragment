fragment_downloaded_cb({"url": "design/meta.html#api-examples", "fragment": "API examples \nBuffers are created using the normal gst_buffer_new functions. The standard fields are initialized as usual. A memory area that is bigger than the structure size is allocated for the buffer metadata. \nAfter creating a buffer the application can set caps and add metadata information. \nTo add or retrieve metadata a handle to a GstMetaInfo structure needs to be obtained. This defines the implementation and API of the metadata. Usually a handle to this info structure can be obtained by calling a public _get_info method from a shared library for shared metadata \nThe following defines can usually be found in the shared h file. \nAdding metadata to a buffer can be done with the gst_buffer_add_meta call. This function will create new metadata based on the implementation specified by the GstMetaInfo. It is also possible to pass a generic pointer to the add_meta function that can contain parameters to initialize the new metadata fields. \nRetrieving the metadata on a buffer can be done with the gst_buffer_meta_get method. This function retrieves an existing metadata conforming to the API specified in the given info. When no such metadata exists the function will return NULL. \nOnce a reference to the info has been obtained the associated metadata can be added or modified on a buffer. \nOther convenience macros can be made to simplify the above code \nThis makes the code look like this \nTo iterate the different metainfo structures one can use the gst_buffer_meta_get_next methods. \n"});