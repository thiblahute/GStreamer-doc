fragment_downloaded_cb({"url": "design/states.html#states-in-gstbin", "fragment": "States in GstBin \nA GstBin manages the state of its children. It does this by propagating the state changes performed on it to all of its children. The _set_state function on a bin will call the _set_state function on all of its children that are not already in the target state or in a change state to the target state. \nThe children are iterated from the sink elements to the source elements. This makes sure that when changing the state of an element the downstream elements are in the correct state to process the eventual buffers. In the case of a downwards state change the sink elements will shut down first which makes the upstream elements shut down as well since the _push function returns a GST_FLOW_FLUSHING error. \nIf all the children return SUCCESS the function returns SUCCESS as well. \nIf one of the children returns FAILURE the function returns FAILURE as well. In this state it is possible that some elements successfully changed state. The application can check which elements have a changed state which were in error and which were not affected by iterating the elements and calling _get_state on the elements. \nIf after calling the state function on all children one of the children returned ASYNC the function returns ASYNC as well. \nIf after calling the state function on all children one of the children returned NO_PREROLL the function returns NO_PREROLL as well. \nIf both NO_PREROLL and ASYNC children are present NO_PREROLL is returned. \nThe current state of the bin can be retrieved with _get_state \nIf the bin is performing an ASYNC state change it will automatically update its current state fields when it receives state messages from the children. \n"});