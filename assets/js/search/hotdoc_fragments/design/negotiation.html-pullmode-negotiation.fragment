fragment_downloaded_cb({"url": "design/negotiation.html#pullmode-negotiation", "fragment": "Pull mode negotiation \nA pipeline in pull mode has different negotiation needs than one activated in push mode. Push mode is optimized for two use cases \nPlayback of media files in which the demuxers and the decoders are the points from which format information should disseminate to the rest of the pipeline and \nRecording from live sources in which users are accustomed to putting a capsfilter directly after the source element thus the caps information flow proceeds from the user through the potential caps of the source to the sinks of the pipeline. \nIn contrast pull mode has other typical use cases \nPlayback from a lossy source such as RTP in which more knowledge about the latency of the pipeline can increase quality or \nAudio synthesis in which audio APIs are tuned to produce only the necessary number of samples typically driven by a hardware interrupt to fill a DMA buffer or a Jack port buffer. \nLow latency effects processing whereby filters should be applied as data is transferred from a ring buffer to a sink instead of beforehand. For example instead of using the internal alsasink ringbuffer thread in push mode wavsrc volume alsasink placing the volume inside the sound card writer thread via wavsrc audioringbuffer volume alsasink. \nhttp jackit.sf.net \nThe problem with pull mode is that the sink has to know the format in order to know how many bytes to pull via gst_pad_pull_range This means that before pulling the sink must initiate negotation to decide on a format. \nRecalling the principles of capsnego whereby information must flow from those that have it to those that do not we see that the three named use cases have different negotiation requirements \nRTP and low latency playback are both like the normal playback case in which information flows downstream. \nIn audio synthesis the part of the pipeline that has the most information is the sink constrained by the capabilities of the graph that feeds it. However the caps are not completely specified at some point the user has to intervene to choose the sample rate at least. This can be done externally to gstreamer as in the jack elements or internally via a capsfilter as is customary with live sources. \nGiven that sinks potentially need the input of sources as in the RTP case and at least as a filter in the synthesis case there must be a negotiation phase before the pull thread is activated. Also given the low latency offered by pull mode we want to avoid capsnego from within the pulling thread in case it causes us to miss our scheduling deadlines. \nThe pull thread is usually started in the PAUSED PLAYING state change. We must be able to complete the negotiation before this state change happens. \nThe time to do capsnego then is after the SCHEDULING query has succeeded but before the sink has spawned the pulling thread. \n"});