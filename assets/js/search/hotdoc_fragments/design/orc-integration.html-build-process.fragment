fragment_downloaded_cb({"url": "design/orc-integration.html#build-process", "fragment": "Build Process \nThe goal of the build process is to make Orc non essential for most developers and users. This is not to say you shouldn t have Orc installed without it you will get slow backup C code just that people compiling GStreamer are not forced to switch from Liboil to Orc immediately. \nWith Orc installed the build process will use the Orc Compiler orcc to convert each orc file into a temporary C source tmp orc.c and a temporary header file name orc.h if constructed from base orc The C source file is compiled and linked to the plugin and the header file is included by other source files in the plugin. \nIf make orc update is run in the source directory the files tmp orc.c and base orc.h are copied to base orc dist.c and base orc dist.h respectively. The dist. ch files are automatically disted via orc.mk. The dist. ch files should be checked in to git whenever the orc source is changed and checked in. Example workflow \nedit orc file make test etc. make orc update git add volume.orc volumeorc dist.c volumeorc dist.h git commit \nAt make dist time all of the orc files are compiled and then copied to their dist. ch counterparts and then the dist. ch files are added to the dist directory. \nWithout Orc installed or disable orc given to configure the dist. ch files are copied to tmp orc.c and name orc.h. When compiled Orc disabled DISABLE_ORC is defined in config.h and the C backup code is compiled. This backup code is pure C and does not include orc headers or require linking against liborc. \nThe common orc.mk build method is limited by the inflexibility of automake. The file tmp orc.c must be a fixed filename using ORC_NAME to generate the filename does not work because it conflicts with automake s dependency generation. Building multiple orc files is not possible due to this restriction. \n"});