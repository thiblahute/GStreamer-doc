fragment_downloaded_cb({"url": "design/preroll.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"preroll.md\">\n<h1 id=\"preroll\">Preroll</h1>\n<p>A sink element can only complete the state change to <code>PAUSED</code> after a\nbuffer has been queued on the input pad or pads. This process is called\nprerolling and is needed to fill the pipeline with buffers so that the\ntransition to <code>PLAYING</code> goes as fast as possible, with no visual delay for\nthe user.</p>\n<p>Preroll is also crucial in maintaining correct audio and video\nsynchronisation and ensuring that no buffers are dropped in the sinks.</p>\n<p>After receiving a buffer (or EOS) on a pad the chain/event function\nshould wait to render the buffers or in the EOS case, wait to post the\nEOS message. While waiting, the sink will wait for the preroll cond to\nbe signalled.</p>\n<p>Several things can happen that require the preroll cond to be signalled.\nThese include state changes or flush events. The prerolling is\nimplemented in sinks (see <a href=\"element-sink.html\">element-sink</a></p>\n<h2 id=\"committing-the-state\">Committing the state</h2>\n<p>When going to <code>PAUSED</code> and <code>PLAYING</code> a buffer should be queued in the pad.\nWe also make this a requirement for going to <code>PLAYING</code> since a flush event\nin the <code>PAUSED</code> state could unqueue the buffer again.</p>\n<p>The state is commited in the following conditions:</p>\n<ul>\n<li>a buffer is received on a sinkpad</li>\n<li>an GAP event is received on a sinkpad.</li>\n<li>an EOS event is received on a sinkpad.</li>\n</ul>\n<p>We require the state change to be commited in EOS as well, since an EOS\n, by definition, means no buffer is going to arrive anymore.</p>\n<p>After the state is commited, a blocking wait should be performed for the\nnext event. Some sinks might render the preroll buffer before starting\nthis blocking wait.</p>\n<h2 id=\"unlocking-the-preroll\">Unlocking the preroll</h2>\n<p>The following conditions unlock the preroll:</p>\n<ul>\n<li>a state change</li>\n<li>a flush event</li>\n</ul>\n<p>When the preroll is unlocked by a flush event, a return value of\n<code>GST_FLOW_FLUSHING</code> is to be returned to the peer pad.</p>\n<p>When preroll is unlocked by a state change to <code>PLAYING</code>, playback and\nrendering of the buffers shall start.</p>\n<p>When preroll is unlocked by a state change to READY, the buffer is to be\ndiscarded and a <code>GST_FLOW_FLUSHING</code> shall be returned to the peer\nelement.</p>\n\n</div>\n\n\n\t"});