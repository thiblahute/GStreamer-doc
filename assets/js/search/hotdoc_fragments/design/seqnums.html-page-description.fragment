fragment_downloaded_cb({"url": "design/seqnums.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"seqnums.md\">\n<h1 id=\"seqnums-sequence-numbers\">Seqnums (Sequence numbers)</h1>\n<p>Seqnums are integers associated to events and messages. They are used to\nidentify a group of events and messages as being part of the same\n<em>operation</em> over the pipeline.</p>\n<p>Whenever a new event or message is created, a seqnum is set into them.\nThis seqnum is created from an ever increasing source (starting from 0\nbut it might wrap around), so each new event and message gets a new and\nhopefully unique seqnum.</p>\n<p>Suppose an element receives an event A and, as part of the logic of\nhandling the event A, creates a new event B. B should have its seqnum be\nthe same as A, because they are part of the same operation. The same\nlogic applies if this element had to create multiple events or messages,\nall of those should have the seqnum set to the value on the received\nevent. For example, when a sink element receives an EOS event and\ncreates a new EOS message to post, it should copy the seqnum from the\nevent to the message because the EOS message is a consequence of the EOS\nevent being received.</p>\n<p>Preserving the seqnums accross related events and messages allows the\nelements and applications to identify a set of events/messages as being\npart of a single operation on the pipeline. For example, flushes,\nsegments and EOS that are related to a seek event started by the\napplication.</p>\n<p>Seqnums are also useful for elements to discard duplicated events,\navoiding handling them again.</p>\n<h2 id=\"scenarios\">Scenarios</h2>\n<p>Below are some scenarios as examples of how to handle seqnums when\nreceving events:</p>\n<h3 id=\"forcing-eos-on-the-pipeline\">Forcing EOS on the pipeline</h3>\n<p>The application has a pipeline running and does a\n<code>gst_element_send_event()</code> to the pipeline with an EOS event. All the\nsources in the pipeline will have their <code>send_event</code> handlers called and\nwill receive the event from the application.</p>\n<p>When handling this event, the sources will push either the same EOS\ndownstream or create their own EOS event and push. In the later case,\nthe source should copy the seqnum from the original EOS to the newly\ncreated one. This same logic applies to all elements that receive the EOS\ndownstream, either push the same event or, if creating a new one, copy\nthe seqnum.</p>\n<p>When the EOS reaches the sink, it will create an EOS message, copy the\nseqnum to the message and post to the bus. The application receives the\nmessage and can compare its seqnum with the one from the\noriginal event sent to the pipeline. If they match, it knows that this\nEOS message was caused by the event it pushed and not from other reason\n(input finished or configured segment was over).</p>\n<h3 id=\"seeking\">Seeking</h3>\n<p>A seek event sent to the pipeline is forwarded to all sinks in it. These\nsinks, then, push the <code>SEEK</code> event upstream until they reach an element\nthat is capable of handling it. If the element handling the seek has\nmultiple source pads (tipically a demuxer is handling the seek) it might\nreceive the same seek event on all pads. To prevent handling the same\nseek event multiple times, the seqnum can be used to identify those\nevents as being the same and only handle the one received first.</p>\n<p>Also, when handling the seek, the element might push <code>FLUSH_START</code>,\n<code>FLUSH_STOP</code> and a segment event. All these events should have the\nseqnum of the received seek event. When this segment is over and an\n<code>EOS/SEGMENT_DONE</code> event is going to be pushed, it should also have the\nseqnum of the seek that originated the segment to be played.</p>\n<p>Having the same seqnum as the seek on the <code>SEGMENT_DONE</code> or EOS events is\nimportant for the application to identify that the segment requested by\nits seek has finished playing.</p>\n<h2 id=\"questions\">Questions</h2>\n<p>What happens if the application has sent a seek to the pipeline and,\nwhile the segment relative to this seek is playing, it sends an EOS\nevent? Should the EOS pushed by the source have the seqnum of the\nsegment or the EOS from the application?</p>\n<p>If the EOS was received from the application before the segment ended,\nit should have the EOS from the application event. If the segment ends\nbefore the application event is received/handled, it should have the\nseek/segment seqnum.</p>\n\n</div>\n\n\n        "});