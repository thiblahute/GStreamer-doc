fragment_downloaded_cb({"url": "design/rtp.html#basic-mechanism2", "fragment": "Basic mechanism \nThe same rtprtxreceive instance can receive several master streams and several retransmission streams. So it will try to dynamically associate a rtx ssrc with its master ssrc. So that it can reconstruct the original from the proper rtx packet. \nThe algorithm is based on the fact that seqnums of different streams considering all master and all rtx streams evolve at a different rate. It means that the initial seqnum is random for each one and the offset could also be different. So that they are statistically all different at a given time. If bad luck then the association is delayed to the next rtx request. \nThe algorithm also needs to know if a given packet is a rtx packet or not. To know this information there is the rtx payload types property. For now the user as to configure it but later it will be automatically retreive this information from SDP. It needs to know if the current packet is rtx or not in order to know if it can extract the OSN from the payload. Otherwise it would extract the OSN even on master streams which means nothing and so it could do bad things. In theory maybe it could work but we have this information in SDP so why not using it to avoid bad associations. \nNote that it also means that several master streams can have the same payload type. And also several rtx streams can have the same payload type. So the information from SDP which gives us which rtx payload type belong to a give master payload type is not enough to do the association between rtx ssrc and master ssrc. \nrtprtxreceive works in SSRC multiplexed mode so it has one always sink and src pad. \n"});