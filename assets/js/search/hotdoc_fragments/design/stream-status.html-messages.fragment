fragment_downloaded_cb({"url": "design/stream-status.html#messages", "fragment": "Messages \nThe existing STREAM_STATUS message will be further defined and implemented in selected elements. The following fields will be contained in the message \ntype GST_TYPE_STREAM_STATUS_TYPE \na set of types to control the lifecycle of the thread GST_STREAM_STATUS_TYPE_CREATE a new streaming thread is going to be created. The application has the chance to configure a custom thread. GST_STREAM_STATUS_TYPE_ENTER the streaming thread is about to enter its loop function for the first time. GST_STREAM_STATUS_TYPE_LEAVE the streaming thread is about to leave its loop. GST_STREAM_STATUS_TYPE_DESTROY a streaming thread is destroyed \nA set of types to control the state of the threads GST_STREAM_STATUS_TYPE_START a streaming thread is started GST_STREAM_STATUS_TYPE_PAUSE a streaming thread is paused GST_STREAM_STATUS_TYPE_STOP a streaming thread is stopped \nowner GST_TYPE_ELEMENT The owner element of the thread. The message source will contain the pad or one of the pads that will produce data by this thread. If this thread does not produce data on a pad the message source will contain the owner as well. The idea is that the application should be able to see from the element pad what function this thread has in the context of the application and configure the thread appropriatly. \nobject G_TYPE GstTask GThread A GstTask GThread controlling this streaming thread. \nflow return GstFlowReturn A status code for why the thread state changed. when threads are created and started this is usually GST_FLOW_OK but when they are stopping it contains the reason code why it stopped. \nreason G_TYPE_STRING A string describing the reason why the thread started stopped paused. Can be NULL if no reason is given. \n"});