fragment_downloaded_cb({"url": "design/messages.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"messages.md\">\n<h1 id=\"messages\">Messages</h1>\n<p>Messages are refcounted lightweight objects to signal the application of\npipeline events.</p>\n<p>Messages are implemented as a subclass of <code>GstMiniObject</code> with a generic\n<code>GstStructure</code> as the content. This allows for writing custom messages\nwithout requiring an API change while allowing a wide range of different\ntypes of messages.</p>\n<p>Messages are posted by objects in the pipeline and are passed to the\napplication using the <code>GstBus</code> (See also <a href=\"gstbus.html\">gstbus</a>\nand <a href=\"gstpipeline.html\">gstpipeline</a>).</p>\n<h2 id=\"message-types\">Message types</h2>\n<p><strong><code>GST_MESSAGE_EOS</code></strong>: Posted by sink elements. This message is posted to the\napplication when all the sinks in a pipeline have posted an EOS message. When\nperforming a flushing seek, the EOS state of the pipeline and sinks is reset.</p>\n<p><strong><code>GST_MESSAGE_ERROR</code></strong>: An element in the pipeline got into an error state.\nThe message carries a GError and a debug string describing the error. This\nusually means that part of the pipeline is not streaming anymore.</p>\n<p><strong><code>GST_MESSAGE_WARNING</code></strong>: An element in the pipeline encountered a condition\nthat made it produce a warning. This could be a recoverable decoding error or\nsome other non fatal event. The pipeline continues streaming after a warning.</p>\n<p><strong><code>GST_MESSAGE_INFO</code></strong>: An element produced an informational message.</p>\n<p><strong><code>GST_MESSAGE_TAG</code></strong>: An element decoded metadata about the stream. The\nmessage carries a <code>GstTagList</code> with the tag information.</p>\n<p><strong><code>GST_MESSAGE_BUFFERING</code></strong>: An element is buffering data and that could\npotentially take some time. This message is typically emitted by elements that\nperform some sort of network buffering. While the pipeline is buffering it\nshould remain in the PAUSED state. When the buffering is finished, it can\nresume PLAYING.</p>\n<p><strong><code>GST_MESSAGE_STATE_CHANGED</code></strong>: An element changed state in the pipeline.\nThe message carries the old, new and pending state of the element.</p>\n<p><strong><code>GST_MESSAGE_STATE_DIRTY</code></strong>: An internal message used to instruct\na pipeline hierarchy that a state recalculation must be performed because of an\nASYNC state change completed. This message is not used anymore.</p>\n<p><strong><code>GST_MESSAGE_STEP_DONE</code></strong>: An element stepping frames has finished. This is\ncurrently not used.</p>\n<p><strong><code>GST_MESSAGE_CLOCK_PROVIDE</code></strong>: An element notifies its capability of\nproviding a clock for the pipeline.</p>\n<p><strong><code>GST_MESSAGE_CLOCK_LOST</code></strong>: The current clock, as selected by the pipeline,\nbecame unusable. The pipeline will select a new clock on the next PLAYING state\nchange.</p>\n<p><strong><code>GST_MESSAGE_NEW_CLOCK</code></strong>: A new clock was selected for the pipeline.</p>\n<p><strong><code>GST_MESSAGE_STRUCTURE_CHANGE</code></strong>: The pipeline changed its structure, This\nmeans elements were added or removed or pads were linked or unlinked. This\nmessage is not yet used.</p>\n<p><strong><code>GST_MESSAGE_STREAM_STATUS</code></strong>: Posted by an element when it\nstarts/stops/pauses a streaming task. It contains information about the reason\nwhy the stream state changed along with the thread id. The application can use\nthis information to detect failures in streaming threads and/or to adjust\nstreaming thread priorities.</p>\n<p><strong><code>GST_MESSAGE_APPLICATION</code></strong>: The application posted a message. This message\nmust be used when the application posts a message on the bus.</p>\n<p><strong><code>GST_MESSAGE_ELEMENT</code></strong>: Element-specific message. See the specific\nelement's documentation</p>\n<p><strong><code>GST_MESSAGE_SEGMENT_START</code></strong>: An element started playback of a new\nsegment. This message is not forwarded to applications but is used internally\nto schedule <code>SEGMENT_DONE</code> messages.</p>\n<p><strong><code>GST_MESSAGE_SEGMENT_DONE</code></strong>: An element or bin completed playback of\na segment. This message is only posted on the bus if a SEGMENT seek is\nperformed on a pipeline.</p>\n<p><strong><code>GST_MESSAGE_DURATION_CHANGED</code></strong>: An element posts this message when it has\ndetected or updated the stream duration.</p>\n<p><strong><code>GST_MESSAGE_ASYNC_START</code></strong>: Posted by sinks when they start an\nasynchronous state change.</p>\n<p><strong><code>GST_MESSAGE_ASYNC_DONE</code></strong>: Posted by sinks when they receive the first\ndata buffer and complete the asynchronous state change.</p>\n<p><strong><code>GST_MESSAGE_LATENCY</code></strong>: Posted by elements when the latency in a pipeline\nchanged and a new global latency should be calculated by the pipeline or\napplication.</p>\n<p><strong><code>GST_MESSAGE_REQUEST_STATE</code></strong>: Posted by elements when they want to change\nthe state of the pipeline they are in. A typical use case would be an audio\nsink that requests the pipeline to pause in order to play a higher priority\nstream.</p>\n<p><strong><code>GST_MESSAGE_STEP_START</code></strong>: A stepping operation has started.</p>\n<p><strong><code>GST_MESSAGE_QOS</code></strong>: A buffer was dropped or an element changed its\nprocessing strategy for Quality of Service reasons.</p>\n<p><strong><code>GST_MESSAGE_PROGRESS</code></strong>: A progress message was posted. Progress messages\ninform the application about the state of asynchronous operations.</p>\n<p><strong><code>GST_MESSAGE_TOC</code></strong>: A new table of contents (TOC) was found or a previously\nfound one was updated.</p>\n<p><strong><code>GST_MESSAGE_STREAM_START</code></strong>: Signals the start of a new stream.</p>\n\n</div>\n\n\n        "});