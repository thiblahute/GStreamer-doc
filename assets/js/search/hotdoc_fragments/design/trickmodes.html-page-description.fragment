fragment_downloaded_cb({"url": "design/trickmodes.html#page-description", "fragment": "client side forward trickmodes \nclient side backwards trickmode \nThe seek happens as stated above. a SEGMENT event is sent downstream with a rate different from Plugins receiving the SEGMENT can decide to perform the rate conversion of the media data retimestamp video frames resample audio \nIf a plugin decides to resample or retimestamp it should modify the SEGMENT with a rate of and update the applied rate so that downstream elements don t resample again but are aware that the media has been modified. \nThe GStreamer base audio and video sinks will resample automatically if they receive a SEGMENT event with a rate different from The position reporting in the base audio and video sinks will also depend on the applied rate of the segment information. \nWhen the SKIP flag is set frames can be dropped in the elements. If S is the speedup factor a good algorithm for implementing frame skipping is to send audio in chunks of Nms usually ms is good and then skip S Nns of audio data. For the video we send only the keyframes in the S Nns interval. In this case the demuxer would scale the timestamps and would set an applied rate of S. \nFor backwards playback the following rules apply \nthe rate in the SEGMENT is less than \nthe SEGMENT start position is less than the stop position playback will however happen from stop to start in reverse. \nthe time member in the SEGMENT is set to the stream time of the start position. \nFor plugins the following rules apply \nA source plugin sends data in chunks starting from the last chunk of the file. The actual bytes are not reversed. Each chunk that is not forward continuous with the previous chunk is marked with a DISCONT flag. \nA demuxer accumulates the chunks. As soon as a keyframe is found everything starting from the keyframe up to the accumulated data is sent downstream. Timestamps on the buffers are set starting from the stop position to start effectively going backwards. Chunks are marked with DISCONT when they are not forward continuous with the previous buffer. \nA video decoder decodes and accumulates all decoded frames. If a buffer with a DISCONT SEGMENT or EOS is received all accumulated frames are sent downsteam in reverse. \nAn audio decoder decodes and accumulates all decoded audio. If a buffer with a DISCONT SEGMENT or EOS is received all accumulated audio is sent downstream in reverse order. Some audio codecs need the previous data buffer to decode the current one in that case the previous DISCONT buffer needs to be combined with the last non DISCONT buffer to generate the last bit of output. \nA sink reverses for audio and retimestamps audio video the buffers before playing them back. Retimestamping occurs relative to the stop position making the timestamps increase again and suitable for synchronizing against the clock. Audio sinks also have to perform simple resampling before playing the samples. \nfor transcoding audio and video resamplers can be used to reverse resample and retimestamp the buffers. Any rate adjustments performed on the media must be added to the applied_rate and subtracted from the rate members in the SEGMENT event. \nIn SKIP mode the same algorithm as for forward SKIP mode can be used. \n"});