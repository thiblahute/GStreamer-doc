fragment_downloaded_cb({"url": "design/overview.html#dataflow-and-buffers", "fragment": "Dataflow and buffers \nGStreamer supports two possible types of dataflow the push and pull model. In the push model an upstream element sends data to a downstream element by calling a method on a sinkpad. In the pull model a downstream element requests data from an upstream element by calling a method on a source pad. \nThe most common dataflow is the push model. The pull model can be used in specific circumstances by demuxer elements. The pull model can also be used by low latency audio applications. \nThe data passed between pads is encapsulated in Buffers. The buffer contains pointers to the actual memory and also metadata describing the memory. This metadata includes \ntimestamp of the data this is the time instance at which the data was captured or the time at which the data should be played back. \noffset of the data a media specific offset this could be samples for audio or frames for video. \nthe duration of the data in time. \nadditional flags describing special properties of the data such as discontinuities or delta units. \nadditional arbitrary metadata \nWhen an element whishes to send a buffer to another element is does this using one of the pads that is linked to a pad of the other element. In the push model a buffer is pushed to the peer pad with gst_pad_push In the pull model a buffer is pulled from the peer with the gst_pad_pull_range function. \nBefore an element pushes out a buffer it should make sure that the peer element can understand the buffer contents. It does this by querying the peer element for the supported formats and by selecting a suitable common format. The selected format is then first sent to the peer element with a CAPS event before pushing the buffer see negotiation \nWhen an element pad receives a CAPS event it has to check if it understand the media type. The element must refuse following buffers if the media type preceding it was not accepted. \nBoth gst_pad_push and gst_pad_pull_range have a return value indicating whether the operation succeeded. An error code means that no more data should be sent to that pad. A source element that initiates the data flow in a thread typically pauses the producing thread when this happens. \nA buffer can be created with gst_buffer_new or by requesting a usable buffer from a buffer pool using gst_buffer_pool_acquire_buffer Using the second method it is possible for the peer element to implement a custom buffer allocation algorithm. \nThe process of selecting a media type is called caps negotiation. \n"});