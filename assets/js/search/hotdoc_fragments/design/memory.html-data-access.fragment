fragment_downloaded_cb({"url": "design/memory.html#data-access", "fragment": "Data Access \nAccess to the memory region is always controlled with a map and unmap method call. This allows the implementation to monitor the access patterns or set up the required memory mappings when needed. \nThe access of the memory object is controlled with the locking mechanism on GstMiniObject See miniobject \nMapping a memory region requires the caller to specify the access method READ and or WRITE. Mapping a memory region will first try to get a lock on the memory in the requested access mode. This means that the map operation can fail when WRITE access is requested on a non writable memory object it has an exclusive counter the memory is already locked in an incompatible access mode or the memory is marked readonly \nAfter the data has been accessed in the object the unmap call must be performed which will unlock the memory again. \nIt is allowed to recursively map multiple times with the same or narrower access modes. For each of the map calls a corresponding unmap call needs to be made. WRITE only memory cannot be mapped in READ mode and READ only memory cannot be mapped in WRITE mode. \nThe memory pointer returned from the map call is guaranteed to remain valid in the requested mapping mode until the corresponding unmap call is performed on the pointer. \nWhen multiple map operations are nested and return the same pointer the pointer is valid until the last unmap call is done. \nWhen the final reference on a memory object is dropped all outstanding mappings should have been unmapped. \nResizing a GstMemory does not influence any current mappings in any way. \n"});