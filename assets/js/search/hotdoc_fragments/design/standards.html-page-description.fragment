fragment_downloaded_cb({"url": "design/standards.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"standards.md\">\n<h1 id=\"ownership-of-dynamic-objects\">Ownership of dynamic objects</h1>\n<p>Any object-oriented system or language that doesn\u2019t have automatic\ngarbage collection has many potential pitfalls as far as pointers\ngo. Therefore, some standards must be adhered to as far as who owns\nwhat.</p>\n<h2 id=\"strings\">Strings</h2>\n<p>Arguments passed into a function are owned by the caller, and the\nfunction will make a copy of the string for its own internal use. The\nstring should be <code>const gchar *</code>. Strings returned from a function are\nalways a copy of the original and should be freed after usage by the\ncaller.</p>\n<p>ex:</p>\n<pre><code class=\"language-c\">name = gst_element_get_name (element);   /* copy of name is made */\n.. use name ..\ng_free (name);                           /* free after usage */\n</code></pre>\n<h2 id=\"objects\">Objects</h2>\n<p>Objects passed into a function are owned by the caller, any additional\nreference held to the object after leaving the function should increase\nits refcount.</p>\n<p>Objects returned from a function are owned by the caller. This means\nthat the caller should <code>_free()</code> or <code>_unref()</code> the objects after usage.</p>\n<p>ex:</p>\n<pre><code class=\"language-c\">peer = gst_pad_get_peer (pad);          /* peer with increased refcount */\nif (peer) {\n  .. use peer ..\n  gst_object_unref (GST_OBJECT (peer)); /* unref peer after usage */\n}\n</code></pre>\n<h2 id=\"iterators\">Iterators</h2>\n<p>When retrieving multiple objects from an object, an iterator should be\nused. The iterator allows you to access the objects one after another\nwhile making sure that the retrieved set of objects remains consistent.</p>\n<p>Each object retrieved from an iterator has its refcount increased or is\na copy of the original. In any case the object should be unreffed or\nfreed after usage.</p>\n\n</div>\n\n\n        "});