fragment_downloaded_cb({"url": "design/stream-status.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"stream-status.md\">\n        <h1 id=\"stream-status\">Stream Status</h1>\n<p>This document describes the design and use cases for the stream status\nmessages.</p>\n<p><code>STREAM_STATUS</code> messages are posted on the bus when the state of a\nstreaming thread changes. The purpose of this messages is to allow the\napplication to interact with the streaming thread properties, such as\nthe thread priority or the threadpool to use.</p>\n<h2 id=\"requirements-and-scenarios\">Requirements and scenarios</h2>\n<p>We accommodate for the following requirements:</p>\n<ul>\n<li>\n<p>Application is informed when a streaming thread is about to be\ncreated. It should be possible for the application to suggest a\ncustom <code>GstTaskPool</code>.</p>\n</li>\n<li>\n<p>Application is informed when the status of a streaming thread is\nchanged. This can be interesting for GUI application that want to\nvisualize the status of the streaming threads\n(playing/paused/stopped)</p>\n</li>\n<li>\n<p>Application is informed when a streaming thread is destroyed.</p>\n</li>\n</ul>\n<p>We allow for the following scenarios:</p>\n<ul>\n<li>\n<p>Elements require a specific (internal) streaming thread to operate\nor the application can create/specify a thread for the element.</p>\n</li>\n<li>\n<p>Elements allow the application to configure a priority on the\nthreads.</p>\n</li>\n</ul>\n<h2 id=\"use-cases\">Use cases</h2>\n<ul>\n<li>boost the priority of the udp receiver streaming thread</li>\n</ul>\n<pre><code>.--------.    .-------.    .------.    .-------.\n| udpsrc |    | depay |    | adec |    | asink |\n|       src-&gt;sink    src-&gt;sink   src-&gt;sink     |\n'--------'    '-------'    '------'    '-------'\n</code></pre>\n<ul>\n<li>\n<p>when going from <code>READY</code> to <code>PAUSED</code> state, udpsrc will require a\nstreaming thread for pushing data into the depayloader. It will\npost a <code>STREAM_STATUS</code> message indicating its requirement for a\nstreaming thread.</p>\n</li>\n<li>\n<p>The application will usually react to the <code>STREAM_STATUS</code>\nmessages with a sync bus handler.</p>\n</li>\n<li>\n<p>The application can configure the <code>GstTask</code> with a custom\n<code>GstTaskPool</code> to manage the streaming thread or it can ignore the\nmessage which will make the element use its default <code>GstTaskPool</code>.</p>\n</li>\n<li>\n<p>The application can react to the <code>ENTER/LEAVE</code> stream status\nmessage to configure the thread right before it is\nstarted/stopped. This can be used to configure the thread\npriority.</p>\n</li>\n<li>\n<p>Before the <code>GstTask</code> is changed state (start/pause/stop) a\n<code>STREAM_STATUS</code> message is posted that can be used by the\napplication to keep track of the running streaming threads.</p>\n</li>\n</ul>\n<h2 id=\"messages\">Messages</h2>\n<p>The existing <code>STREAM_STATUS</code> message will be further defined and implemented in\n(selected) elements. The following fields will be contained in the message:</p>\n<ul>\n<li>\n<p><strong><code>type</code></strong>, <code>GST_TYPE_STREAM_STATUS_TYPE</code>:</p>\n<ul>\n<li>\n<p>a set of types to control the lifecycle of the thread:\n<code>GST_STREAM_STATUS_TYPE_CREATE</code>: a new streaming thread is going\nto be created. The application has the chance to configure a custom\nthread. <code>GST_STREAM_STATUS_TYPE_ENTER</code>: the streaming thread is\nabout to enter its loop function for the first time.\n<code>GST_STREAM_STATUS_TYPE_LEAVE</code>: the streaming thread is about to\nleave its loop. <code>GST_STREAM_STATUS_TYPE_DESTROY</code>: a streaming\nthread is destroyed</p>\n</li>\n<li>\n<p>A set of types to control the state of the threads:\n<code>GST_STREAM_STATUS_TYPE_START</code>: a streaming thread is started\n<code>GST_STREAM_STATUS_TYPE_PAUSE</code>: a streaming thread is paused\n<code>GST_STREAM_STATUS_TYPE_STOP</code>: a streaming thread is stopped</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong><code>owner</code></strong>: <code>GST_TYPE_ELEMENT</code>: The owner element of the thread. The\nmessage source will contain the pad (or one of the pads) that will\nproduce data by this thread. If this thread does not produce data on\na pad, the message source will contain the owner as well. The idea\nis that the application should be able to see from the element/pad\nwhat function this thread has in the context of the application and\nconfigure the thread appropriatly.</p>\n</li>\n<li>\n<p><strong><code>object</code></strong>: <code>G_TYPE</code>, <code>GstTask/GThread</code>: A <code>GstTask/GThread</code> controlling\nthis streaming thread.</p>\n</li>\n<li>\n<p><strong><code>flow-return</code></strong>: <code>GstFlowReturn</code>: A status code for why the thread state\nchanged. when threads are created and started, this is usually\n<code>GST_FLOW_OK</code> but when they are stopping it contains the reason code\nwhy it stopped.</p>\n</li>\n<li>\n<p><strong><code>reason</code></strong>: <code>G_TYPE_STRING</code>: A string describing the reason why the\nthread started/stopped/paused. Can be NULL if no reason is given.</p>\n</li>\n</ul>\n<h2 id=\"events\">Events</h2>\n<p>FIXME</p>\n\n        \n\n    </div>\n\n\n        "});