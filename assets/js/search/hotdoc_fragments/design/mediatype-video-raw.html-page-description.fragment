fragment_downloaded_cb({"url": "design/mediatype-video-raw.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"mediatype-video-raw.md\">\n<h1 id=\"raw-video-media-types\">Raw Video Media Types</h1>\n<p><strong>video/x-raw</strong></p>\n<ul>\n<li>\n<p><strong>width</strong>, <code>G_TYPE_INT</code>: Mandatory. The width of the image in pixels.</p>\n</li>\n<li>\n<p><strong>height</strong>, <code>G_TYPE_INT</code>: Mandatory. The height of the image in pixels</p>\n</li>\n<li>\n<p><strong>framerate</strong>, <code>GST_TYPE_FRACTION</code>: Default 0/1. The framerate of the video,\n0/1 for variable framerate</p>\n</li>\n<li>\n<p><strong>max-framerate</strong>, <code>GST_TYPE_FRACTION</code>: Default as framerate. For variable\nframerates this would be the maximum expected framerate. This\nvalue is only valid when the framerate is set to \"variable\" (0/1)</p>\n</li>\n<li>\n<p><strong>views</strong>, <code>G_TYPE_INT</code>: Default 1. The number of views for multiview video.\nEach buffer contains multiple <code>GstVideoMeta</code> buffers that describe each\nview. use the frame id to get access to the different views.</p>\n</li>\n<li>\n<p><strong>interlace-mode</strong>, <code>G_TYPE_STRING</code>: Default progressive. The interlace\nmode. The following values are possible:</p>\n<ul>\n<li>\n<p><em>\"progressive\"</em>: all frames are progressive</p>\n</li>\n<li>\n<p><em>\"interleaved\"</em>: 2 fields are interleaved in one video frame. Extra buffer\nflags describe the field order.</p>\n</li>\n<li>\n<p><em>\"mixed\"</em>: progressive and interleaved frames, extra buffer flags\ndescribe the frame and fields.</p>\n</li>\n<li>\n<p><em>\"fields\"</em>: 2 fields are stored in one buffer. Use the frame ID\nto get access to the required field. For multiview (the\n'views' property &gt; 1) the fields of view N can be found at\nframe ID (N * 2) and (N * 2) + 1.\nEach view has only half the amount of lines as noted in the\nheight property, pads specifying the \"fields\" property\nmust be prepared for this. This mode requires multiple\nGstVideoMeta metadata to describe the fields.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>chroma-site</strong>, <code>G_TYPE_STRING</code>: Default UNKNOWN. The chroma siting of the\nvideo frames.</p>\n<ul>\n<li><em>\"jpeg\"</em>: <code>GST_VIDEO_CHROMA_SITE_JPEG</code></li>\n<li><em>\"mpeg2\"</em>: <code>GST_VIDEO_CHROMA_SITE_MPEG2</code></li>\n<li><em>\"dv\"</em>: <code>GST_VIDEO_CHROMA_SITE_DV</code></li>\n</ul>\n</li>\n<li>\n<p><strong>colorimetry</strong>, <code>G_TYPE_STRING</code>: Default UNKNOWN. The colorimetry of the\nvideo frames. Predefined colorimetry is given with the following values:</p>\n<ul>\n<li><em>\"bt601\"</em></li>\n<li><em>\"bt709\"</em></li>\n<li><em>\"smpte240m\"</em></li>\n</ul>\n</li>\n<li>\n<p><strong>pixel-aspect-ratio</strong>, <code>GST_TYPE_FRACTION</code>: Default 1/1. The pixel aspect\nration of the video</p>\n</li>\n<li>\n<p><strong>format</strong>, <code>G_TYPE_STRING</code>: Mandatory. The format of the video. See the\nFormats section for a list of valid format strings.</p>\n</li>\n</ul>\n<h2 id=\"metadata\">Metadata</h2>\n<ul>\n<li>\n<p><code>GstVideoMeta</code> contains the description of one video field or frame. It\nhas stride support and support for having multiple memory regions per frame.\nMultiple GstVideoMeta can be added to a buffer and can be identified with a\nunique id. This id can be used to select fields in interlaced formats or\nviews in multiview formats.</p>\n</li>\n<li>\n<p><code>GstVideoCropMeta</code> contains the cropping region of the video.</p>\n</li>\n</ul>\n<h2 id=\"formats\">Formats</h2>\n<ul>\n<li><strong>\"I420\"</strong> planar 4:2:0 YUV</li>\n</ul>\n<pre><code>        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth:           8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (RU2 (width) / 2)\n          default size:    rstride (component1) * RU2 (height) / 2\n\n        Component 2: V\n          depth            8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (RU2 (width) / 2)\n          default size:    rstride (component2) * RU2 (height) / 2\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n</code></pre>\n<ul>\n<li>\n<p><strong>\"YV12\"</strong> planar 4:2:0 YUV</p>\n<pre><code>  Same as I420 but with U and V planes swapped\n</code></pre>\n</li>\n</ul>\n<pre><code>        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * RU2 (height)\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  offset (component2) + size (component2)\n          default rstride: RU4 (RU2 (width) / 2)\n          default size:    rstride (component1) * RU2 (height) / 2\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (RU2 (width) / 2)\n          default size:    rstride (component2) * RU2 (height) / 2\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n</code></pre>\n<ul>\n<li><strong>\"YUY2\"</strong> packed 4:2:2 YUV</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |Y0|U0|Y1|V0| |Y2|U2|Y3|V2| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: Y\n          depth:           8\n          pstride:         2\n          offset:          0\n\n        Component 1: U\n          depth:           8\n          offset:          1\n          pstride:         4\n\n        Component 2: V\n          depth            8\n          offset:          3\n          pstride:         4\n\n        Image\n          default rstride: RU4 (width * 2)\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li>\n<p><strong>\"YVYU\"</strong> packed 4:2:2 YUV</p>\n<pre><code>Same as \"YUY2\" but with U and V planes swapped\n</code></pre>\n</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |Y0|V0|Y1|U0| |Y2|V2|Y3|U2| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: Y\n          depth:           8\n          pstride:         2\n          offset:          0\n\n        Component 1: U\n          depth:           8\n          pstride:         4\n          offset:          3\n\n        Component 2: V\n          depth            8\n          pstride:         4\n          offset:          1\n\n        Image\n          default rstride: RU4 (width * 2)\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"UYVY\"</strong> packed 4:2:2 YUV</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |U0|Y0|V0|Y1| |U2|Y2|V2|Y3| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: Y\n          depth:           8\n          pstride:         2\n          offset:          1\n\n        Component 1: U\n          depth:           8\n          pstride:         4\n          offset:          0\n\n        Component 2: V\n          depth            8\n          pstride:         4\n          offset:          2\n\n        Image\n          default rstride: RU4 (width * 2)\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"AYUV\"</strong> packed 4:4:4 YUV with alpha channel</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |A0|Y0|U0|V0| |A1|Y1|U1|V1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: Y\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 1: U\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 2: V\n          depth            8\n          pstride:         4\n          offset:          3\n\n        Component 3: A\n          depth            8\n          pstride:         4\n          offset:          0\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"RGBx\"</strong> sparse rgb packed into 32 bit, space last</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |R0|G0|B0|X | |R1|G1|B1|X | ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          0\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          2\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"BGRx\"</strong> sparse reverse rgb packed into 32 bit, space last</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |B0|G0|R0|X | |B1|G1|R1|X | ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          0\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"xRGB\"</strong> sparse rgb packed into 32 bit, space first</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |X |R0|G0|B0| |X |R1|G1|B1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          3\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"xBGR\"</strong> sparse reverse rgb packed into 32 bit, space first</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |X |B0|G0|R0| |X |B1|G1|R1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          3\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          1\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"RGBA\"</strong> rgb with alpha channel last</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |R0|G0|B0|A0| |R1|G1|B1|A1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          0\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          2\n\n        Component 3: A\n          depth            8\n          pstride:         4\n          offset:          3\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"BGRA\"</strong> reverse rgb with alpha channel last</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |B0|G0|R0|A0| |B1|G1|R1|A1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          0\n\n        Component 3: A\n          depth            8\n          pstride:         4\n          offset:          3\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"ARGB\"</strong> rgb with alpha channel first</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          3\n\n        Component 3: A\n          depth            8\n          pstride:         4\n          offset:          0\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"ABGR\"</strong> reverse rgb with alpha channel first</li>\n</ul>\n<pre><code>       +--+--+--+--+ +--+--+--+--+\n       |A0|R0|G0|B0| |A1|R1|G1|B1| ...\n       +--+--+--+--+ +--+--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         4\n          offset:          1\n\n        Component 1: G\n          depth:           8\n          pstride:         4\n          offset:          2\n\n        Component 2: B\n          depth            8\n          pstride:         4\n          offset:          3\n\n        Component 3: A\n          depth            8\n          pstride:         4\n          offset:          0\n\n        Image\n          default rstride: width * 4\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"RGB\"</strong> rgb</li>\n</ul>\n<pre><code>       +--+--+--+ +--+--+--+\n       |R0|G0|B0| |R1|G1|B1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         3\n          offset:          0\n\n        Component 1: G\n          depth:           8\n          pstride:         3\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         3\n          offset:          2\n\n        Image\n          default rstride: RU4 (width * 3)\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"BGR\"</strong> reverse rgb</li>\n</ul>\n<pre><code>       +--+--+--+ +--+--+--+\n       |B0|G0|R0| |B1|G1|R1| ...\n       +--+--+--+ +--+--+--+\n\n        Component 0: R\n          depth:           8\n          pstride:         3\n          offset:          2\n\n        Component 1: G\n          depth:           8\n          pstride:         3\n          offset:          1\n\n        Component 2: B\n          depth            8\n          pstride:         3\n          offset:          0\n\n        Image\n          default rstride: RU4 (width * 3)\n          default size:    rstride (image) * height\n</code></pre>\n<ul>\n<li><strong>\"Y41B\"</strong> planar 4:1:1 YUV</li>\n</ul>\n<pre><code>        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU16 (width) / 4\n          default size:    rstride (component1) * height\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU16 (width) / 4\n          default size:    rstride (component2) * height\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n</code></pre>\n<ul>\n<li><strong>\"Y42B\"</strong> planar 4:2:2 YUV</li>\n</ul>\n<pre><code>        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU8 (width) / 2\n          default size:    rstride (component1) * height\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU8 (width) / 2\n          default size:    rstride (component2) * height\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n</code></pre>\n<ul>\n<li><strong>\"Y444\"</strong> planar 4:4:4 YUV</li>\n</ul>\n<pre><code>        Component 0: Y\n          depth:           8\n          pstride:         1\n          default offset:  0\n          default rstride: RU4 (width)\n          default size:    rstride (component0) * height\n\n        Component 1: U\n          depth            8\n          pstride:         1\n          default offset:  size (component0)\n          default rstride: RU4 (width)\n          default size:    rstride (component1) * height\n\n        Component 2: V\n          depth:           8\n          pstride:         1\n          default offset:  offset (component1) + size (component1)\n          default rstride: RU4 (width)\n          default size:    rstride (component2) * height\n\n        Image\n          default size: size (component0) +\n                        size (component1) +\n                        size (component2)\n\n- **\"v210\"** packed 4:2:2 10-bit YUV, complex format\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           10\n\n    Component 1: U\n      depth            10\n\n    Component 2: V\n      depth:           10\n\n    Image\n      default rstride: RU48 (width) * 128\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"v216\"** packed 4:2:2 16-bit YUV, Y0-U0-Y1-V1 order\n\n</code></pre>\n<pre><code>   +--+--+--+--+ +--+--+--+--+\n   |U0|Y0|V0|Y1| |U1|Y2|V1|Y3| ...\n   +--+--+--+--+ +--+--+--+--+\n\n    Component 0: Y\n      depth:           16 LE\n      pstride:         4\n      offset:          2\n\n    Component 1: U\n      depth            16 LE\n      pstride:         8\n      offset:          0\n\n    Component 2: V\n      depth:           16 LE\n      pstride:         8\n      offset:          4\n\n    Image\n      default rstride: RU8 (width * 2)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"NV12\"** planar 4:2:0 YUV with interleaved UV plane\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth            8\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: RU4 (width)\n\n    Component 2: V\n      depth:           8\n      pstride:         2\n      default offset:  offset (component1) + 1\n      default rstride: RU4 (width)\n\n    Image\n      default size: RU4 (width) * RU2 (height) * 3 / 2\n</code></pre>\n<pre><code>\n- **\"NV21\"** planar 4:2:0 YUV with interleaved VU plane\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth            8\n      pstride:         2\n      default offset:  offset (component1) + 1\n      default rstride: RU4 (width)\n\n    Component 2: V\n      depth:           8\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: RU4 (width)\n\n    Image\n      default size: RU4 (width) * RU2 (height) * 3 / 2\n</code></pre>\n<pre><code>\n- **\"GRAY8\"** 8-bit grayscale \"Y800\" same as \"GRAY8\"\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      offset:          0\n      pstride:         1\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * height\n\n    Image\n      default size:    size (component0)\n</code></pre>\n<pre><code>\n- **\"GRAY16\\_BE\"** 16-bit grayscale, most significant byte first\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           16\n      offset:          0\n      pstride:         2\n      default rstride: RU4 (width * 2)\n      default size:    rstride (component0) * height\n\n    Image\n      default size:    size (component0)\n</code></pre>\n<pre><code>\n- **\"GRAY16\\_LE\"** 16-bit grayscale, least significant byte first\n- **\"Y16\"** same as \"GRAY16\\_LE\"\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           16 LE\n      offset:          0\n      pstride:         2\n      default rstride: RU4 (width * 2)\n      default size:    rstride (component0) * height\n\n    Image\n      default size:    size (component0)\n</code></pre>\n<pre><code>\n- **\"v308\"** packed 4:4:4 YUV\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |Y0|U0|V0| |Y1|U1|V1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: Y\n      depth:           8\n      pstride:         3\n      offset:          0\n\n    Component 1: U\n      depth            8\n      pstride:         3\n      offset:          1\n\n    Component 2: V\n      depth:           8\n      pstride:         3\n      offset:          2\n\n    Image\n      default rstride: RU4 (width * 3)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"IYU2\"** packed 4:4:4 YUV, U-Y-V order\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |U0|Y0|V0| |U1|Y1|V1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: Y\n      depth:           8\n      pstride:         3\n      offset:          1\n\n    Component 1: U\n      depth            8\n      pstride:         3\n      offset:          0\n\n    Component 2: V\n      depth:           8\n      pstride:         3\n      offset:          2\n\n    Image\n      default rstride: RU4 (width * 3)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"RGB16\"** rgb 5-6-5 bits per component\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |R0|G0|B0| |R1|G1|B1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: R\n      depth:           5\n      pstride:         2\n\n    Component 1: G\n      depth            6\n      pstride:         2\n\n    Component 2: B\n      depth:           5\n      pstride:         2\n\n    Image\n      default rstride: RU4 (width * 2)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"BGR16\"** reverse rgb 5-6-5 bits per component\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |B0|G0|R0| |B1|G1|R1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: R\n      depth:           5\n      pstride:         2\n\n    Component 1: G\n      depth            6\n      pstride:         2\n\n    Component 2: B\n      depth:           5\n      pstride:         2\n\n    Image\n      default rstride: RU4 (width * 2)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"RGB15\"** rgb 5-5-5 bits per component\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |R0|G0|B0| |R1|G1|B1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: R\n      depth:           5\n      pstride:         2\n\n    Component 1: G\n      depth            5\n      pstride:         2\n\n    Component 2: B\n      depth:           5\n      pstride:         2\n\n    Image\n      default rstride: RU4 (width * 2)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"BGR15\"** reverse rgb 5-5-5 bits per component\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |B0|G0|R0| |B1|G1|R1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: R\n      depth:           5\n      pstride:         2\n\n    Component 1: G\n      depth            5\n      pstride:         2\n\n    Component 2: B\n      depth:           5\n      pstride:         2\n\n    Image\n      default rstride: RU4 (width * 2)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"UYVP\"** packed 10-bit 4:2:2 YUV (U0-Y0-V0-Y1 U2-Y2-V2-Y3 U4 ...)\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           10\n\n    Component 1: U\n      depth            10\n\n    Component 2: V\n      depth:           10\n\n    Image\n      default rstride: RU4 (width * 2 * 5)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"A420\"** planar 4:4:2:0 AYUV\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth            8\n      pstride:         1\n      default offset:  size (component0)\n      default rstride: RU4 (RU2 (width) / 2)\n      default size:    rstride (component1) * (RU2 (height) / 2)\n\n    Component 2: V\n      depth:           8\n      pstride:         1\n      default offset:  size (component0) + size (component1)\n      default rstride: RU4 (RU2 (width) / 2)\n      default size:    rstride (component2) * (RU2 (height) / 2)\n\n    Component 3: A\n      depth:           8\n      pstride:         1\n      default offset:  size (component0) + size (component1) +\n                       size (component2)\n      default rstride: RU4 (width)\n      default size:    rstride (component3) * RU2 (height)\n\n    Image\n      default size:    size (component0) +\n                       size (component1) +\n                       size (component2) +\n                       size (component3)\n</code></pre>\n<pre><code>\n- **\"RGB8P\"** 8-bit paletted RGB\n\n</code></pre>\n<pre><code>    Component 0: INDEX\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * height\n\n    Component 1: PALETTE\n      depth            32\n      pstride:         4\n      default offset:  size (component0)\n      rstride:         4\n      size:            256 * 4\n\n    Image\n      default size:    size (component0) + size (component1)\n</code></pre>\n<pre><code>\n- **\"YUV9\"** planar 4:1:0 YUV\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * height\n\n    Component 1: U\n      depth            8\n      pstride:         1\n      default offset:  size (component0)\n      default rstride: RU4 (RU4 (width) / 4)\n      default size:    rstride (component1) * (RU4 (height) / 4)\n\n    Component 2: V\n      depth:           8\n      pstride:         1\n      default offset:  offset (component1) + size (component1)\n      default rstride: RU4 (RU4 (width) / 4)\n      default size:    rstride (component2) * (RU4 (height) / 4)\n\n    Image\n      default size: size (component0) +\n                    size (component1) +\n                    size (component2)\n</code></pre>\n<pre><code>\n- **\"YVU9\"** planar 4:1:0 YUV (like YUV9 but UV planes swapped)\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU4 (width)\n      default size:    rstride (component0) * height\n\n    Component 1: U\n      depth            8\n      pstride:         1\n      default offset:  offset (component2) + size (component2)\n      default rstride: RU4 (RU4 (width) / 4)\n      default size:    rstride (component1) * (RU4 (height) / 4)\n\n    Component 2: V\n      depth:           8\n      pstride:         1\n      default offset:  size (component0)\n      default rstride: RU4 (RU4 (width) / 4)\n      default size:    rstride (component2) * (RU4 (height) / 4)\n\n    Image\n      default size: size (component0) +\n                    size (component1) +\n                    size (component2)\n</code></pre>\n<pre><code>\n- **\"IYU1\"** packed 4:1:1 YUV (Cb-Y0-Y1-Cr-Y2-Y3 ...)\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |B0|G0|R0| |B1|G1|R1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: Y\n      depth:           8\n      offset:          1\n      pstride:         2\n\n    Component 1: U\n      depth            5\n      offset:          0\n      pstride:         2\n\n    Component 2: V\n      depth:           5\n      offset:          4\n      pstride:         2\n\n    Image\n      default rstride: RU4 (RU4 (width) + RU4 (width) / 2)\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"ARGB64\"** rgb with alpha channel first, 16 bits per channel\n\n</code></pre>\n<pre><code>   +--+--+--+--+ +--+--+--+--+\n   |A0|R0|G0|B0| |A1|R1|G1|B1| ...\n   +--+--+--+--+ +--+--+--+--+\n\n    Component 0: R\n      depth:           16 LE\n      pstride:         8\n      offset:          2\n\n    Component 1: G\n      depth            16 LE\n      pstride:         8\n      offset:          4\n\n    Component 2: B\n      depth:           16 LE\n      pstride:         8\n      offset:          6\n\n    Component 3: A\n      depth:           16 LE\n      pstride:         8\n      offset:          0\n\n    Image\n      default rstride: width * 8\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"AYUV64\"** packed 4:4:4 YUV with alpha channel, 16 bits per channel (A0-Y0-U0-V0 ...)\n\n</code></pre>\n<pre><code>   +--+--+--+--+ +--+--+--+--+\n   |A0|Y0|U0|V0| |A1|Y1|U1|V1| ...\n   +--+--+--+--+ +--+--+--+--+\n\n    Component 0: Y\n      depth:           16 LE\n      pstride:         8\n      offset:          2\n\n    Component 1: U\n      depth            16 LE\n      pstride:         8\n      offset:          4\n\n    Component 2: V\n      depth:           16 LE\n      pstride:         8\n      offset:          6\n\n    Component 3: A\n      depth:           16 LE\n      pstride:         8\n      offset:          0\n\n    Image\n      default rstride: width * 8\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"r210\"** packed 4:4:4 RGB, 10 bits per channel\n\n</code></pre>\n<pre><code>   +--+--+--+ +--+--+--+\n   |R0|G0|B0| |R1|G1|B1| ...\n   +--+--+--+ +--+--+--+\n\n    Component 0: R\n      depth:           10\n      pstride:         4\n\n    Component 1: G\n      depth            10\n      pstride:         4\n\n    Component 2: B\n      depth:           10\n      pstride:         4\n\n    Image\n      default rstride: width * 4\n      default size:    rstride (image) * height\n</code></pre>\n<pre><code>\n- **\"I420\\_10LE\"** planar 4:2:0 YUV, 10 bits per channel LE\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           10 LE\n      pstride:         2\n      default offset:  0\n      default rstride: RU4 (width * 2)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth:           10 LE\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: RU4 (width)\n      default size:    rstride (component1) * RU2 (height) / 2\n\n    Component 2: V\n      depth            10 LE\n      pstride:         2\n      default offset:  offset (component1) + size (component1)\n      default rstride: RU4 (width)\n      default size:    rstride (component2) * RU2 (height) / 2\n\n    Image\n      default size: size (component0) +\n                    size (component1) +\n                    size (component2)\n</code></pre>\n<pre><code>\n- **\"I420\\_10BE\"** planar 4:2:0 YUV, 10 bits per channel BE\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           10 BE\n      pstride:         2\n      default offset:  0\n      default rstride: RU4 (width * 2)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth:           10 BE\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: RU4 (width)\n      default size:    rstride (component1) * RU2 (height) / 2\n\n    Component 2: V\n      depth            10 BE\n      pstride:         2\n      default offset:  offset (component1) + size (component1)\n      default rstride: RU4 (width)\n      default size:    rstride (component2) * RU2 (height) / 2\n\n    Image\n      default size: size (component0) +\n                    size (component1) +\n                    size (component2)\n</code></pre>\n<pre><code>\n- **\"I422\\_10LE\"** planar 4:2:2 YUV, 10 bits per channel LE\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           10 LE\n      pstride:         2\n      default offset:  0\n      default rstride: RU4 (width * 2)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth:           10 LE\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: RU4 (width)\n      default size:    rstride (component1) * RU2 (height)\n\n    Component 2: V\n      depth            10 LE\n      pstride:         2\n      default offset:  offset (component1) + size (component1)\n      default rstride: RU4 (width)\n      default size:    rstride (component2) * RU2 (height)\n\n    Image\n      default size: size (component0) +\n                    size (component1) +\n                    size (component2)\n</code></pre>\n<pre><code>\n- **\"I422\\_10BE\"** planar 4:2:2 YUV, 10 bits per channel BE\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           10 BE\n      pstride:         2\n      default offset:  0\n      default rstride: RU4 (width * 2)\n      default size:    rstride (component0) * RU2 (height)\n\n    Component 1: U\n      depth:           10 BE\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: RU4 (width)\n      default size:    rstride (component1) * RU2 (height)\n\n    Component 2: V\n      depth            10 BE\n      pstride:         2\n      default offset:  offset (component1) + size (component1)\n      default rstride: RU4 (width)\n      default size:    rstride (component2) * RU2 (height)\n\n    Image\n      default size: size (component0) +\n                    size (component1) +\n                    size (component2)\n</code></pre>\n<pre><code>\n- **\"Y444\\_10BE\"** planar 4:4:4 YUV, 10 bits per channel\n- **\"Y444\\_10LE\"** planar 4:4:4 YUV, 10 bits per channel\n\n- **\"GBR\"** planar 4:4:4 RGB, 8 bits per channel\n- **\"GBR\\_10BE\"** planar 4:4:4 RGB, 10 bits per channel\n- **\"GBR\\_10LE\"** planar 4:4:4 RGB, 10 bits per channel\n\n- **\"NV16\"** planar 4:2:2 YUV with interleaved UV plane\n- **\"NV61\"** planar 4:2:2 YUV with interleaved VU plane\n- **\"NV24\"** planar 4:4:4 YUV with interleaved UV plane\n\n- **\"NV12\\_64Z32\"** planar 4:2:0 YUV with interleaved UV plane in 64x32 tiles zigzag\n\n</code></pre>\n<pre><code>    Component 0: Y\n      depth:           8\n      pstride:         1\n      default offset:  0\n      default rstride: RU128 (width)\n      default size:    rstride (component0) * RU32 (height)\n\n    Component 1: U\n      depth            8\n      pstride:         2\n      default offset:  size (component0)\n      default rstride: (y_tiles &lt;&lt; 16) | x_tiles\n      default x_tiles: RU128 (width) &gt;&gt; tile_width\n      default y_tiles: RU32 (height) &gt;&gt; tile_height\n\n    Component 2: V\n      depth:           8\n      pstride:         2\n      default offset:  offset (component1) + 1\n      default rstride: (y_tiles &lt;&lt; 16) | x_tiles\n      default x_tiles: RU128 (width) &gt;&gt; tile_width\n      default y_tiles: RU64 (height) &gt;&gt; (tile_height + 1)\n\n    Image\n      default size: RU128 (width) * (RU32 (height) + RU64 (height) / 2)\n      tile mode:    ZFLIPZ_2X2\n      tile width:   6\n      tile height:  5\n</code></pre>\n<pre><code></code></pre>\n\n</div>\n\n\n        "});