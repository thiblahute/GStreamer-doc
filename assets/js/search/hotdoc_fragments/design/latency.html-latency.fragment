fragment_downloaded_cb({"url": "design/latency.html#latency", "fragment": "Latency \nThe latency is the time it takes for a sample captured at timestamp to reach the sink. This time is measured against the pipeline s clock. For pipelines where the only elements that synchronize against the clock are the sinks the latency is always since no other element is delaying the buffer. \nFor pipelines with live sources a latency is introduced mostly because of the way a live source works. Consider an audio source it will start capturing the first sample at time If the source pushes buffers with samples at a time at Hz it will have collected the buffer at second Since the timestamp of the buffer is and the time of the clock is now second the sink will drop this buffer because it is too late. Without any latency compensation in the sink all buffers will be dropped. \nThe situation becomes more complex in the presence of \nlive sources connected to live sinks with different latencies \nlive source connected to live sinks \nmixed live source and non live source scenarios. \nclock slaving in the sinks due to the live sources providing their own clocks. \nTo perform the needed latency corrections in the above scenarios we must develop an algorithm to calculate a global latency for the pipeline. This algorithm must be extensible so that it can optimize the latency at runtime. It must also be possible to disable or tune the algorithm based on specific application needs required minimal latency \n"});