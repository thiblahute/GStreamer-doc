fragment_downloaded_cb({"url": "design/segments.html#flushing-seek", "fragment": "FLUSHING seek \nWhen doing a seek in this pipeline for a segment to seconds avidemux will perform the seek. \nAvidemux starts by sending a FLUSH_START event downstream and upstream. This will cause its streaming task to PAUSED because _pad_pull_range and _pad_push will return FLUSHING. It then waits for the STREAM_LOCK which will be unlocked when the streaming task pauses. At this point no streaming is happening anymore in the pipeline and a FLUSH_STOP is sent upstream and downstream. \nWhen avidemux starts playback of the segment from second to it pushes out a segment with and as start and stop times. The stream_time in the segment is also as this is the position we seek to. \nThe video decoder stores these values internally and forwards them to the next downstream element videosink which also stores the values \nSince second does not contain a keyframe the avi demuxer starts sending data from the previous keyframe which is at timestamp \nThe video decoder decodes the keyframe but knows it should not push the video frame yet as it falls outside of the configured segment. \nWhen the video decoder receives the frame with timestamp it is able to decode this frame as it received and decoded the data up to the previous keyframe. It then continues to decode and push frames with timestamps When it reaches timestamp it does not decode and push frames anymore. \nThe video sink receives a frame of timestamp It takes the start value of the previous segment and applies the following simplified formula \nIt then syncs against the clock with this render_time. Note that BUFFER_TIMESTAMP is always segment_start or else it would fall outside of the configured segment. \nVideosink reports its current position as simplified \nSee synchronisation for a more detailed and accurate explanation of synchronisation and position reporting. \nSince after a flushing seek the stream_time is reset to the new buffer will be rendered immediately after the seek and the current_position will be the stream_time of the seek that was performed. \nThe stop time is important when the video format contains B frames. The video decoder receives a P frame first which it can decode but not push yet. When it receives a B frame it can decode the B frame and push the B frame followed by the previously decoded P frame. If the P frame is outside of the segment the decoder knows it should not send the P frame. \nAvidemux stops sending data after pushing a frame with timestamp and returns GST_FLOW_EOS from the chain function to make the upstream elements perform the EOS logic. \n"});