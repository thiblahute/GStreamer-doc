fragment_downloaded_cb({"url": "design/framestep.html#events", "fragment": "events \nA new GST_EVENT_STEP event is introduced to start the step operation. The step event is created with the following fields in the structure \nformat GST_TYPE_FORMAT The format of the step units \namount G_TYPE_UINT64 The amount of units to step. A amount immediately completes and can be used to cancel the current step and resume normal non stepping behaviour to the end of the segment. A amount steps until the end of the segment. \nrate G_TYPE_DOUBLE The rate at which the frames should be stepped in PLAYING mode. is the normal playback speed and direction of the segment is double speed. A speed of is not allowed. When performing a flushing step the speed is not relevant. Note that we don t allow negative rates here use a seek with a negative rate first to reverse the playback direction. \nflush G_TYPE_BOOLEAN when flushing is TRUE the step is performed immediately \nIn the PAUSED state the pipeline loses the PAUSED state the requested amount of data is skipped and the pipeline prerolls again when a non intermediate step completes. When the pipeline was stepping while the event is sent the current step operation is updated with the new amount and format. The sink will do a best effort to comply with the new amount. \nIn the PLAYING state the pipeline loses the PLAYING state the requested amount of data is skipped not rendered from the previous STEP request or from the position of the last PAUSED if no previous STEP operation was performed. The pipeline goes back to the PLAYING state when a non intermediate step completes. \nWhen flushing is FALSE the step will be performed later. \nIn the PAUSED state the step will be done when going to PLAYING. Any previous step operation will be overridden with the new STEP event. \nIn the PLAYING state the step operation will be performed after the current step operation completes. If there was no previous step operation the step operation will be performed from the position of the last PAUSED state. \nintermediate G_TYPE_BOOLEAN Signal that this step operation is an intermediate step part of a series of step operations. It is mostly interesting for stepping in the PAUSED state because the sink will only perform a preroll after a non intermediate step operation completes. Intermediate steps are useful to flush out data from other sinks in order to not cause excessive queueing. In the PLAYING state the intermediate flag has no visual effect. In all states the intermediate flag is passed to the corresponding GST_MESSAGE_STEP_DONE. \nThe application will create a STEP event to start or stop the stepping operation. Both stepping in PAUSED and PLAYING can be performed by means of the flush flag. \nThe event is usually sent to the pipeline which will typically distribute the event to all of its sinks. For some use cases like frame stepping on video frames only the event should only be sent to the video sink and upon reception of the STEP_DONE message one can step the other sinks to align the streams again. \nFor large stepping amounts there needs to be enough queueing in front of all the sinks. If large steps need to be performed they can be split up into smaller step operations using the intermediate flag on the step. \nSince the step event does not update the base_time of any of the elements the sinks should keep track of the amount of stepped data in order to remain synchronized against the clock. \n"});