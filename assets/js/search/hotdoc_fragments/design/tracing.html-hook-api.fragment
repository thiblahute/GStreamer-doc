fragment_downloaded_cb({"url": "design/tracing.html#hook-api", "fragment": "Hook api \nWe ll wrap interesting api calls with two macros e.g. gst_pad_push \nTODO ensonic gcc has some magic for wrapping functions http gcc.gnu.org onlinedocs gcc Constructing Calls.html http www.clifford.at cfun gccfeat gccfeat05.c \nTODO ensonic we should eval if we can use something like jump_label in the kernel http lwn.net Articles http lwn.net Articles http lxr.free electrons.com source kernel jump_label.c http lxr.free electrons.com source include linux jump_label.h http lxr.free electrons.com source arch x86 kernel jump_label.c TODO ensonic liblttng ust provides such a mechanism for user space but this is mostly about logging traces it is linux specific \nIn addition to api hooks we should also provide timer hooks. Interval timers are useful to get e.g. resource usage snapshots. Also absolute timers might make sense. All this could be implemented with a clock thread. We can use another env var GST_TRACE_TIMERS ms ms to configure timers and then pass them to the tracers like GST_TRACERS rusage timer ms meminfo timer ms Maybe we can create them ad hoc and avoid the GST_TRACE_TIMERS var. \nHooks already implemented \n"});