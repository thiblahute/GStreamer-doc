fragment_downloaded_cb({"url": "design/MT-refcounting.html#shared-data-structures-and-writability", "fragment": "Shared data structures and writability \nAll objects have a refcount associated with them. Each reference obtained to the object should increase the refcount and each reference lost should decrease the refcount. \nEach thread having a refcount to the object can safely read from the object. but modifications made to the object should be preceded with a _get_writable function call. This function will check the refcount of the object and if the object is referenced by more than one instance a copy is made of the object that is then by definition only referenced from the calling thread. This new copy is then modifiable without being visible to other refcount holders. \nThis technique is used for information objects that once created never change their values. The lifetime of these objects is generally short the objects are usually simple and cheap to copy create. \nThe advantage of this method is that no reader writers locks are needed. all threads can concurrently read but writes happen locally on a new copy. In most cases _get_writable can avoid a real copy because the calling method is the only one holding a reference which makes read write very cheap. \nThe drawback is that sometimes needless copy can be done. This would happen when N threads call _get_writable at the same time all seeing that N references are held on the object. In this case copy too many will be done. This is not a problem in any practical situation because the copy operation is fast. \n"});