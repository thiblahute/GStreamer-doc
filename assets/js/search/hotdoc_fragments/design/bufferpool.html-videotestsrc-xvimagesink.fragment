fragment_downloaded_cb({"url": "design/bufferpool.html#videotestsrc-xvimagesink", "fragment": "videotestsrc xvimagesink \nBefore videotestsrc can output a buffer it needs to negotiate caps and a bufferpool with the downstream peer pad. \nFirst it will negotiate a suitable format with downstream according to the normal rules. It will send a CAPS event downstream with the negotiated configuration. \nThen it does an ALLOCATION query. It will use the returned bufferpool or configures its own bufferpool with the returned parameters. The bufferpool is initially in the inactive state. \nThe ALLOCATION query lists the desired configuration of the downstream xvimagesink which can have specific alignment and or min max amount of buffers. \nvideotestsrc updates the configuration of the bufferpool it will likely set the min buffers to and the size of the desired buffers. It then updates the bufferpool configuration with the new properties. \nWhen the configuration is successfully updated videotestsrc sets the bufferpool to the active state. This preallocates the buffers in the pool if needed This operation can fail when there is not enough memory available. Since the bufferpool is provided by xvimagesink it will allocate buffers backed by an XvImage and pointing to shared memory with the X server. \nIf the bufferpool is successfully activated videotestsrc can acquire a buffer from the pool fill in the data and push it out to xvimagesink. \nxvimagesink can know that the buffer originated from its pool by following the pool member. \nwhen shutting down videotestsrc will set the pool to the inactive state this will cause further allocations to fail and currently allocated buffers to be freed. videotestsrc will then free the pool and stop streaming. \n"});