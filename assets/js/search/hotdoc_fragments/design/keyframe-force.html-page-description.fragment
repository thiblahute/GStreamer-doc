fragment_downloaded_cb({"url": "design/keyframe-force.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"keyframe-force.md\">\n<h1 id=\"forcing-keyframes\">Forcing keyframes</h1>\n<p>Consider the following use case:</p>\n<p>We have a pipeline that performs video and audio capture from a live\nsource, compresses and muxes the streams and writes the resulting data\ninto a file.</p>\n<p>Inside the uncompressed video data we have a specific pattern inserted\nat specific moments that should trigger a switch to a new file, meaning,\nwe close the existing file we are writing to and start writing to a new\nfile.</p>\n<p>We want the new file to start with a keyframe so that one can start\ndecoding the file immediately.</p>\n<h2 id=\"components\">Components</h2>\n<ol>\n<li>\n<p>We need an element that is able to detect the pattern in the video\nstream.</p>\n</li>\n<li>\n<p>We need to inform the video encoder that it should start encoding a\nkeyframe starting from exactly the frame with the pattern.</p>\n</li>\n<li>\n<p>We need to inform the demuxer that it should flush out any pending\ndata and start creating the start of a new file with the keyframe as\na first video frame.</p>\n</li>\n<li>\n<p>We need to inform the sink element that it should start writing to\nthe next file. This requires application interaction to instruct the\nsink of the new filename. The application should also be free to\nignore the boundary and continue to write to the existing file. The\napplication will typically use an event pad probe to detect the\ncustom event.</p>\n</li>\n</ol>\n<h2 id=\"implementation\">Implementation</h2>\n<h3 id=\"downstream\">Downstream</h3>\n<p>The implementation would consist of generating a <code>GST_EVENT_CUSTOM_DOWNSTREAM</code>\nevent that marks the keyframe boundary. This event is inserted into the\npipeline by the application upon a certain trigger. In the above use case\nthis trigger would be given by the element that detects the pattern, in the\nform of an element message.</p>\n<p>The custom event would travel further downstream to instruct encoder,\nmuxer and sink about the possible switch.</p>\n<p>The information passed in the event consists of:</p>\n<p><strong>GstForceKeyUnit</strong></p>\n<ul>\n<li>\n<p><strong>\"timestamp\"</strong> (<code>G_TYPE_UINT64</code>): the timestamp of the buffer that\ntriggered the event.</p>\n</li>\n<li>\n<p><strong>\"stream-time\"</strong> (<code>G_TYPE_UINT64</code>): the stream position that triggered the event.</p>\n</li>\n<li>\n<p><strong>\"running-time\"</strong> (<code>G_TYPE_UINT64</code>): the running time of the stream when\nthe event was triggered.</p>\n</li>\n<li>\n<p><strong>\"all-headers\"</strong> (<code>G_TYPE_BOOLEAN</code>): Send all headers, including\nthose in the caps or those sent at the start of the stream.</p>\n</li>\n<li>\n<p><strong>...</strong>: optional other data fields.</p>\n</li>\n</ul>\n<p>Note that this event is purely informational, no element is required to\nperform an action but it should forward the event downstream, just like\nany other event it does not handle.</p>\n<p>Elements understanding the event should behave as follows:</p>\n<ol>\n<li>\n<p>The video encoder receives the event before the next frame. Upon\nreception of the event it schedules to encode the next frame as a\nkeyframe. Before pushing out the encoded keyframe it must push the\n<code>GstForceKeyUnit</code> event downstream.</p>\n</li>\n<li>\n<p>The muxer receives the <code>GstForceKeyUnit</code> event and flushes out its\ncurrent state, preparing to produce data that can be used as a\nkeyunit. Before pushing out the new data it pushes the\n<code>GstForceKeyUnit</code> event downstream.</p>\n</li>\n<li>\n<p>The application receives the <code>GstForceKeyUnit</code> on a sink padprobe of\nthe sink and reconfigures the sink to make it perform new actions\nafter receiving the next buffer.</p>\n</li>\n</ol>\n<h3 id=\"upstream\">Upstream</h3>\n<p>When using RTP packets can get lost or receivers can be added at any\ntime, they may request a new key frame.</p>\n<p>An downstream element sends an upstream <code>GstForceKeyUnit</code> event up the\npipeline.</p>\n<p>When an element produces some kind of key unit in output, but has no\nsuch concept in its input (like an encoder that takes raw frames), it\nconsumes the event (doesn't pass it upstream), and instead sends a\ndownstream <code>GstForceKeyUnit</code> event and a new keyframe.</p>\n\n</div>\n\n\n\t"});