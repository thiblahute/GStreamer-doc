fragment_downloaded_cb({"url": "design/gstbin.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstbin.md\">\n<h1 id=\"gstbin\">GstBin</h1>\n<p><code>GstBin</code> is a container element for other <code>GstElements</code>. This makes it\npossible to group elements together so that they can be treated as one\nsingle <code>GstElement</code>. A <code>GstBin</code> provides a <code>GstBus</code> for the children and\ncollates messages from them.</p>\n<h2 id=\"addremoving-elements\">Add/removing elements</h2>\n<p>The basic functionality of a bin is to add and remove GstElements\nto/from it. <code>gst_bin_add()</code> and <code>gst_bin_remove()</code> perform these\noperations respectively.</p>\n<p>The bin maintains a parent-child relationship with its elements (see\n<a href=\"relations.html\">relations</a>).</p>\n<h2 id=\"retrieving-elements\">Retrieving elements</h2>\n<p><code>GstBin</code> provides a number of functions to retrieve one or more children\nfrom itself. A few examples of the provided functions:</p>\n<ul>\n<li><code>gst_bin_get_by_name()</code> retrieves an element by name.</li>\n<li><code>gst_bin_iterate_elements()</code> returns an iterator to all the children.</li>\n</ul>\n<h2 id=\"element-management\">element management</h2>\n<p>The most important function of the <code>GstBin</code> is to distribute all\n<code>GstElement</code> operations on itself to all of its children. This includes:</p>\n<ul>\n<li>\n<p>state changes</p>\n</li>\n<li>\n<p>index get/set</p>\n</li>\n<li>\n<p>clock get/set</p>\n</li>\n</ul>\n<p>The state change distribution is the most complex and is explained in\n<a href=\"states.html\">states</a>.</p>\n<h2 id=\"gstbus\">GstBus</h2>\n<p>The <code>GstBin</code> creates a <code>GstBus</code> for its children and distributes it when\nchild elements are added to the bin. The bin attaches a sync handler to\nreceive messages from children. The bus for receiving messages from\nchildren is distinct from the bin\u2019s own externally-visible <code>GstBus</code>.</p>\n<p>Messages received from children are forwarded intact onto the bin\u2019s\nexternal message bus, except for EOS and <code>SEGMENT_START</code>/<code>DONE</code> which are\nhandled specially.</p>\n<p><code>ASYNC_START</code>/<code>ASYNC_STOP</code> messages received from the children are used to\ntrigger a recalculation of the current state of the bin, as described in\n<a href=\"states.html\">states</a>.</p>\n<p>The application can retrieve the external <code>GstBus</code> and integrate it in the\nmainloop or it can just <code>pop()</code> messages off in its own thread.</p>\n<p>When a bin goes to READY it will clear all cached messages.</p>\n<h2 id=\"eos\">EOS</h2>\n<p>The sink elements will post an EOS message on the bus when they reach\nEOS. The EOS message is only posted to the bus when the sink element is\nin PLAYING.</p>\n<p>The bin collects all EOS messages and forwards it to the application as\nsoon as all the sinks have posted an EOS.</p>\n<p>The list of queued EOS messages is cleared when the bin goes to PAUSED\nagain. This means that all elements should repost the EOS message when\ngoing to PLAYING again.</p>\n<h2 id=\"segment_startdone\">SEGMENT_START/DONE</h2>\n<p>A bin collects <code>SEGMENT_START</code> messages but does not post them to the\napplication. It counts the number of <code>SEGMENT_START</code> messages and posts a\n<code>SEGMENT_STOP</code> message to the application when an equal number of\n<code>SEGMENT_STOP</code> messages were received.</p>\n<p>The cached <code>SEGMENT_START</code>/<code>STOP</code> messages are cleared when going to READY.</p>\n<h2 id=\"duration\">DURATION</h2>\n<p>When a DURATION query is performed on a bin, it will forward the query\nto all its sink elements. The bin will calculate the total duration as\nthe MAX of all returned durations and will then cache the result so that\nany further queries can use the cached version. The reason for caching the\nresult is because the duration of a stream typically does not change\nthat often.</p>\n<p>A <code>GST_MESSAGE_DURATION_CHANGED</code> posted by an element will clear the\ncached duration value so that the bin will query the sinks again. This\nmessage is typically posted by elements that calculate the duration of\nthe stream based on some average bitrate, which might change while\nplaying the stream. The <code>DURATION_CHANGED</code> message is posted to the\napplication, which can then fetch the updated DURATION.</p>\n<h2 id=\"subclassing\">Subclassing</h2>\n<p>Subclasses of <code>GstBin</code> are free to implement their own add/remove\nfunctions. It is a good idea to update the <code>GList</code> of children so\nthat the <code>_iterate()</code> functions can still be used if the custom bin\nallows access to its children.</p>\n<p>Any bin subclass can also implement a custom message handler by\noverriding the default one.</p>\n\n</div>\n\n\n\t"});