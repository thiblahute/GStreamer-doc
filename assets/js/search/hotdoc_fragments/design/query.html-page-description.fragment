fragment_downloaded_cb({"url": "design/query.html#page-description", "fragment": "Queries are used to get information about the stream. A query is started on a specific pad and travels up or downstream. \nmultiple return values grouped together when they make sense. \none pad function to perform the query \nextensible queries. \nGstQuery extends GstMiniObject and contains a GstStructure see GstMessage \nsome standard query types are defined below \nmethods to create and parse the results in the GstQuery. \ndefine pad method \npad returns result in query structure and TRUE as result or FALSE when query is not supported. \nGST_QUERY_POSITION get info on current position of the stream in stream_time. \nGST_QUERY_DURATION get info on the total duration of the stream. \nGST_QUERY_LATENCY get amount of latency introduced in the pipeline. See latency \nGST_QUERY_RATE get the current playback rate of the pipeline \nGST_QUERY_SEEKING get info on how seeking can be done getrange with without offset size ranges where seeking is efficient for caching network sources flags describing seeking behaviour forward backward segments play backwards \nGST_QUERY_SEGMENT get info about the currently configured playback segment. \nGST_QUERY_CONVERT convert format value to another format value pair. \nGST_QUERY_FORMATS return list of supported formats that can be used for GST_QUERY_CONVERT. \nGST_QUERY_BUFFERING query available media for efficient seeking See buffering \nGST_QUERY_CUSTOM a custom query the name of the query defines the properties of the query. \nGST_QUERY_URI query the uri of the source or sink element \nGST_QUERY_ALLOCATION the buffer allocation properties See bufferpool \nGST_QUERY_SCHEDULING the scheduling properties See scheduling \nGST_QUERY_ACCEPT_CAPS check if caps are supported See negotiation \nGST_QUERY_CAPS get the possible caps See negotiation \n"});