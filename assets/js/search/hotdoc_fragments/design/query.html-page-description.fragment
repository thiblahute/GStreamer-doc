fragment_downloaded_cb({"url": "design/query.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"query.md\">\n        <h1 id=\"query\">Query</h1>\n<h2 id=\"purpose\">Purpose</h2>\n<p>Queries are used to get information about the stream. A query is started\non a specific pad and travels up or downstream.</p>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>\n<p>multiple return values, grouped together when they make sense.</p>\n</li>\n<li>\n<p>one pad function to perform the query</p>\n</li>\n<li>\n<p>extensible queries.</p>\n</li>\n</ul>\n<h2 id=\"implementation\">Implementation</h2>\n<ul>\n<li>\n<p><code>GstQuery</code> extends <code>GstMiniObject</code> and contains a <code>GstStructure</code> (see\n<code>GstMessage</code>)</p>\n</li>\n<li>\n<p>some standard query types are defined below</p>\n</li>\n<li>\n<p>methods to create and parse the results in the <code>GstQuery</code>.</p>\n</li>\n<li>\n<p>define pad\nmethod:</p>\n</li>\n</ul>\n<pre><code class=\"language-c\">        gboolean                (*GstPadQueryFunction)          (GstPad    *pad,\n                                                                 GstObject *parent,\n                                                                 GstQuery  *query);\n</code></pre>\n<p>pad returns result in query structure and TRUE as result or FALSE when query is\nnot supported.</p>\n<h2 id=\"query-types\">Query types</h2>\n<p><strong><code>GST_QUERY_POSITION</code></strong>: get info on current position of the stream in <code>stream_time</code>.</p>\n<p><strong><code>GST_QUERY_DURATION</code></strong>: get info on the total duration of the stream.</p>\n<p><strong><code>GST_QUERY_LATENCY</code></strong>: get amount of latency introduced in the pipeline. (See <a href=\"latency.html\">latency</a>)</p>\n<p><strong><code>GST_QUERY_RATE</code></strong>: get the current playback rate of the pipeline</p>\n<p><strong><code>GST_QUERY_SEEKING</code></strong>: get info on how seeking can be done\n- getrange, with/without offset/size\n- ranges where seeking is efficient (for caching network sources)\n- flags describing seeking behaviour (forward, backward, segments,\nplay backwards, ...)</p>\n<p><strong><code>GST_QUERY_SEGMENT</code></strong>: get info about the currently configured playback segment.</p>\n<p><strong><code>GST_QUERY_CONVERT</code></strong>: convert format/value to another format/value pair.</p>\n<p><strong><code>GST_QUERY_FORMATS</code></strong>: return list of supported formats that can be used for <code>GST_QUERY_CONVERT</code>.</p>\n<p><strong><code>GST_QUERY_BUFFERING</code></strong>: query available media for efficient seeking (See <a href=\"buffering.html\">buffering</a>)</p>\n<p><strong><code>GST_QUERY_CUSTOM</code></strong>: a custom query, the name of the query defines the properties of the query.</p>\n<p><strong><code>GST_QUERY_URI</code></strong>: query the uri of the source or sink element</p>\n<p><strong><code>GST_QUERY_ALLOCATION</code></strong>: the buffer allocation properties (See <a href=\"bufferpool.html\">bufferpool</a>)</p>\n<p><strong><code>GST_QUERY_SCHEDULING</code></strong>: the scheduling properties (See <a href=\"scheduling.html\">scheduling</a>)</p>\n<p><strong><code>GST_QUERY_ACCEPT_CAPS</code></strong>: check if caps are supported (See <a href=\"negotiation.html\">negotiation</a>)</p>\n<p><strong><code>GST_QUERY_CAPS</code></strong>: get the possible caps (See <a href=\"negotiation.html\">negotiation</a>)</p>\n\n        \n\n    </div>\n\n\n        "});