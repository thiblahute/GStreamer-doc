fragment_downloaded_cb({"url": "design/scheduling.html#cases", "fragment": "Cases \nInside the braces below the pads is stated what function the pad support \nFollowing scheduling decisions are made based on the scheduling methods exposed by the pads \ng l sinkpad will pull data from src \nl c srcpad actively pushes data to sinkpad \nc srcpad will push data to sinkpad. \nnot schedulable. \nl not schedulable. \ng not schedulable. \ng c not schedulable. \nl not schedulable. \nl l not schedulable \ng impossible \ng g impossible. \nl g impossible \nc impossible \nc g impossible \nc l impossible \nc c impossible \nWhen activating the pads \naudiosink has a chain function and the peer pad has no loop function no scheduling is done. \nmp3decoder and filesrc expose an l c connection a thread is created to call the srcpad loop function. \nfakesink has a chain function and the peer pad has no loop function no scheduling is done. \navidemuxer and filesrc expose an g l connection a thread is created to call the sinkpad loop function. \nfakesink has a chain function and the peer pad has no loop function no scheduling is done. \navidemuxer and identity expose no schedulable connection so this pipeline is not schedulable. \nfakesink has a chain function and the peer pad has no loop function no scheduling is done. \navidemuxer and identity expose an g l connection a thread is created to call the sinkpad loop function. \nidentity knows the srcpad is getrange based and uses the thread from avidemux to getrange data from filesrc. \nfakesink has a chain function and the peer pad has no loop function no scheduling is done. \noggdemuxer and identity expose an l c connection oggdemux has to operate in chain mode. \nidentity chan only work chain based and so filesrc creates a thread to push data to it. \n"});