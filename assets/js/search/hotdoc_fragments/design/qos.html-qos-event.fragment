fragment_downloaded_cb({"url": "design/qos.html#qos-event", "fragment": "QoS event \nThe QoS event is generated by an element that synchronizes against the clock. It travels upstream and contains the following fields \ntype GST_TYPE_QOS_TYPE The type of the QoS event we have the following types and the default type is GST_QOS_TYPE_UNDERFLOW \nGST_QOS_TYPE_OVERFLOW an element is receiving buffers too fast and can t keep up processing them. Upstream should reduce the rate. \nGST_QOS_TYPE_UNDERFLOW an element is receiving buffers too slowly and has to drop them because they are too late. Upstream should increase the processing rate. \nGST_QOS_TYPE_THROTTLE the application is asking to add extra delay between buffers upstream is allowed to drop buffers \ntimestamp G_TYPE_UINT64 The timestamp on the buffer that generated the QoS event. These timestamps are expressed in total running_time in the sink so that the value is ever increasing. \njitter G_TYPE_INT64 The difference of that timestamp against the current clock time. Negative values mean the timestamp was on time. Positive values indicate the timestamp was late by that amount. When buffers are received in time and throttling is not enabled the QoS type field is set to OVERFLOW. When throttling the jitter contains the throttling delay added by the application and the type is set to THROTTLE. \nproportion G_TYPE_DOUBLE Long term prediction of the ideal rate relative to normal rate to get optimal quality. \nThe rest of this document deals with how these values can be calculated in a sink and how the values can be used by other elements to adjust their operations. \n"});