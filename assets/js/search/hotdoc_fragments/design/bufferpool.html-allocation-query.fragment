fragment_downloaded_cb({"url": "design/bufferpool.html#allocation-query", "fragment": "Allocation query \nThe allocation query has the following fields \nin caps GST_TYPE_CAPS the caps that was negotiated \nin need pool G_TYPE_BOOLEAN if a GstBufferPool is requested \nout pool G_TYPE_ARRAY of structure an array of pool configurations \nUse gst_query_parse_nth_allocation_pool to get the values. \nThe allocator can contain multiple pool configurations. If need pool was TRUE the pool member might contain a GstBufferPool when the downstream element can provide one. \nSize contains the size of the bufferpool s buffers and is never \nmin_buffers and max_buffers contain the suggested min and max amount of buffers that should be managed by the pool. \nThe upstream element can choose to use the provided pool or make its own pool when none was provided or when the suggested pool was not acceptable. \nThe pool can then be configured with the suggested min and max amount of buffers or a downstream element might choose different values. \nUse gst_query_parse_nth_allocation_param to get the values. \nThe element performing the query can use the allocators and its parameters to allocate memory for the downstream element. \nIt is also possible to configure the allocator in a provided pool. \nUse gst_query_parse_nth_allocation_meta to get the values. \nThese metadata items can be accepted by the downstream element when placed on buffers. There is also an arbitrary GstStructure associated with the metadata that contains metadata specific options. \nSome bufferpools have options to enable metadata on the buffers allocated by the pool. \n"});