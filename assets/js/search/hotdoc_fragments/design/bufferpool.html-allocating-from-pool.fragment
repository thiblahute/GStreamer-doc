fragment_downloaded_cb({"url": "design/bufferpool.html#allocating-from-pool", "fragment": "Allocating from pool \nBuffers are allocated from the pool of a pad \nA GstBuffer that is allocated from the pool will always be writable have a refcount of and it will also have its pool member point to the GstBufferPool that created the buffer. \nBuffers are refcounted in the usual way. When the refcount of the buffer reaches the buffer is automatically returned to the pool. \nSince all the buffers allocated from the pool keep a reference to the pool when nothing else is holding a refcount to the pool it will be finalized when all the buffers from the pool are unreffed. By setting the pool to the inactive state we can drain all buffers from the pool. \nWhen the pool is in the inactive state gst_buffer_pool_acquire_buffer will return GST_FLOW_FLUSHING immediately. \nExtra parameters can be given to the gst_buffer_pool_acquire_buffer method to influence the allocation decision. GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT and GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT serve as hints. \nWhen the bufferpool is configured with a maximum number of buffers allocation will block when all buffers are outstanding until a buffer is returned to the pool. This behaviour can be changed by specifying the GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT flag in the parameters. With this flag set allocation will return GST_FLOW_EOS when the pool is empty. \n"});