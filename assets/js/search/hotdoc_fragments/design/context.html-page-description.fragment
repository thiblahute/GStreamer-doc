fragment_downloaded_cb({"url": "design/context.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"context.md\">\n<h1 id=\"context\">Context</h1>\n<p><code>GstContext</code> is a container object, containing a type string and a generic\n<code>GstStructure</code>. It is used to store and propagate context information in a\npipeline, like device handles, display server connections and other\ninformation that should be shared between multiple elements in a\npipeline.</p>\n<p>For sharing context objects and distributing them between application\nand elements in a pipeline, there are downstream queries, upstream\nqueries, messages and functions to set a context on a complete pipeline.</p>\n<h2 id=\"context-types\">Context types</h2>\n<p>Context type names should be unique and be put in appropriate\nnamespaces, to prevent name conflicts, e.g. \"gst.egl.EGLDisplay\". Only\none specific type is allowed per context type name.</p>\n<h2 id=\"elements\">Elements</h2>\n<p>Elements that need a specific context for their operation would do the\nfollowing steps until one succeeds:</p>\n<ol>\n<li>\n<p>Check if the element already has a context of the specific type,\ni.e. it was previously set via <code>gst_element_set_context()</code>.</p>\n</li>\n<li>\n<p>Query downstream with <code>GST_QUERY_CONTEXT</code> for the context and check if\ndownstream already has a context of the specific type</p>\n</li>\n<li>\n<p>Query upstream with <code>GST_QUERY_CONTEXT</code> for the context and check if\nupstream already has a context of the specific type</p>\n</li>\n<li>\n<p>Post a <code>GST_MESSAGE_NEED_CONTEXT</code> message on the bus with the required\ncontext types and afterwards check if a usable context was set now\nas in 1). The message could be handled by the parent bins of the\nelement and the application.</p>\n</li>\n<li>\n<p>Create a context by itself and post a <code>GST_MESSAGE_HAVE_CONTEXT</code> message\non the bus.</p>\n</li>\n</ol>\n<p>Bins will propagate any context that is set on them to their child\nelements via <code>gst_element_set_context()</code>. Even to elements added after\na given context has been set.</p>\n<p>Bins can handle the <code>GST_MESSAGE_NEED_CONTEXT</code> message, can filter both\nmessages and can also set different contexts for different pipeline\nparts.</p>\n<h2 id=\"applications\">Applications</h2>\n<p>Applications can set a specific context on a pipeline or elements inside\na pipeline with <code>gst_element_set_context()</code>.</p>\n<p>If an element inside the pipeline needs a specific context, it will post\na <code>GST_MESSAGE_NEED_CONTEXT</code> message on the bus. The application can\nnow create a context of the requested type or pass an already existing\ncontext to the element (or to the complete pipeline).</p>\n<p>Whenever an element creates a context internally it will post a\n<code>GST_MESSAGE_HAVE_CONTEXT</code> message on the bus. Bins will cache these\ncontexts and pass them to any future element that requests them.</p>\n\n</div>\n\n\n\t"});