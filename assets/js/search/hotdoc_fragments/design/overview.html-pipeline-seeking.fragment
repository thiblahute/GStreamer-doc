fragment_downloaded_cb({"url": "design/overview.html#pipeline-seeking", "fragment": "Pipeline seeking \nSeeking in the pipeline requires a very specific order of operations to make sure that the elements remain synchronized and that the seek is performed with a minimal amount of latency. \nAn application issues a seek event on the pipeline using gst_element_send_event on the pipeline element. The event can be a seek event in any of the formats supported by the elements. \nThe pipeline first pauses the pipeline to speed up the seek operations. \nThe pipeline then issues the seek event to all sink elements. The sink then forwards the seek event upstream until some element can perform the seek operation which is typically the source or demuxer element. All intermediate elements can transform the requested seek offset to another format this way a decoder element can transform a seek to a frame number to a timestamp for example. \nWhen the seek event reaches an element that will perform the seek operation that element performs the following steps. \nIn step all downstream elements have to return from any blocking operations and have to refuse any further buffers or events different from a FLUSH done. \nThe first step ensures that the streaming thread eventually unblocks and that step can be performed. At this point dataflow is completely stopped in the pipeline. \nIn step the element performs the seek to the requested position. \nIn step all peer elements are allowed to accept data again and streaming can continue from the new position. A FLUSH done event is sent to all the peer elements so that they accept new data again and restart their streaming threads. \nStep informs all elements of the new position in the stream. After that the event function returns back to the application. and the streaming threads start to produce new data. \nSince the pipeline is still PAUSED this will preroll the next media sample in the sinks. The application can wait for this preroll to complete by performing a _get_state on the pipeline. \nThe last step in the seek operation is then to adjust the stream running_time of the pipeline to and to set the pipeline back to PLAYING. \nThe sequence of events in our mp3 playback example. \n"});