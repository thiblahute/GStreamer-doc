fragment_downloaded_cb({"url": "design/gstelement.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"gstelement.md\">\n<h1 id=\"gstelement\">GstElement</h1>\n<p>The Element is the most important object in the entire GStreamer system,\nas it defines the structure of the pipeline. Elements include sources,\nfilters, sinks, and containers (Bins). They may be an intrinsic part of\nthe core GStreamer library, or may be loaded from a plugin. In some\ncases they\u2019re even fabricated from completely different systems (see the\nLADSPA plugin). They are generally created from a <code>GstElementFactory</code>,\nwhich will be covered in another chapter, but for the intrinsic types\nthey can be created with specific functions.</p>\n<p>Elements contains <code>GstPads</code> (also covered in another chapter), which are\nsubsequently used to connect the Elements together to form a pipeline\ncapable of passing and processing data. They have a parent, which must\nbe another Element. This allows deeply nested pipelines, and the\npossibility of \"black-box\" meta-elements.</p>\n<h2 id=\"name\">Name</h2>\n<p>All elements are named, and while they should ideally be unique in any\ngiven pipeline, they do not have to be. The only guaranteed unique name\nfor an element is its complete path in the object hierarchy. In other\nwords, an element\u2019s name is unique inside its parent. (This follows from\nGstObject\u2019s name explanation)</p>\n<p>This uniqueness is guaranteed through all functions where either\nparentage or name of an element is changed.</p>\n<h2 id=\"pads\">Pads</h2>\n<p><code>GstPads</code> are the property of a given <code>GstElement</code>. They provide the\nconnection capability, with allowing arbitrary structure in the graph.\nFor any Element but a source or sink, there will be at least 2 Pads\nowned by the Element. These pads are stored in a single <code>GList</code> within the\nElement. Several counters are kept in order to allow quicker\ndetermination of the type and properties of a given Element.</p>\n<p>Pads may be added to an element with <code>_add_pad()</code>. Retrieval is done via\n<code>_get_static_pad()</code>, which operates on the name of the Pad (the unique\nkey). This means that all Pads owned by a given Element must have unique\nnames. A pointer to the <code>GList</code> of pads may be obtained with\n<code>_iterate_pads()</code>.</p>\n<p><code>gst_element_add_pad(element,pads)</code>: Sets the element as the parent of\nthe pad, then adds the pad to the element\u2019s list of pads, keeping the\ncounts of total, src, and sink pads up to date. Emits the <code>new_pad</code>\nsignal with the pad as argument. Fails if either the element or pad are\nNULL or not what they claim to be. Should fail if the pad already\nhas a parent. Should fail if the pad is already owned by the element.\nShould fail if there\u2019s already a pad by that name in the list of pads.</p>\n<p><code>pad = gst_element_get_pad(element, \"padname\")</code>: Searches through the\nlist of pads</p>\n<h2 id=\"ghost-pads\">Ghost Pads</h2>\n<p>More info in <a href=\"gstghostpad.html\">ghostpad</a>.</p>\n<h2 id=\"state\">State</h2>\n<p>An element has a state. More info in <a href=\"states.html\">state</a>.</p>\n\n</div>\n\n\n\t"});