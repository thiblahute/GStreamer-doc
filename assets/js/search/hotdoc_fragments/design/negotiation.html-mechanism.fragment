fragment_downloaded_cb({"url": "design/negotiation.html#mechanism", "fragment": "Mechanism \nThe sink determines that the upstream elements support pull based scheduling by doing a SCHEDULING query. \nThe sink initiates the negotiation process by intersecting the results of gst_pad_query_caps on its sink pad and its peer src pad. This is the operation performed by gst_pad_get_allowed_caps In the simple passthrough case the peer pad s caps query should return the intersection of calling get_allowed_caps on all of its sink pads. In this way the sink element knows the capabilities of the entire pipeline. \nThe sink element then fixates the resulting caps if necessary resulting in the flow caps. From now on the caps query of the sinkpad will only return these fixed caps meaning that upstream elements will only be able to produce this format. \nIf the sink element could not set caps on its sink pad it should post an error message on the bus indicating that negotiation was not possible. \nWhen negotiation succeeded the sinkpad and all upstream internally linked pads are activated in pull mode. Typically this operation will trigger negotiation on the downstream elements which will now be forced to negotiate to the final fixed desired caps of the sinkpad. \nAfter these steps the sink element returns ASYNC from the state change function. The state will commit to PAUSED when the first buffer is received in the sink. This is needed to provide a consistent API to the applications that expect ASYNC return values from sinks but it also allows us to perform the remainder of the negotiation outside of the context of the pulling thread. \n"});