fragment_downloaded_cb({"url": "design/toc.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"toc.md\">\n<h1 id=\"implementing-gsttoc-support-in-gstreamer-elements\">Implementing GstToc support in GStreamer elements</h1>\n<h2 id=\"general-info-about-gsttoc-structure\">General info about GstToc structure</h2>\n<p><code>GstToc</code> introduces a general way to handle chapters within multimedia\nformats. <code>GstToc</code> can be represented as tree structure with arbitrary\nhierarchy. Tree item can be either of two types: sequence or\nalternative. Sequence types acts like a part of the media data, for\nexample audio track in CUE sheet, or part of the movie. Alternative\ntypes acts like some kind of selection to process a different version of\nthe media content, for example DVD angles. <code>GstToc</code> has one constraint on\nthe tree structure: it does not allow different entry types on the same\nlevel of the hierarchy, i.e. you shouldn\u2019t have editions and chapters\nmixed together. Here is an example of right TOC:</p>\n<pre><code>-------  TOC  -------\n         /  \\\n edition1    edition2\n |           |\n -chapter1   -chapter3\n -chapter2\n</code></pre>\n<p>Here are two editions (alternatives), the first contains two chapters\n(sequence type), and the second has only one chapter. And here is an\nexample of invalid TOC:</p>\n<pre><code>-------  TOC  -------\n         /  \\\n edition1    chapter1\n |\n -chapter1\n -chapter2\n</code></pre>\n<p>Here you have edition1 and chapter1 mixed on the same level of\nhierarchy, and such TOC will be considered broken.</p>\n<p><code>GstToc</code> has <em>entries</em> field of GList type which consists of children\nitems. Each item is of type <code>GstTocEntry</code>. Also <code>GstToc</code> has list of tags\nand <code>GstStructure</code> called <em>info</em>. Please, use <code>GstToc.info</code> and\n<code>GstTocEntry.info</code> fields this way: create a <code>GstStructure</code>, put all info\nrelated to your element there and put this structure into the <em>info</em>\nfield under the name of your element. Some fields in the <em>info</em>\nstructure can be used for internal purposes, so you should use it in the\nway described above to not to overwrite already existent fields.</p>\n<p>Let\u2019s look at <code>GstTocEntry</code> a bit closer. One of the most important fields\nis <em>uid</em>, which must be unique for each item within the TOC. This is\nused to identify each item inside TOC, especially when element receives\nTOC select event with UID to seek on. Field <em>subentries</em> of type GList\ncontains children items of type <code>GstTocEntry</code>. Thus you can achieve\narbitrary hierarchy level. Field <em>type</em> can be either\n<code>GST_TOC_ENTRY_TYPE_CHAPTER</code> or <code>GST_TOC_ENTRY_TYPE_EDITION</code> which\ncorresponds to chapter or edition type of item respectively. Field\n<em>tags</em> is a list of tags related to the item. And field <em>info</em> is\nsimilar to <code>GstToc.info</code> described above.</p>\n<p>So, a little more about managing <code>GstToc</code>. Use <code>gst_toc_new()</code> and\n<code>gst_toc_unref()</code> to create/free it. <code>GstTocEntry</code> can be created using\n<code>gst_toc_entry_new()</code>. While building <code>GstToc</code> you can set start and stop\ntimestamps for each item using <code>gst_toc_entry_set_start_stop()</code> and\n<code>loop_type</code> and <code>repeat_count</code> using <code>gst_toc_entry_set_loop()</code>. The\nbest way to process already created <code>GstToc</code> is to recursively go through\nthe <em>entries</em> and <em>subentries</em> fields.</p>\n<p>Applications and plugins should not rely on TOCs having a certain kind\nof structure, but should allow for different alternatives. For example,\na simple CUE sheet embedded in a file may be presented as a flat list of\ntrack entries, or could have a top-level edition node (or some other\nalternative type entry) with track entries underneath that node; or even\nmultiple top-level edition nodes (or some other alternative type\nentries) each with track entries underneath, in case the source file has\nextracted a track listing from different sources).</p>\n<h2 id=\"toc-scope-global-and-current\">TOC scope: global and current</h2>\n<p>There are two main consumers for TOC information: applications and\nelements in the pipeline that are TOC writers (such as e.g.\nmatroskamux).</p>\n<p>Applications typically want to know the entire table of contents (TOC)\nwith all entries that can possibly be selected.</p>\n<p>TOC writers in the pipeline, however, would not want to write a TOC for\nall possible/available streams, but only for the current stream.</p>\n<p>When transcoding a title from a DVD, for example, the application would\nstill want to know the entire TOC, with all titles, the chapters for\neach title, and the available angles. When transcoding to a file, we\nonly want the TOC information that is relevant to the transcoded stream\nto be written into the file structure, e.g. the chapters of the title\nbeing transcoded (or possibly only chapters 5-7 if only those have been\nselected for playback/ transcoding).</p>\n<p>This is why we may need to create two different TOCs for those two types\nof consumers.</p>\n<p>Elements that extract TOC information should send TOC events downstream.</p>\n<p>Like with tags, sinks will post a TOC message on the bus for the\napplication with the global TOC, once a global TOC event reaches the\nsink.</p>\n<h2 id=\"working-with-gstmessage\">Working with GstMessage</h2>\n<p>If a table of contents is available, applications will receive a TOC\nmessage on the pipeline\u2019s <code>GstBus</code>.</p>\n<p>A TOC message will be posted on the bus by sinks when the receive a TOC\nevent containing a TOC with global scope. Elements extracting TOCs\nshould not post a TOC message themselves, but send a TOC event\ndownstream.</p>\n<p>The reason for this is that there may be cascades of TOCs (e.g. a zip\narchive containing multiple matroska files, each with a TOC).</p>\n<p><code>GstMessage</code> with <code>GstToc</code> can be created using <code>gst_message_new_toc()</code> and\nparsed with <code>gst_message_parse_toc()</code>. The <em>updated</em> parameter in these\nmethods indicates whether the TOC was just discovered (set to false) or\nTOC was already found and have been updated (set to true). This message\nwill typically be posted by sinks to pipeline in case you have\ndiscovered TOC data within your element.</p>\n<h2 id=\"working-with-gstevent\">Working with GstEvent</h2>\n<p>There are two types of TOC-related events:</p>\n<ul>\n<li>\n<p>downstream TOC events that contain TOC information and travel\ndownstream</p>\n</li>\n<li>\n<p>toc-select events that travel upstream and can be used to select a\ncertain TOC entry for playback (similar to seek events)</p>\n</li>\n</ul>\n<p><code>GstToc</code> supports select event through <code>GstEvent</code> infrastructure. The idea\nis the following: when you receive TOC select event, parse it with\n<code>gst_event_parse_toc_select()</code> and seek stream (if it is not\nstreamable) for specified TOC UID (you can use <code>gst_toc_find_entry()</code>\nto find entry in TOC by UID). To create TOC select event use\n<code>gst_event_new_toc_select()</code>. The common action on such event is to\nseek to specified UID within your element.</p>\n<h2 id=\"implementation-coverage-specifications-\">Implementation coverage, Specifications, \u2026</h2>\n<p>Below is a list of container formats, links to documentation and a\nsummary of toc related features. Each section title also indicates\nwhether reading/writing a toc is implemented. Below hollow bullet point\n<em>o</em> indicate no support and filled bullets *** indicate that this\nfeature is handled.</p>\n<h3 id=\"aifc-\">AIFC: -/-</h3>\n<p><a href=\"http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf\">http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/Docs/AIFF-1.3.pdf</a>\no <em>MARK</em> o <em>INST</em></p>\n<p>The <em>MARK</em> chunk defines a list of (cue-id, <code>position_in_samples</code>,\nlabel).</p>\n<p>The <em>INST</em> chunk contains a sustainLoop and releaseLoop, each consisting\nof (loop-type, cue-begin, cue-end)</p>\n<h3 id=\"flac-readwrite\">FLAC: read/write</h3>\n<p><a href=\"http://xiph.org/flac/format.html#metadata_block_cuesheet\">http://xiph.org/flac/format.html#metadata_block_cuesheet</a> *\nMETADATA_BLOCK_CUESHEET * CUESHEET_TRACK o CUESHEET_TRACK_INDEX</p>\n<p>Both <code>CUESHEET_TRACK</code> and <code>CUESHEET_TRACK_INDEX</code> have a (relative) offset\nin samples. <code>CUESHEET_TRACK</code> has ISRC metadata.</p>\n<h3 id=\"mkv-readwrite\">MKV: read/write</h3>\n<p><a href=\"http://matroska.org/technical/specs/chapters/index.html\">http://matroska.org/technical/specs/chapters/index.html</a> * Chapters\nand Editions each having a uid * Chapter have start/end time and\nmetadata: ChapString, ChapLanguage, ChapCountry</p>\n<h3 id=\"mp4-elst\">MP4: * elst</h3>\n<p>The <em>elst</em> atom contains a list of edits. Each edit consists of (length,\nstart, play-back speed).</p>\n<h3 id=\"ogg-httpswikixiphorgchapter_extension-o-vorbiscomment\">OGG: -/- <a href=\"https://wiki.xiph.org/Chapter_Extension\">https://wiki.xiph.org/Chapter_Extension</a> o VorbisComment</h3>\n<p>fields called CHAPTERxxx and CHAPTERxxxNAME with xxx being a number\nbetween 000 and 999.</p>\n<h3 id=\"wav-readwrite-httpwwwsonicspotcomguidewavefileshtml-cue\">WAV: read/write <a href=\"http://www.sonicspot.com/guide/wavefiles.html\">http://www.sonicspot.com/guide/wavefiles.html</a> * *cue</h3>\n<p>' o 'plst* * <em>adtl</em> * <em>labl</em> * <em>note</em> o <em>ltxt</em> o <em>smpl</em></p>\n<p>The <em>cue ' chunk defines a list of markers in the stream with 'cue-id\u2019s.\nThe 'smpl</em> chunk defines a list of regions in the stream with 'cue-id\u2019s\nin the same namespace (?).</p>\n<p>The various <em>adtl</em> chunks: <em>labl</em>, <em>note</em> and <em>ltxt</em> refer to the\n'cue-id\u2019s.</p>\n<p>A <em>plst</em> chunk defines a sequence of segments (cue-id, length_samples,\nrepeats). The <em>smpl</em> chunk defines a list of loops (cue-id, beg, end,\nloop-type, repeats).</p>\n<h2 id=\"conclusionideasfuture-work\">Conclusion/Ideas/Future work</h2>\n<p>Based on the data of chapter 5, a few thoughts and observations that can\nbe used to extend and refine our API. These things below are not\nreflecting the current implementation.</p>\n<p>All formats have table of [cue-id, cue-start, (cue-end), (extra tags)]</p>\n<ul>\n<li>cue-id is commonly represented as and unsigned int 32bit - cue-end is\noptional - extra tags could be represented as a structure/taglist</li>\n</ul>\n<p>Many formats have metadata that references the cue-table. - loops in\ninstruments in wav, aifc - edit lists in wav, mp4</p>\n<p>For mp4.edtl, wav.plst we could expose two editions. 1) the edit list is\nflattened: default, for playback 2) the stream has the raw data and the\nedit list is there as chapter markers: useful for editing software</p>\n<p>We might want to introduce a new <code>GST_TOC_ENTRY_TYPE_MARKER</code> or <code>_CUE</code>.\nThis would be a sequence entry-type and it would not be used for\nnavigational purposes, but to attach data to a point in time (envelopes,\nloops, \u2026).</p>\n<p>API wise there is some overlap between: - exposing multiple audio/video\ntracks as pads or as ToC editions. For ToC editions, we have the\nTocSelect event. - exposing subtitles as a sparse stream or as as ToC\nsequence of markers with labels</p>\n\n</div>\n\n\n\t"});