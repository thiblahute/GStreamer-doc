fragment_downloaded_cb({"url": "design/toc.html#page-description", "fragment": "Implementing GstToc support in GStreamer elements \nGeneral info about GstToc structure \nImplementation coverage Specifications \nOGG https wiki.xiph.org Chapter_Extension o VorbisComment \nWAV read write http www.sonicspot.com guide wavefiles.html cue \nGstToc introduces a general way to handle chapters within multimedia formats. GstToc can be represented as tree structure with arbitrary hierarchy. Tree item can be either of two types sequence or alternative. Sequence types acts like a part of the media data for example audio track in CUE sheet or part of the movie. Alternative types acts like some kind of selection to process a different version of the media content for example DVD angles. GstToc has one constraint on the tree structure it does not allow different entry types on the same level of the hierarchy i.e. you shouldn t have editions and chapters mixed together. Here is an example of right TOC \nHere are two editions alternatives the first contains two chapters sequence type and the second has only one chapter. And here is an example of invalid TOC \nHere you have edition1 and chapter1 mixed on the same level of hierarchy and such TOC will be considered broken. \nGstToc has entries field of GList type which consists of children items. Each item is of type GstTocEntry. Also GstToc has list of tags and GstStructure called info. Please use GstToc.info and GstTocEntry.info fields this way create a GstStructure put all info related to your element there and put this structure into the info field under the name of your element. Some fields in the info structure can be used for internal purposes so you should use it in the way described above to not to overwrite already existent fields. \nLet s look at GstTocEntry a bit closer. One of the most important fields is uid which must be unique for each item within the TOC. This is used to identify each item inside TOC especially when element receives TOC select event with UID to seek on. Field subentries of type GList contains children items of type GstTocEntry. Thus you can achieve arbitrary hierarchy level. Field type can be either GST_TOC_ENTRY_TYPE_CHAPTER or GST_TOC_ENTRY_TYPE_EDITION which corresponds to chapter or edition type of item respectively. Field tags is a list of tags related to the item. And field info is similar to GstToc.info described above. \nSo a little more about managing GstToc. Use gst_toc_new and gst_toc_unref to create free it. GstTocEntry can be created using gst_toc_entry_new While building GstToc you can set start and stop timestamps for each item using gst_toc_entry_set_start_stop and loop_type and repeat_count using gst_toc_entry_set_loop The best way to process already created GstToc is to recursively go through the entries and subentries fields. \nApplications and plugins should not rely on TOCs having a certain kind of structure but should allow for different alternatives. For example a simple CUE sheet embedded in a file may be presented as a flat list of track entries or could have a top level edition node or some other alternative type entry with track entries underneath that node or even multiple top level edition nodes or some other alternative type entries each with track entries underneath in case the source file has extracted a track listing from different sources \nBelow is a list of container formats links to documentation and a summary of toc related features. Each section title also indicates whether reading writing a toc is implemented. Below hollow bullet point o indicate no support and filled bullets indicate that this feature is handled. \nfields called CHAPTERxxx and CHAPTERxxxNAME with xxx being a number between and \no plst adtl labl note o ltxt o smpl \nThe cue chunk defines a list of markers in the stream with cue id s. The smpl chunk defines a list of regions in the stream with cue id s in the same namespace \nThe various adtl chunks labl note and ltxt refer to the cue id s. \nA plst chunk defines a sequence of segments cue id length_samples repeats The smpl chunk defines a list of loops cue id beg end loop type repeats \n"});