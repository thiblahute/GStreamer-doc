fragment_downloaded_cb({"url": "design/progress.html#implementation", "fragment": "Implementation \nElements should not do blocking operations from the state change function. Instead elements should post an appropriate progress message with the right code and of type GST_PROGRESS_TYPE_START and then start a thread to perform the blocking calls in a cancellable manner. \nIt is highly recommended to only start async operations from the READY to PAUSED state and onwards and not from the NULL to READY state. The reason for this is that streaming threads are usually started in the READY to PAUSED state and that the current NULL to READY state change is used to perform a blocking check for the presence of devices. \nThe progress message needs to be posted from the state change function so that the application can immediately take appropriate action after setting the state. \nThe threads will usually perform many blocking calls with different codes in a row a client might first do a DNS query and then continue with establishing a connection to the server. For this purpose the GST_PROGRESS_TYPE_CONTINUE must be used. \nUsually the thread used to perform the blocking operations can be used to implement the streaming threads when needed. \nUpon downward state changes operations that are busy in the thread are canceled and GST_PROGRESS_TYPE_CANCELED is posted. \nThe application can know about pending tasks because they received the GST_PROGRESS_TYPE_START messages that didn t complete with a GST_PROGRESS_TYPE_COMPLETE message got canceled with a GST_PROGRESS_TYPE_CANCELED or errored with GST_PROGRESS_TYPE_ERROR. Applications should be able to choose if they wait for the pending operation or cancel them. \nIf an async operation fails an error message is posted first before the GST_PROGRESS_TYPE_ERROR progress message. \n"});