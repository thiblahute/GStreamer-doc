fragment_downloaded_cb({"url": "design/overview.html#elements", "fragment": "Elements \nThe smallest building blocks in a pipeline are elements. An element provides a number of pads which can be source or sinkpads. Sourcepads provide data and sinkpads consume data. Below is an example of an ogg demuxer element that has one pad that takes sinks data and two source pads that produce data. \nAn element can be in four different states NULL READY PAUSED PLAYING. In the NULL and READY state the element is not processing any data. In the PLAYING state it is processing data. The intermediate PAUSED state is used to preroll data in the pipeline. A state change can be performed with gst_element_set_state \nAn element always goes through all the intermediate state changes. This means that when en element is in the READY state and is put to PLAYING it will first go through the intermediate PAUSED state. \nAn element state change to PAUSED will activate the pads of the element. First the source pads are activated then the sinkpads. When the pads are activated the pad activate function is called. Some pads will start a thread GstTask or some other mechanism to start producing or consuming data. \nThe PAUSED state is special as it is used to preroll data in the pipeline. The purpose is to fill all connected elements in the pipeline with data so that the subsequent PLAYING state change happens very quickly. Some elements will therefore not complete the state change to PAUSED before they have received enough data. Sink elements are required to only complete the state change to PAUSED after receiving the first data. \nNormally the state changes of elements are coordinated by the pipeline as explained in states. \nDifferent categories of elements exist \nsource elements these are elements that do not consume data but only provide data for the pipeline. \nsink elements these are elements that do not produce data but renders data to an output device. \ntransform elements these elements transform an input stream in a certain format into a stream of another format. Encoder decoder converters are examples. \ndemuxer elements these elements parse a stream and produce several output streams. \nmixer muxer elements combine several input streams into one output stream. \nOther categories of elements can be constructed see klass \n"});