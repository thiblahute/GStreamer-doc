fragment_downloaded_cb({"url": "design/buffer.html#data-access", "fragment": "Data access \nAccessing the data of the buffer can happen by retrieving the individual GstMemory objects in the GstBuffer or by using the gst_buffer_map and gst_buffer_unmap functions. \nThe _map and _unmap functions will always return the memory of all blocks as one large contiguous region. Using these functions might be more convenient than accessing the individual memory blocks at the expense of being more expensive because it might perform memcpy operations. \nFor buffers with only one GstMemory object the most common case _map and _unmap have no performance penalty at all. \nRead access with memory block The memory block is accessed and mapped for read access. The memory block is unmapped after usage \nwrite access with memory block The buffer should be writable or this operation will fail. The memory block is accessed. If the memory block is readonly a copy is made and the original memory block is replaced with this copy. Then the memory block is mapped in write mode and unmapped after usage. \nRead access with multiple memory blocks The memory blocks are combined into one large memory block. If the buffer is writable the memory blocks are replaced with this new combined block. If the buffer is not writable the memory is returned as is. The memory block is then mapped in read mode. When the memory is unmapped after usage and the buffer has multiple memory blocks this means that the map operation was not able to store the combined buffer and it thus returned memory that should be freed. Otherwise the memory is unmapped. \nWrite access with multiple memory blocks The buffer should be writable or the operation fails. The memory blocks are combined into one large memory block and the existing blocks are replaced with this new block. The memory is then mapped in write mode and unmapped after usage. \n"});