fragment_downloaded_cb({"url": "design/MT-refcounting.html#property-lifetime", "fragment": "Property lifetime \nAll properties requiring a lock can change after releasing the associated lock. This means that as long as you hold the lock the state of the object regarding the locked properties is consistent with the information obtained. As soon as the lock is released any values acquired from the properties might not be valid anymore and can as best be described as a snapshot of the state when the lock was held. \nThis means that all properties that require access beyond the scope of the critial section should be copied or refcounted before releasing the lock. \nMost object provide a _get_ property method to get a copy or refcounted instance of the property value. The caller should not wory about any locks but should unref free the object after usage. \nExample \nthe following example correctly gets the peer pad of an element. It is required to increase the refcount of the peer pad because as soon as the lock is released the peer could be unreffed and disposed making the pointer obtained in the critical section point to invalid memory. \nNote that after releasing the lock the peer might not actually be the peer anymore of the pad. If you need to be sure it is you need to extend the critical section to include the operations on the peer. \nThe following code is equivalent to the above but with using the functions to access object properties. \nExample \nAccessing the name of an object makes a copy of the name. The caller of the function should g_free the name after usage. \nor \n"});