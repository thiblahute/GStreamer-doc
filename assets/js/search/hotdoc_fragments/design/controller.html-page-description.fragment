fragment_downloaded_cb({"url": "design/controller.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"controller.md\">\n<h1 id=\"controller\">Controller</h1>\n<p>The controller subsystem allows to automate element property changes. It\nworks so that all parameter changes are time based and elements request\nproperty updates at processing time.</p>\n<h2 id=\"element-view\">Element view</h2>\n<p>Elements don\u2019t need to do much. They need to: - mark object properties\nthat can be changed while processing with <code>GST_PARAM_CONTROLLABLE</code> -\ncall <code>gst_object_sync_values (self, timestamp)</code> in the processing\nfunction before accessing the parameters.</p>\n<p>All ordered property types can be automated (int, double, boolean,\nenum). Other property types can also be automated by using special\ncontrol bindings. One can e.g. write a control-binding that updates a\ntext property based on timestamps.</p>\n<h2 id=\"application-view\">Application view</h2>\n<p>Applications need to setup the property automation. For that they need\nto create a <code>GstControlSource</code> and attach it to a property using\n<code>GstControlBinding</code>. Various control-sources and control-bindings exist.\nAll control sources produce control value sequences in the form of\ngdouble values. The control bindings map them to the value range and\ntype of the bound property.</p>\n<p>One control-source can be attached to one or more properties at the same\ntime. If it is attached multiple times, then each control-binding will\nscale and convert the control values to the target property type and\nrange.</p>\n<p>One can create complex control-curves by using a\n<code>GstInterpolationControlSource</code>. This allows the classic user editable\ncontrol-curve (often seen in audio/video editors). Another way is to use\ncomputed control curves. <code>GstLFOControlSource</code> can generate various\nrepetitive signals. Those can be made more complex by chaining the\ncontrol sources. One can attach another control-source to e.g. modulate\nthe frequency of the first <code>GstLFOControlSource</code>.</p>\n<p>In most cases <code>GstDirectControlBinding</code> will be the binding to be used.\nOther control bindings are there to handle special cases, such as having\n1-4 control- sources and combine their values into a single guint to\ncontrol a rgba-color property.</p>\n<h2 id=\"todo\">TODO</h2>\n<ul>\n<li>\n<p>control-source value ranges - control sources should ideally emit values\nbetween [0.0 and 1.0] - right now lfo-control-sources emits values\nbetween [-1.0 and 1.0] - we can make control-sources announce that or\nfix it in a lfo2-control-source</p>\n</li>\n<li>\n<p>ranged-control-binding - it might be a nice thing to have a\ncontrol-binding that has scale and offset properties - when attaching a\ncontrol-source to e.g. volume, one needs to be aware that the values go\nfrom [0.0 to 4.0] - we can also have a \"mapping-mode\"={AS_IS,\nTRANSFORMED} on direct-control-binding and two extra properties that are\nused in TRANSFORMED mode</p>\n</li>\n<li>\n<p>control-setup descriptions - it would be nice to have a way to parse a\ntextual control-setup description. This could be used in gst-launch and\nin presets. It needs to be complemented with a formatter (for the preset\nstorage or e.g. for debug logging). - this could be function-style:\ndirect(control-source=lfo(waveform=<em>sine</em>,offset=0.5)) or gst-launch\nstyle (looks weird) lfo wave=sine offset=0.5 ! direct .control-source</p>\n</li>\n</ul>\n\n</div>\n\n\n        "});