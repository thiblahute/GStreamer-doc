fragment_downloaded_cb({"url": "gst-plugins-base-video-doc-1.0/c/videooverlay.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"videooverlay.h\">\n<h1 id=\"gstvideooverlay\">GstVideoOverlay</h1><p>The <a href=\"videooverlay.html#GstVideoOverlay\">GstVideoOverlay</a> interface is used for 2 main purposes :</p>\n<ul>\n<li>To get a grab on the Window where the video sink element is going to render.\nThis is achieved by either being informed about the Window identifier that\nthe video sink element generated, or by forcing the video sink element to use\na specific Window identifier for rendering.</li>\n<li>To force a redrawing of the latest video frame the video sink element\ndisplayed on the Window. Indeed if the <a href=\"../../libgstreamer-doc-1.0/c/gstpipeline.html#GstPipeline\">GstPipeline</a> is in <a href=\"../../libgstreamer-doc-1.0/c/gstelement.html#GST_STATE_PAUSED\">GST_STATE_PAUSED</a>\nstate, moving the Window around will damage its content. Application\ndevelopers will want to handle the Expose events themselves and force the\nvideo sink element to refresh the Window's content.</li>\n</ul>\n<p>Using the Window created by the video sink is probably the simplest scenario,\nin some cases, though, it might not be flexible enough for application\ndevelopers if they need to catch events such as mouse moves and button\nclicks.</p>\n<p>Setting a specific Window identifier on the video sink element is the most\nflexible solution but it has some issues. Indeed the application needs to set\nits Window identifier at the right time to avoid internal Window creation\nfrom the video sink element. To solve this issue a <a href=\"../../libgstreamer-doc-1.0/c/gstmessage.html#GstMessage\">GstMessage</a> is posted on\nthe bus to inform the application that it should set the Window identifier\nimmediately. Here is an example on how to do that correctly:</p>\n<pre><code class=\"language-[\"> static GstBusSyncReply\n create_window (GstBus * bus, GstMessage * message, GstPipeline * pipeline)\n {\n  // ignore anything but 'prepare-window-handle' element messages\n  if (!gst_is_video_overlay_prepare_window_handle_message (message))\n    return GST_BUS_PASS;\n\n  win = XCreateSimpleWindow (disp, root, 0, 0, 320, 240, 0, 0, 0);\n\n  XSetWindowBackgroundPixmap (disp, win, None);\n\n  XMapRaised (disp, win);\n\n  XSync (disp, FALSE);\n\n  gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (GST_MESSAGE_SRC (message)),\n      win);\n\n  gst_message_unref (message);\n\n  return GST_BUS_DROP;\n }\n ...\n int\n main (int argc, char **argv)\n {\n ...\n  bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n  gst_bus_set_sync_handler (bus, (GstBusSyncHandler) create_window, pipeline,\n        NULL);\n ...\n }\n</code></pre>\n<h2 id=\"two-basic-usage-scenarios\">Two basic usage scenarios</h2>\n<p>There are two basic usage scenarios: in the simplest case, the application\nuses <a href=\"../../gst-plugins-base-plugins-doc-1.0/element-playbin.html#playbin\">playbin</a> or plasink or knows exactly what particular element is used\nfor video output, which is usually the case when the application creates\nthe videosink to use (e.g. <a href=\"../../gst-plugins-base-plugins-doc-1.0/element-xvimagesink.html#xvimagesink\">xvimagesink</a>, <a href=\"../../gst-plugins-base-plugins-doc-1.0/element-ximagesink.html#ximagesink\">ximagesink</a>, etc.) itself; in this\ncase, the application can just create the videosink element, create and\nrealize the window to render the video on and then\ncall <a href=\"videooverlay.html#gst_video_overlay_set_window_handle\">gst_video_overlay_set_window_handle</a> directly with the XID or native\nwindow handle, before starting up the pipeline.\nAs <a href=\"../../gst-plugins-base-plugins-doc-1.0/element-playbin.html#playbin\">playbin</a> and <a href=\"../../gst-plugins-base-plugins-doc-1.0/element-playsink.html#playsink\">playsink</a> implement the video overlay interface and proxy\nit transparently to the actual video sink even if it is created later, this\ncase also applies when using these elements.</p>\n<p>In the other and more common case, the application does not know in advance\nwhat GStreamer video sink element will be used for video output. This is\nusually the case when an element such as <a href=\"../../gst-plugins-good-doc-1.0/element-autovideosink.html#autovideosink\">autovideosink</a> is used.\nIn this case, the video sink element itself is created\nasynchronously from a GStreamer streaming thread some time after the\npipeline has been started up. When that happens, however, the video sink\nwill need to know right then whether to render onto an already existing\napplication window or whether to create its own window. This is when it\nposts a prepare-window-handle message, and that is also why this message needs\nto be handled in a sync bus handler which will be called from the streaming\nthread directly (because the video sink will need an answer right then).</p>\n<p>As response to the prepare-window-handle element message in the bus sync\nhandler, the application may use <a href=\"videooverlay.html#gst_video_overlay_set_window_handle\">gst_video_overlay_set_window_handle</a> to tell\nthe video sink to render onto an existing window surface. At this point the\napplication should already have obtained the window handle / XID, so it\njust needs to set it. It is generally not advisable to call any GUI toolkit\nfunctions or window system functions from the streaming thread in which the\nprepare-window-handle message is handled, because most GUI toolkits and\nwindowing systems are not thread-safe at all and a lot of care would be\nrequired to co-ordinate the toolkit and window system calls of the\ndifferent threads (Gtk+ users please note: prior to Gtk+ 2.18\n<a href=\"http://developer.gnome.org/gdk3/gdk3-X-Window-System-Interaction.html#GDK-WINDOW-XID:CAPS\">GDK_WINDOW_XID</a> was just a simple structure access, so generally fine to do\nwithin the bus sync handler; this macro was changed to a function call in\nGtk+ 2.18 and later, which is likely to cause problems when called from a\nsync handler; see below for a better approach without <a href=\"http://developer.gnome.org/gdk3/gdk3-X-Window-System-Interaction.html#GDK-WINDOW-XID:CAPS\">GDK_WINDOW_XID</a>\nused in the callback).</p>\n<h2 id=\"gstvideooverlay-and-gtk\">GstVideoOverlay and Gtk+</h2>\n<pre><code class=\"language-[\"> #include &amp;lt;gst/video/videooverlay.h&amp;gt;\n #include &amp;lt;gtk/gtk.h&amp;gt;\n #ifdef GDK_WINDOWING_X11\n #include &amp;lt;gdk/gdkx.h&amp;gt;  // for GDK_WINDOW_XID\n #endif\n #ifdef GDK_WINDOWING_WIN32\n #include &amp;lt;gdk/gdkwin32.h&amp;gt;  // for GDK_WINDOW_HWND\n #endif\n ...\n static guintptr video_window_handle = 0;\n ...\n static GstBusSyncReply\n bus_sync_handler (GstBus * bus, GstMessage * message, gpointer user_data)\n {\n  // ignore anything but 'prepare-window-handle' element messages\n  if (!gst_is_video_overlay_prepare_window_handle_message (message))\n    return GST_BUS_PASS;\n\n  if (video_window_handle != 0) {\n    GstVideoOverlay *overlay;\n\n    // GST_MESSAGE_SRC (message) will be the video sink element\n    overlay = GST_VIDEO_OVERLAY (GST_MESSAGE_SRC (message));\n    gst_video_overlay_set_window_handle (overlay, video_window_handle);\n  } else {\n    g_warning (\"Should have obtained video_window_handle by now!\");\n  }\n\n  gst_message_unref (message);\n  return GST_BUS_DROP;\n }\n ...\n static void\n video_widget_realize_cb (GtkWidget * widget, gpointer data)\n {\n #if GTK_CHECK_VERSION(2,18,0)\n   // Tell Gtk+/Gdk to create a native window for this widget instead of\n   // drawing onto the parent widget.\n   // This is here just for pedagogical purposes, GDK_WINDOW_XID will call\n   // it as well in newer Gtk versions\n   if (!gdk_window_ensure_native (widget-&gt;window))\n     g_error (\"Couldn't create native window needed for GstVideoOverlay!\");\n #endif\n\n #ifdef GDK_WINDOWING_X11\n   {\n     gulong xid = GDK_WINDOW_XID (gtk_widget_get_window (video_window));\n     video_window_handle = xid;\n   }\n #endif\n #ifdef GDK_WINDOWING_WIN32\n   {\n     HWND wnd = GDK_WINDOW_HWND (gtk_widget_get_window (video_window));\n     video_window_handle = (guintptr) wnd;\n   }\n #endif\n }\n ...\n int\n main (int argc, char **argv)\n {\n   GtkWidget *video_window;\n   GtkWidget *app_window;\n   ...\n   app_window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n   ...\n   video_window = gtk_drawing_area_new ();\n   g_signal_connect (video_window, \"realize\",\n       G_CALLBACK (video_widget_realize_cb), NULL);\n   gtk_widget_set_double_buffered (video_window, FALSE);\n   ...\n   // usually the video_window will not be directly embedded into the\n   // application window like this, but there will be many other widgets\n   // and the video window will be embedded in one of them instead\n   gtk_container_add (GTK_CONTAINER (ap_window), video_window);\n   ...\n   // show the GUI\n   gtk_widget_show_all (app_window);\n\n   // realize window now so that the video window gets created and we can\n   // obtain its XID/HWND before the pipeline is started up and the videosink\n   // asks for the XID/HWND of the window to render onto\n   gtk_widget_realize (video_window);\n\n   // we should have the XID/HWND now\n   g_assert (video_window_handle != 0);\n   ...\n   // set up sync handler for setting the xid once the pipeline is started\n   bus = gst_pipeline_get_bus (GST_PIPELINE (pipeline));\n   gst_bus_set_sync_handler (bus, (GstBusSyncHandler) bus_sync_handler, NULL,\n       NULL);\n   gst_object_unref (bus);\n   ...\n   gst_element_set_state (pipeline, GST_STATE_PLAYING);\n   ...\n }\n</code></pre>\n<h2 id=\"gstvideooverlay-and-qt\">GstVideoOverlay and Qt</h2>\n<pre><code class=\"language-[\"> #include &amp;lt;glib.h&amp;gt;\n #include &amp;lt;gst/gst.h&amp;gt;\n #include &amp;lt;gst/video/videooverlay.h&amp;gt;\n\n #include &amp;lt;QApplication&amp;gt;\n #include &amp;lt;QTimer&amp;gt;\n #include &amp;lt;QWidget&amp;gt;\n\n int main(int argc, char *argv[])\n {\n   if (!g_thread_supported ())\n     g_thread_init (NULL);\n\n   gst_init (&amp;argc, &amp;argv);\n   QApplication app(argc, argv);\n   app.connect(&amp;app, SIGNAL(lastWindowClosed()), &amp;app, SLOT(quit ()));\n\n   // prepare the pipeline\n\n   GstElement *pipeline = gst_pipeline_new (\"xvoverlay\");\n   GstElement *src = gst_element_factory_make (\"videotestsrc\", NULL);\n   GstElement *sink = gst_element_factory_make (\"xvimagesink\", NULL);\n   gst_bin_add_many (GST_BIN (pipeline), src, sink, NULL);\n   gst_element_link (src, sink);\n\n   // prepare the ui\n\n   QWidget window;\n   window.resize(320, 240);\n   window.show();\n\n   WId xwinid = window.winId();\n   gst_video_overlay_set_window_handle (GST_VIDEO_OVERLAY (sink), xwinid);\n\n   // run the pipeline\n\n   GstStateChangeReturn sret = gst_element_set_state (pipeline,\n       GST_STATE_PLAYING);\n   if (sret == GST_STATE_CHANGE_FAILURE) {\n     gst_element_set_state (pipeline, GST_STATE_NULL);\n     gst_object_unref (pipeline);\n     // Exit application\n     QTimer::singleShot(0, QApplication::activeWindow(), SLOT(quit()));\n   }\n\n   int ret = app.exec();\n\n   window.hide();\n   gst_element_set_state (pipeline, GST_STATE_NULL);\n   gst_object_unref (pipeline);\n\n   return ret;\n }\n</code></pre>\n\n</div>\n\n\n"});