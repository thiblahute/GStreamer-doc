fragment_downloaded_cb({"url": "gst-plugins-base-pbutils-doc-1.0/javascript/encoding-profile.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"encoding-profile.h\">\n<h1 id=\"gstencodingcontainerprofile\">GstEncodingContainerProfile</h1><p>Functions to create and handle encoding profiles.</p>\n<p>Encoding profiles describe the media types and settings one wishes to use\nfor an encoding process. The top-level profiles are commonly\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/javascript/encoding-profile.html#GstEncodingContainerProfile\">GstPbutils.EncodingContainerProfile</a>(s) (which contains a user-readable name and\ndescription along with which container format to use). These, in turn,\nreference one or more <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a>(s) which indicate which encoding\nformat should be used on each individual streams.</p>\n<p><a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a>(s) can be provided to the 'encodebin' element, which\nwill take care of selecting and setting up the required elements to produce\nan output stream conforming to the specifications of the profile.</p>\n<p>Unlike other systems, the encoding profiles do not specify which <a href=\"../../libgstreamer-doc-1.0/c/gstelement.html#GstElement\">Gst.Element</a>\nto use for the various encoding and muxing steps, but instead relies on\nspecifying the format one wishes to use.</p>\n<p>Encoding profiles can be created at runtime by the application or loaded\nfrom (and saved to) file using the <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingTarget-struct\">GstPbutils.EncodingTarget</a> API.</p>\n<h1 id=\"defining-a-gstencodingprofile-as-a-string\">Defining a GstEncodingProfile as a string</h1>\n<h2 id=\"serialized-encoding-profile-formats\">Serialized encoding profile formats</h2>\n<h2 id=\"using-encoders-and-muxer-element-factory-name\">Using encoders and muxer element factory name:</h2>\n<pre><code>  muxer_factory_name:video_encoder_factory_name:audio_encoder_factory_name\n</code></pre>\n<p>For example to encode a stream into a WebM container, with an OGG audio\nstream and a VP8 video stream, the serialized <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a> looks\nlike:</p>\n<pre><code>  webmmux:vp8enc:vorbisenc\n</code></pre>\n<h2 id=\"define-the-encoding-profile-in-a-generic-way-using-caps\">Define the encoding profile in a generic way using caps:</h2>\n<pre><code>  muxer_source_caps:video_encoder_source_caps:audio_encoder_source_caps\n</code></pre>\n<p>For example to encode a stream into a WebM container, with an OGG audio\nstream and a VP8 video stream, the serialized <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a> looks\nlike:</p>\n<pre><code>  video/webm:video/x-vp8:audio/x-vorbis\n</code></pre>\n<p>It is possible to mix caps and element type names so you can specify a specific\nvideo encoder while using caps for other encoders/muxer.</p>\n<h2 id=\"advanced-encoding-format-serialization-features\">Advanced encoding format serialization features:</h2>\n<p>You can also set the preset name of the encoding profile using the\ncaps+preset_name syntax as in:</p>\n<pre><code>  video/webm:video/x-vp8+youtube-preset:audio/x-vorbis\n</code></pre>\n<p>Moreover, you can set the <code>presence</code> property of an\nencoding profile using the <code>|presence</code> syntax as in:</p>\n<pre><code>  video/webm:video/x-vp8|1:audio/x-vorbis\n</code></pre>\n<p>This field allows specifies the maximum number of times a\n<a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a> can be used inside an encodebin. If 0, it is not a\nmandatory stream and can be used as many times as necessary.</p>\n<p>You can also use the <code>restriction_caps-&gt;encoded_format_caps</code> syntax to\nspecify the restriction caps to be set on a <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a></p>\n<p>It corresponds to the restriction <a href=\"../../libgstreamer-doc-1.0/c/gstcaps.html#GstCaps\">Gst.Caps</a> to apply before the encoder that\nwill be used in the profile. The fields present in restriction caps are\nproperties of the raw stream (that is, before encoding), such as height and\nwidth for video and depth and sampling rate for audio. This property does\nnot make sense for muxers. See <a href=\"../../gst-plugins-base-pbutils-doc-1.0/javascript/encoding-profile.html#gst_encoding_profile_get_restriction\">GstPbutils.EncodingProfile.prototype.get_restriction</a> for\nmore details.</p>\n<p>To force a video stream to be encoded with a Full HD resolution (using WebM\nas the container format, VP8 as the video codec and Vorbis as the audio\ncodec), you should use:</p>\n<pre><code>  \"video/webm:video/x-raw,width=1920,height=1080-&gt;video/x-vp8:audio/x-vorbis\"\n</code></pre>\n<blockquote>\n<p>NOTE: Make sure to enclose into quotes to avoid '&gt;' to be reinterpreted by\nthe shell.</p>\n</blockquote>\n<p>In the case you are using encoder types, the following is also possible:</p>\n<pre><code>  \"matroskamux:x264enc,width=1920,height=1080:audio/x-vorbis\"\n</code></pre>\n<h2 id=\"some-serialized-encoding-formats-examples\">Some serialized encoding formats examples:</h2>\n<p>MP3 audio and H264 in MP4:</p>\n<pre><code>  video/quicktime,variant=iso:video/x-h264:audio/mpeg,mpegversion=1,layer=3\n</code></pre>\n<p>Vorbis and theora in OGG:</p>\n<pre><code>  application/ogg:video/x-theora:audio/x-vorbis\n</code></pre>\n<p>AC3 and H264 in MPEG-TS:</p>\n<pre><code>  video/mpegts:video/x-h264:audio/x-ac3\n</code></pre>\n<h2 id=\"loading-a-profile-from-encoding-targets\">Loading a profile from encoding targets</h2>\n<p>Anywhere where you have to use a string to define a <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingProfile-struct\">GstPbutils.EncodingProfile</a>,\nyou can use load it from a <a href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-base-libs/html/gst-plugins-base-libs-encoding-profile.html#GstEncodingTarget-struct\">GstPbutils.EncodingTarget</a> using the following syntaxes:</p>\n<pre><code>  target_name[/profilename/category]\n</code></pre>\n<p>or</p>\n<pre><code>  /path/to/target.gep:profilename\n</code></pre>\n<h1 id=\"example-creating-a-profile\">Example: Creating a profile</h1>\n<pre><code class=\"language-&lt;!--\">#include &lt;gst/pbutils/encoding-profile.h&gt;\n...\nGstEncodingProfile *\ncreate_ogg_theora_profile(void)\n{\n GstEncodingContainerProfile *prof;\n GstCaps *caps;\n\n caps = gst_caps_from_string(\"application/ogg\");\n prof = gst_encoding_container_profile_new(\"Ogg audio/video\",\n    \"Standard OGG/THEORA/VORBIS\",\n    caps, NULL);\n gst_caps_unref (caps);\n\n caps = gst_caps_from_string(\"video/x-theora\");\n gst_encoding_container_profile_add_profile(prof,\n      (GstEncodingProfile*) gst_encoding_video_profile_new(caps, NULL, NULL, 0));\n gst_caps_unref (caps);\n\n caps = gst_caps_from_string(\"audio/x-vorbis\");\n gst_encoding_container_profile_add_profile(prof,\n      (GstEncodingProfile*) gst_encoding_audio_profile_new(caps, NULL, NULL, 0));\n gst_caps_unref (caps);\n\n return (GstEncodingProfile*) prof;\n}\n\n</code></pre>\n<h1 id=\"example-using-an-encoder-preset-with-a-profile\">Example: Using an encoder preset with a profile</h1>\n<pre><code class=\"language-&lt;!--\">#include &lt;gst/pbutils/encoding-profile.h&gt;\n...\nGstEncodingProfile *\ncreate_ogg_theora_profile(void)\n{\n GstEncodingVideoProfile *v;\n GstEncodingAudioProfile *a;\n GstEncodingContainerProfile *prof;\n GstCaps *caps;\n GstPreset *preset;\n\n caps = gst_caps_from_string (\"application/ogg\");\n prof = gst_encoding_container_profile_new (\"Ogg audio/video\",\n    \"Standard OGG/THEORA/VORBIS\",\n    caps, NULL);\n gst_caps_unref (caps);\n\n preset = GST_PRESET (gst_element_factory_make (\"theoraenc\", \"theorapreset\"));\n g_object_set (preset, \"bitrate\", 1000, NULL);\n // The preset will be saved on the filesystem,\n // so try to use a descriptive name\n gst_preset_save_preset (preset, \"theora_bitrate_preset\");\n gst_object_unref (preset);\n\n caps = gst_caps_from_string (\"video/x-theora\");\n v = gst_encoding_video_profile_new (caps, \"theorapreset\", NULL, 0);\n gst_encoding_container_profile_add_profile (prof, (GstEncodingProfile*) v);\n gst_caps_unref (caps);\n\n caps = gst_caps_from_string (\"audio/x-vorbis\");\n a = gst_encoding_audio_profile_new (caps, NULL, NULL, 0);\n gst_encoding_container_profile_add_profile (prof, (GstEncodingProfile*) a);\n gst_caps_unref (caps);\n\n return (GstEncodingProfile*) prof;\n}\n\n</code></pre>\n<h1 id=\"example-listing-categories-targets-and-profiles\">Example: Listing categories, targets and profiles</h1>\n<pre><code class=\"language-c\">#include &lt;gst/pbutils/encoding-profile.h&gt;\n...\nGstEncodingProfile *prof;\nGList *categories, *tmpc;\nGList *targets, *tmpt;\n...\ncategories = gst_encoding_list_available_categories ();\n\n... Show available categories to user ...\n\nfor (tmpc = categories; tmpc; tmpc = tmpc-&gt;next) {\n  gchar *category = (gchar *) tmpc-&gt;data;\n\n  ... and we can list all targets within that category ...\n\n  targets = gst_encoding_list_all_targets (category);\n\n  ... and show a list to our users ...\n\n  g_list_foreach (targets, (GFunc) gst_encoding_target_unref, NULL);\n  g_list_free (targets);\n}\n\ng_list_foreach (categories, (GFunc) g_free, NULL);\ng_list_free (categories);\n\n...\n</code></pre>\n<h1 id=\"encoding-target\">Encoding Target</h1>\n<p>On top of the notion of profiles, we implement the notion of EncodingTarget.\nEncoding Targets are basically a higher level of abstraction to define formats\nfor specific target types. Those can define several GstEncodingProfiles with\ndifferent names, for example one for transcoding in full HD, another one for\nlow res, etc.. which are defined in the same encoding target.</p>\n<p>Basically if you wan to encode a stream to send it to, say, youtube you should\nhave a Youtube encoding target defined in the \"online-service\" category.</p>\n<h2 id=\"encoding-target-serialization-format\">Encoding target serialization format</h2>\n<p>Encoding targets are serialized in a KeyFile like files.</p>\n<pre><code>[GStreamer Encoding Target]\nname : &lt;name&gt;\ncategory : &lt;category&gt;\n\\description : &lt;description&gt; #translatable\n\n[profile-&lt;profile1name&gt;]\nname : &lt;name&gt;\n\\description : &lt;description&gt; #optional\nformat : &lt;format&gt;\npreset : &lt;preset&gt;\n\n[streamprofile-&lt;id&gt;]\nparent : &lt;encodingprofile.name&gt;[,&lt;encodingprofile.name&gt;..]\n\\type : &lt;type&gt; # \"audio\", \"video\", \"text\"\nformat : &lt;format&gt;\npreset : &lt;preset&gt;\nrestriction : &lt;restriction&gt;\npresence : &lt;presence&gt;\npass : &lt;pass&gt;\nvariableframerate : &lt;variableframerate&gt;\n</code></pre>\n<h1 id=\"location-of-encoding-target-files\">Location of encoding target files</h1>\n<p>$GST_DATADIR/gstreamer-GST_API_VERSION/encoding-profile\n$HOME/gstreamer-GST_API_VERSION/encoding-profile</p>\n<p>There also is a GST_ENCODING_TARGET_PATH environment variable\ndefining a list of folder containing encoding target files.</p>\n<h2 id=\"naming-convention\">Naming convention</h2>\n<pre><code>  $(target.category)/$(target.name).gep\n</code></pre>\n<h1 id=\"naming-restrictions\">Naming restrictions:</h1>\n<ul>\n<li>lowercase ASCII letter for the first character</li>\n<li>Same for all other characters + numerics + hyphens</li>\n</ul>\n\n</div>\n\n\n"});