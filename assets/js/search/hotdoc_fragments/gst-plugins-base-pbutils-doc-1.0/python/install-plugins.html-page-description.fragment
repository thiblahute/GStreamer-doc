fragment_downloaded_cb({"url": "gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"install-plugins.h\">\n<h1 id=\"installplugins\">Install-plugins</h1><h2 id=\"overview\">Overview</h2>\n<p>Using this API, applications can request the installation of missing\nGStreamer plugins. These may be missing decoders/demuxers or\nencoders/muxers for a certain format, sources or sinks for a certain URI\nprotocol (e.g. 'http'), or certain elements known by their element\nfactory name ('audioresample').</p>\n<p>Whether plugin installation is supported or not depends on the operating\nsystem and/or distribution in question. The vendor of the operating\nsystem needs to make sure the necessary hooks and mechanisms are in\nplace for plugin installation to work. See below for more detailed\ninformation.</p>\n<p>From the application perspective, plugin installation is usually\ntriggered either</p>\n<ul>\n<li>when the application itself has found that it wants or needs to\ninstall a certain element</li>\n<li>when the application has been notified by an element (such as\nplaybin or decodebin) that one or more plugins are missing <em>and</em> the\napplication has decided that it wants to install one or more of\nthose missing plugins</li>\n</ul>\n<p>The install functions in this section all take one or more 'detail\nstrings'. These detail strings contain information about the type of\nplugin that needs to be installed (decoder, encoder, source, sink, or\nnamed element), and some additional information such GStreamer version\nused and a human-readable description of the component to install for\nuser dialogs.</p>\n<p>Applications should not concern themselves with the composition of the\nstring itself. They should regard the string as if it was a shared\nsecret between GStreamer and the plugin installer application.</p>\n<p>Detail strings can be obtained using the function\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_plugin_message_get_installer_detail\">GstPbutils.missing_plugin_message_get_installer_detail</a> on a\nmissing-plugin message. Such a message will either have been found by\nthe application on a pipeline's <a href=\"../../libgstreamer-doc-1.0/c/gstbus.html#GstBus\">Gst.Bus</a>, or the application will have\ncreated it itself using <a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_element_message_new\">GstPbutils.missing_element_message_new</a>,\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_decoder_message_new\">GstPbutils.missing_decoder_message_new</a>,\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_encoder_message_new\">GstPbutils.missing_encoder_message_new</a>,\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_uri_sink_message_new\">GstPbutils.missing_uri_sink_message_new</a>, or\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_uri_source_message_new\">GstPbutils.missing_uri_source_message_new</a>.</p>\n<p>For each GStreamer element/plugin/component that should be installed,\nthe application needs one of those 'installer detail' string mentioned\nin the previous section. This string can be obtained, as already\nmentioned above, from a missing-plugin message using the function\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/missing-plugins.html#gst_missing_plugin_message_get_installer_detail\">GstPbutils.missing_plugin_message_get_installer_detail</a>. The\nmissing-plugin message is either posted by another element and then\nfound on the bus by the application, or the application has created it\nitself as described above.</p>\n<p>The application will then call <a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#gst_install_plugins_async\">GstPbutils.install_plugins_async</a>, passing a\nNULL-terminated array of installer detail strings, and a function that\nshould be called when the installation of the plugins has finished\n(successfully or not). Optionally, a <a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#GstInstallPluginsContext\">GstPbutils.InstallPluginsContext</a> created\nwith <a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#gst_install_plugins_context_new\">GstPbutils.InstallPluginsContext.new</a> may be passed as well. This\nway additional optional arguments like the application window's XID can\nbe passed to the external installer application.</p>\n<p><a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#gst_install_plugins_async\">GstPbutils.install_plugins_async</a> will return almost immediately, with the\nreturn code indicating whether plugin installation was started or not.\nIf the necessary hooks for plugin installation are in place and an\nexternal installer application has in fact been called, the passed in\nfunction will be called with a result code as soon as the external\ninstaller has finished. If the result code indicates that new plugins\nhave been installed, the application will want to call\n<a href=\"../../libgstreamer-doc-1.0/c/gstregistry.html#gst_update_registry\">Gst.update_registry</a> so the run-time plugin registry is updated and\nthe new plugins are made available to the application.</p>\n<blockquote>\n<p>A Gtk/GLib main loop must be running in order for the result function\nto be called when the external installer has finished. If this is not\nthe case, make sure to regularly call in your code:</p>\n<p>g_main_context_iteration (NULL,FALSE);</p>\n</blockquote>\n<h2 id=\"1-installer-hook\">1. Installer hook</h2>\n<p>When GStreamer applications initiate plugin installation via\n<a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#gst_install_plugins_async\">GstPbutils.install_plugins_async</a> or <a href=\"../../gst-plugins-base-pbutils-doc-1.0/python/install-plugins.html#gst_install_plugins_sync\">GstPbutils.install_plugins_sync</a>, a\npre-defined helper application will be called.</p>\n<p>The exact path of the helper application to be called is set at compile\ntime, usually by the <code>./configure</code> script based on the install prefix.\nFor a normal package build into the <code>/usr</code> prefix, this will usually\ndefault to <code>/usr/libexec/gst-install-plugins-helper</code> or\n<code>/usr/lib/gst-install-plugins-helper</code>.</p>\n<p>Vendors/distros who want to support GStreamer plugin installation should\neither provide such a helper script/application or use the <code>./configure</code>\noption <code>--with-install-plugins-helper=/path/to/installer</code> to make\nGStreamer call an installer of their own directly.</p>\n<p>It is strongly recommended that vendors provide a small helper\napplication as interlocutor to the real installer though, even more so\nif command line argument munging is required to transform the command\nline arguments passed by GStreamer to the helper application into\narguments that are understood by the real installer.</p>\n<p>The helper application path defined at compile time can be overriden at\nruntime by setting the GST_INSTALL_PLUGINS_HELPER environment\nvariable. This can be useful for testing/debugging purposes.</p>\n<h2 id=\"2-arguments-passed-to-the-install-helper\">2. Arguments passed to the install helper</h2>\n<p>GStreamer will pass the following arguments to the install helper (this\nis in addition to the path of the executable itself, which is by\nconvention argv[0]):</p>\n<ul>\n<li>\n<p>none to many optional arguments in the form of <code>--foo-bar=val</code>.\nExample: <code>--transient-for=XID</code> where XID is the X Window ID of the\nmain window of the calling application (so the installer can make\nitself transient to that window). Unknown optional arguments should\nbe ignored by the installer.</p>\n</li>\n<li>\n<p>one 'installer detail string' argument for each plugin to be\ninstalled; these strings will have a <code>gstreamer</code> prefix; the exact\nformat of the detail string is explained below</p>\n</li>\n</ul>\n<h2 id=\"3-detail-string-describing-the-missing-plugin\">3. Detail string describing the missing plugin</h2>\n<p>The string is in UTF-8 encoding and is made up of several fields,\nseparated by '|' characters (but neither the first nor the last\ncharacter is a '|'). The fields are:</p>\n<ul>\n<li>plugin system identifier, ie. \"gstreamer\"\nThis identifier determines the format of the rest of the detail\nstring. Automatic plugin installers should not process detail\nstrings with unknown identifiers. This allows other plugin-based\nlibraries to use the same mechanism for their automatic plugin\ninstallation needs, or for the format to be changed should it turn\nout to be insufficient.</li>\n<li>plugin system version, e.g. \"0.10\"\nThis is required so that when there is a GStreamer-0.12 or\nGStreamer-1.0 at some point in future, the different major versions\ncan still co-exist and use the same plugin install mechanism in the\nsame way.</li>\n<li>application identifier, e.g. \"totem\"\nThis may also be in the form of \"pid/12345\" if the program name\ncan't be obtained for some reason.</li>\n<li>human-readable localised description of the required component, e.g.\n\"Vorbis audio decoder\"</li>\n<li>identifier string for the required component (see below for details\nabout how to map this to the package/plugin that needs installing),\ne.g.\n<ul>\n<li>urisource-$(PROTOCOL_REQUIRED), e.g. urisource-http or\nurisource-mms</li>\n<li>element-$(ELEMENT_REQUIRED), e.g. element-videoconvert</li>\n<li>decoder-$(CAPS_REQUIRED), e.g. (do read below for more\ndetails!):\n<ul>\n<li>decoder-audio/x-vorbis</li>\n<li>decoder-application/ogg</li>\n<li>decoder-audio/mpeg, mpegversion=(int)4</li>\n<li>decoder-video/mpeg, systemstream=(boolean)true,\nmpegversion=(int)2</li>\n</ul>\n</li>\n<li>encoder-$(CAPS_REQUIRED), e.g. encoder-audio/x-vorbis</li>\n</ul>\n</li>\n<li>optional further fields not yet specified</li>\n</ul>\n<p>An entire ID string might then look like this, for example: <code>gstreamer|0.10|totem|Vorbis audio decoder|decoder-audio/x-vorbis</code></p>\n<p>Plugin installers parsing this ID string should expect further fields\nalso separated by '|' symbols and either ignore them, warn the user, or\nerror out when encountering them.</p>\n<p>Those unfamiliar with the GStreamer 'caps' system should note a few\nthings about the caps string used in the above decoder/encoder case:</p>\n<ul>\n<li>the first part (\"video/mpeg\") of the caps string is a GStreamer\nmedia type and <em>not</em> a MIME type. Wherever possible, the GStreamer\nmedia type will be the same as the corresponding MIME type, but\noften it is not.</li>\n<li>a caps string may or may not have additional comma-separated fields\nof various types (as seen in the examples above)</li>\n<li>the caps string of a 'required' component (as above) will always\nhave fields with fixed values, whereas an introspected string (see\nbelow) may have fields with non-fixed values. Compare for example:\n<ul>\n<li><code>audio/mpeg, mpegversion=(int)4</code> vs.\n<code>audio/mpeg, mpegversion=(int){2, 4}</code></li>\n<li><code>video/mpeg, mpegversion=(int)2</code> vs.\n<code>video/mpeg, systemstream=(boolean){ true, false}, mpegversion=(int)[1, 2]</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-exit-codes-the-installer-should-return\">4. Exit codes the installer should return</h2>\n<p>The installer should return one of the following exit codes when it\nexits:</p>\n<ul>\n<li>0 if all of the requested plugins could be installed\n(#GST_INSTALL_PLUGINS_SUCCESS)</li>\n<li>1 if no appropriate installation candidate for any of the requested\nplugins could be found. Only return this if nothing has been\ninstalled (#GST_INSTALL_PLUGINS_NOT_FOUND)</li>\n<li>2 if an error occured during the installation. The application will\nassume that the user will already have seen an error message by the\ninstaller in this case and will usually not show another one\n(#GST_INSTALL_PLUGINS_ERROR)</li>\n<li>3 if some of the requested plugins could be installed, but not all\n(#GST_INSTALL_PLUGINS_PARTIAL_SUCCESS)</li>\n<li>4 if the user aborted the installation\n(#GST_INSTALL_PLUGINS_USER_ABORT)</li>\n</ul>\n<h2 id=\"5-how-to-map-the-required-detail-string-to-packages\">5. How to map the required detail string to packages</h2>\n<p>It is up to the vendor to find mechanism to map required components from\nthe detail string to the actual packages/plugins to install. This could\nbe a hardcoded list of mappings, for example, or be part of the\npackaging system metadata.</p>\n<p>GStreamer plugin files can be introspected for this information. The\n<code>gst-inspect</code> utility has a special command line option that will output\ninformation similar to what is required. For example <code>$ gst-inspect-1.0 --print-plugin-auto-install-info /path/to/libgstvorbis.so should output something along the lines of</code>decoder-audio/x-vorbis<code>,</code>element-vorbisdec<code></code>element-vorbisenc<code></code>element-vorbisparse<code>,</code>element-vorbistag<code>,</code>encoder-audio/x-vorbis`</p>\n<p>Note that in the encoder and decoder case the introspected caps can be\nmore complex with additional fields, e.g.\n<code>audio/mpeg,mpegversion=(int){2,4}</code>, so they will not always exactly\nmatch the caps wanted by the application. It is up to the installer to\ndeal with this (either by doing proper caps intersection using the\nGStreamer <a href=\"../../libgstreamer-doc-1.0/c/gstcaps.html#GstCaps\">Gst.Caps</a> API, or by only taking into account the media type).</p>\n<p>Another potential source of problems are plugins such as ladspa or\nlibvisual where the list of elements depends on the installed\nladspa/libvisual plugins at the time. This is also up to the\ndistribution to handle (but usually not relevant for playback\napplications).</p>\n\n</div>\n\n\n"});