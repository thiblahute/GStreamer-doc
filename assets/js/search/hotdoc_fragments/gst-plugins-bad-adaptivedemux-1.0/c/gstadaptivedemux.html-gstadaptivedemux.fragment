fragment_downloaded_cb({"url": "gst-plugins-bad-adaptivedemux-1.0/c/gstadaptivedemux.html#gstadaptivedemux", "fragment": "GstAdaptiveDemux \nWhat is an adaptive demuxer Adaptive demuxers are special demuxers in the sense that they don t actually demux data received from upstream but download the data themselves. \nAdaptive formats HLS DASH MSS are composed of a manifest file and a set of fragments. The manifest describes the available media and the sequence of fragments to use. Each fragments contains a small part of the media typically only a few seconds It is possible for the manifest to have the same media available in different configurations bitrates for example so that the client can select the one that best suits its scenario network fluctuation hardware requirements... It is possible to switch from one representation of the media to another during playback. That s why it is called adaptive because it can be adapted to the client s needs. \nArchitectural overview The manifest is received by the demuxer in its sink pad and upon receiving EOS it parses the manifest and exposes the streams available in it. For each stream a source element will be created and will download the list of fragments one by one. Once a fragment is finished downloading the next URI is set to the source element and it starts fetching it and pushing through the stream s pad. This implies that each stream is independent from each other as it runs on a separate thread. \nAfter downloading each fragment the download rate of it is calculated and the demuxer has a chance to switch to a different bitrate if needed. The switch can be done by simply pushing a new caps before the next fragment when codecs are the same or by exposing a new pad group if it needs a codec change. \nExtra features \nSubclasses While GstAdaptiveDemux is responsible for the workflow it knows nothing about the intrinsics of the subclass formats so the subclasses are resposible for maintaining the manifest data structures and stream information. \n"});