fragment_downloaded_cb({"url": "gst-plugins-base-app-doc-1.0/javascript/gstappsink.html#GstAppSink::pull-sample", "fragment": "<div class=\"base_symbol_container\" data-hotdoc-tags=\"\" id=\"GstAppSink::pull-sample\">\n\t\t<h3 id=\"pullsample\">\n\t<span><code>pull-sample</code></span>\n</h3>\n\n\t\t<pre class=\"programlisting\">\nfunction pull_sample_callback(): {\n    // javascript callback for the 'pull-sample' signal\n}</pre>\n\n<p>This function blocks until a sample or EOS becomes available or the appsink\nelement is set to the READY/NULL state.</p>\n<p>This function will only return samples when the appsink is in the PLAYING\nstate. All rendered samples will be put in a queue so that the application\ncan pull samples at its own rate.</p>\n<p>Note that when the application does not pull samples fast enough, the\nqueued samples could consume a lot of memory, especially when dealing with\nraw video frames. It's possible to control the behaviour of the queue with\nthe \"drop\" and \"max-buffers\" properties.</p>\n<p>If an EOS event was received before any buffers, this function returns\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\">null</a>. Use gst_app_sink_is_eos () to check for the EOS condition.</p>\n\n\n\t<div class=\"multi_return_value_container\">\n\t\t\t<h4 id=\"returns12\">Returns:</h4>\n\t\t<table>\n\t\t<colgroup>\n\t\t\t<col>\n\t\t\t<col>\n\t\t\t<col>\n\t\t</colgroup>\n\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t<td>\n\t\t<p>\n\t\t\t\t</p>\n\t</td>\n\t<td>\n\t\t<p>a <a href=\"../../libgstreamer-doc-1.0/c/gstsample.html#GstSample\">Gst.Sample</a> or NULL when the appsink is stopped or EOS.</p>\n\n\t</td>\n\t<td>\n\t\tGst.Sample (not introspectable)\n\t</td>\n\t</tr>\n\n\t\t\t\t\t</tbody>\n\t</table>\n</div>\n\n\n<p>\n\tFlags :\t\n\t\n\t\t\n\t\t\t\t<a href=\"https://developer.gnome.org/gobject/unstable/gobject-Signals.html#G-SIGNAL-RUN-LAST:CAPS\">Run Last</a>\n\t\t\t\n</p>\n\n\n</div>\n\n\n\n"});